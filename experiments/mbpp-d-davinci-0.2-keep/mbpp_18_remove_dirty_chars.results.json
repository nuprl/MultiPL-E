{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpx73szezj.d(10): Error: `string` is used as a type\n/tmp/tmpx73szezj.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx73szezj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpi9avm67s.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9avm67s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpx73szezj.d(10): Error: `string` is used as a type\n/tmp/tmpx73szezj.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx73szezj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvefn9nm3.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvefn9nm3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(ch; string) \n\t{\n\t\tif(second_string.find(ch) == -1) \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp88eim7bo.d(10): Error: `string` is used as a type\n/tmp/tmp88eim7bo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88eim7bo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp5koum_p6.d(10): Error: `string` is used as a type\n/tmp/tmp5koum_p6.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5koum_p6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvg1dcfdm.d(10): Error: `string` is used as a type\n/tmp/tmpvg1dcfdm.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg1dcfdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[256];\n\tforeach(char c; second_string) \n\t{\n\t\tchar_set[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(char_set[cast(int)c] == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpa1hl79di.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1hl79di.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpn3dktb3j.d(10): Error: `string` is used as a type\n/tmp/tmpn3dktb3j.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3dktb3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvg1dcfdm.d(10): Error: `string` is used as a type\n/tmp/tmpvg1dcfdm.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg1dcfdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpczvnjjq8.d(10): Error: `string` is used as a type\n/tmp/tmpczvnjjq8.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczvnjjq8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1 && dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpzet7rpbz.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzet7rpbz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpwn5n9mfb.d(10): Error: `string` is used as a type\n/tmp/tmpwn5n9mfb.d(14): Error: incompatible types for `(c) in (second_string)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwn5n9mfb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpe56az8_d.d(10): Error: `string` is used as a type\n/tmp/tmpe56az8_d.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe56az8_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp7uo5kyji.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uo5kyji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tstring result;\n\tforeach(char c; string)\n\t\tif(dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp46pp_shg.d(14): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46pp_shg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpznoo55lu.d(10): Error: `string` is used as a type\n/tmp/tmpznoo55lu.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznoo55lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\tint[] result_chars = new int[256];\n\t\n\tfor(int i = 0; i < second_string.length; i++)\n\t{\n\t\tdirty_chars[second_string[i]]++;\n\t}\n\t\n\tfor(int i = 0; i < string.length; i++)\n\t{\n\t\tstring_chars[string[i]]++;\n\t}\n\t\n\tfor(int i = 0; i < 256; i++)\n\t{\n\t\tif(dirty_chars[i] == 0)\n\t\t{\n\t\t\tresult_chars[i] = string_chars[i];\n\t\t}\n\t}\n\t\n\tstring result = \"\";\n\t\n\tfor(int i = 0; i < 256; i++)\n\t{\n\t\tif(result_chars[i] > 0)\n\t\t{\n\t\t\tresult ~= cast(char)i;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpbsus9ffl.d(32): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsus9ffl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_count = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_count[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0qryah1q.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qryah1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpxas6wiaa.d(10): Error: `string` is used as a type\n/tmp/tmpxas6wiaa.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxas6wiaa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpf4nr8s7n.d(10): Error: `string` is used as a type\n/tmp/tmpf4nr8s7n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4nr8s7n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpwzktek8x.d(10): Error: `string` is used as a type\n/tmp/tmpwzktek8x.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzktek8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\timmutable dirty_chars = second_string.dup;\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp5s4rqk5b.d(11): Error: `string` is used as a type\n/tmp/tmp5s4rqk5b.d(14): Error: no property `find` for type `immutable(string)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5s4rqk5b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp_xmq_fn5.d(10): Error: `string` is used as a type\n/tmp/tmp_xmq_fn5.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xmq_fn5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmplc3pouir.d(10): Error: `string` is used as a type\n/tmp/tmplc3pouir.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplc3pouir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpdug4h97g.d(10): Error: `string` is used as a type\n/tmp/tmpdug4h97g.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdug4h97g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp961g5mk3.d(10): Error: `string` is used as a type\n/tmp/tmp961g5mk3.d(13): Error: incompatible types for `(c) in (second_string)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp961g5mk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmplc3pouir.d(10): Error: `string` is used as a type\n/tmp/tmplc3pouir.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplc3pouir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpy6rjkix5.d(10): Error: `string` is used as a type\n/tmp/tmpy6rjkix5.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6rjkix5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tstring_chars[cast(int)c] = 0;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp4c2p5xqj.d(28): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c2p5xqj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpe56az8_d.d(10): Error: `string` is used as a type\n/tmp/tmpe56az8_d.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe56az8_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpewdydsiv.d(10): Error: `string` is used as a type\n/tmp/tmpewdydsiv.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewdydsiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpyi67xmsy.d(10): Error: `string` is used as a type\n/tmp/tmpyi67xmsy.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi67xmsy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp30yqg9hm.d(10): Error: `string` is used as a type\n/tmp/tmp30yqg9hm.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30yqg9hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpx73szezj.d(10): Error: `string` is used as a type\n/tmp/tmpx73szezj.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx73szezj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(ch; string)\n\t{\n\t\tif(second_string.find(ch) == -1)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmphpckeen9.d(10): Error: `string` is used as a type\n/tmp/tmphpckeen9.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpckeen9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpdug4h97g.d(10): Error: `string` is used as a type\n/tmp/tmpdug4h97g.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdug4h97g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp_7nhudse.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7nhudse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp8z6hd9gt.d(10): Error: `string` is used as a type\n/tmp/tmp8z6hd9gt.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z6hd9gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpo2j_bhtt.d(10): Error: `string` is used as a type\n/tmp/tmpo2j_bhtt.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2j_bhtt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp18k4imkg.d(10): Error: `string` is used as a type\n/tmp/tmp18k4imkg.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18k4imkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp18k4imkg.d(10): Error: `string` is used as a type\n/tmp/tmp18k4imkg.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18k4imkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpznoo55lu.d(10): Error: `string` is used as a type\n/tmp/tmpznoo55lu.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznoo55lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp8z6hd9gt.d(10): Error: `string` is used as a type\n/tmp/tmp8z6hd9gt.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z6hd9gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpyi67xmsy.d(10): Error: `string` is used as a type\n/tmp/tmpyi67xmsy.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi67xmsy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpc98ahd82.d(15): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc98ahd82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpe56az8_d.d(10): Error: `string` is used as a type\n/tmp/tmpe56az8_d.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe56az8_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[256];\n\tforeach(ch; second_string)\n\t{\n\t\tchar_set[ch] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(ch; string)\n\t{\n\t\tif(char_set[ch] == 0)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpsvs2hi_9.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvs2hi_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpdm396fxd.d(10): Error: `string` is used as a type\n/tmp/tmpdm396fxd.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm396fxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(!dirty_chars[cast(int)c])\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpvaa7pu9v.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvaa7pu9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpbvbs23nx.d(15): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvbs23nx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpi518r3bv.d(10): Error: `string` is used as a type\n/tmp/tmpi518r3bv.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi518r3bv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach (char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp5svx16sx.d(10): Error: `string` is used as a type\n/tmp/tmp5svx16sx.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5svx16sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t\tdirty_chars[c] = 1;\n\t\n\tforeach(char c; string)\n\t\tstring_chars[c] = 1;\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp6bbopw5q.d(19): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bbopw5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpe9qp6ja_.d(10): Error: `string` is used as a type\n/tmp/tmpe9qp6ja_.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9qp6ja_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\t\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpg0u4pk88.d(17): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0u4pk88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp_xmq_fn5.d(10): Error: `string` is used as a type\n/tmp/tmp_xmq_fn5.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xmq_fn5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpf4nr8s7n.d(10): Error: `string` is used as a type\n/tmp/tmpf4nr8s7n.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4nr8s7n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpe56az8_d.d(10): Error: `string` is used as a type\n/tmp/tmpe56az8_d.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe56az8_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpn3dktb3j.d(10): Error: `string` is used as a type\n/tmp/tmpn3dktb3j.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3dktb3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.indexOf(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp18k4imkg.d(10): Error: `string` is used as a type\n/tmp/tmp18k4imkg.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18k4imkg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.indexOf(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp2rtfmxyj.d(10): Error: `string` is used as a type\n/tmp/tmp2rtfmxyj.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rtfmxyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpxzqrz6sp.d(10): Error: `string` is used as a type\n/tmp/tmpxzqrz6sp.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzqrz6sp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchar_set[cast(int)c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(char_set[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpbgkvgme0.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgkvgme0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpxp_zazsc.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp_zazsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpe56az8_d.d(10): Error: `string` is used as a type\n/tmp/tmpe56az8_d.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe56az8_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpxxh1vf9o.d(10): Error: `string` is used as a type\n/tmp/tmpxxh1vf9o.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxh1vf9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(c in second_string) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp83h0lmow.d(10): Error: `string` is used as a type\n/tmp/tmp83h0lmow.d(13): Error: incompatible types for `(c) in (second_string)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83h0lmow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpvb51q7n6.d(10): Error: `string` is used as a type\n/tmp/tmpvb51q7n6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb51q7n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpws3yd4cf.d(10): Error: `string` is used as a type\n/tmp/tmpws3yd4cf.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpws3yd4cf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tforeach(c; second_string)\n\t{\n\t\tdirty_chars[c] = 1;\n\t}\n\t\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(dirty_chars[c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpjreidcl_.d(16): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjreidcl_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(!second_string.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpx73szezj.d(10): Error: `string` is used as a type\n/tmp/tmpx73szezj.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx73szezj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif (second_string.canFind(c)) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpunjlyyb5.d(10): Error: `string` is used as a type\n/tmp/tmpunjlyyb5.d(13): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunjlyyb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) {\n\t\tif(second_string.find(c) == -1) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmpdug4h97g.d(10): Error: `string` is used as a type\n/tmp/tmpdug4h97g.d(12): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdug4h97g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.count(c) == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpr_jeigeo.d(10): Error: `string` is used as a type\n/tmp/tmpr_jeigeo.d(13): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_jeigeo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpuagjtfkk.d(10): Error: `string` is used as a type\n/tmp/tmpuagjtfkk.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuagjtfkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpn02w8boo.d(10): Error: `string` is used as a type\n/tmp/tmpn02w8boo.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn02w8boo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.indexOf(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp2rtfmxyj.d(10): Error: `string` is used as a type\n/tmp/tmp2rtfmxyj.d(13): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rtfmxyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmpceul2ipj.d(10): Error: `string` is used as a type\n/tmp/tmpceul2ipj.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceul2ipj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "/tmp/tmp0ig3ruo6.d(10): Error: `string` is used as a type\n/tmp/tmp0ig3ruo6.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ig3ruo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tauto result = string.dup;\n\tforeach(char c; second_string) \n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmp8rajgn5z.d(13): Error: no property `replace` for type `char[]`\n/tmp/tmp8rajgn5z.d(15): Error: cannot implicitly convert expression `result` of type `char[]` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rajgn5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(c in second_string)\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpxfw0vjlx.d(10): Error: `string` is used as a type\n/tmp/tmpxfw0vjlx.d(13): Error: incompatible types for `(c) in (second_string)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfw0vjlx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1665517670,
      "stdout": "",
      "stderr": "/tmp/tmp38hyasvv.d(10): Error: `string` is used as a type\n/tmp/tmp38hyasvv.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38hyasvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] dirty_chars = new int[256];\n\tint[] string_chars = new int[256];\n\t\n\tforeach(char c; second_string)\n\t{\n\t\tdirty_chars[cast(int)c] = 1;\n\t}\n\t\n\tforeach(char c; string)\n\t{\n\t\tstring_chars[cast(int)c] = 1;\n\t}\n\t\n\tstring result = \"\";\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(string_chars[cast(int)c] == 1 && dirty_chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmpub9u_69s.d(23): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpub9u_69s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n{\n\tint[] char_set = new int[128];\n\tforeach (char c; second_string) \n\t{\n\t\tchar_set[c] = 1;\n\t}\n\tstring result;\n\tforeach (char c; string) \n\t{\n\t\tif (char_set[c] == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "/tmp/tmplergiiyz.d(15): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplergiiyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}