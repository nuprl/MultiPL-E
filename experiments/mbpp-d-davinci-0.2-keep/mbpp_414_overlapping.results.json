{
  "name": "mbpp_414_overlapping",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "/tmp/tmpz2iutwf7.d(12): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2iutwf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(list1; list2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "/tmp/tmpuslgkl71.d(10): Error: variable `list1` is shadowing variable `tmpuslgkl71.overlapping.list1`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuslgkl71.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpdc7pngl0.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc7pngl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem1; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem1 == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "/tmp/tmpz2iutwf7.d(12): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2iutwf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach (element; list1)\n\t{\n\t\tforeach (element2; list2)\n\t\t{\n\t\t\tif (element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i;list1)\n\t{\n\t\tforeach(j;list2)\n\t\t{\n\t\t\tif(i==j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1) {\n\t\tif(item in list2) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpl5fvahgn.d(11): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5fvahgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n    foreach (elem1; list1)\n    {\n        foreach (elem2; list2)\n        {\n            if (elem1 == elem2)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tlong[] list1_sorted = list1.dup.sort;\n\tlong[] list2_sorted = list2.dup.sort;\n\t\n\tforeach(long item; list1_sorted)\n\t{\n\t\tif(list2_sorted.canFind(item))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpyw3hsrpl.d(10): Error: no property `sort` for type `long[]`\n/tmp/tmpyw3hsrpl.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpyw3hsrpl.d(15): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyw3hsrpl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tauto set1 = set(list1);\n\tauto set2 = set(list2);\n\treturn set1.intersection(set2).length > 0;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp0atfzsee.d(10): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\n/tmp/tmp0atfzsee.d(11): Error: undefined identifier `set`, did you mean variable `set1`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0atfzsee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tif (element in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpmlityqde.d(12): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlityqde.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1) \n\t{\n\t\tforeach(long j; list2) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "/tmp/tmpz2iutwf7.d(12): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2iutwf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpyzq9dh_c.d(12): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzq9dh_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach (item1; list1)\n\t{\n\t\tforeach (item2; list2)\n\t\t{\n\t\t\tif (item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1) \n\t{\n\t\tforeach(element2; list2) \n\t\t{\n\t\t\tif(element == element2) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmph0zfp7lw.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0zfp7lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp9kihhdkn.d(12): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kihhdkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmptw4n9c5q.d(12): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw4n9c5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long item; list1)\n\t{\n\t\tforeach(long item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element1; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element1 == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach (element1; list1)\n\t{\n\t\tforeach (element2; list2)\n\t\t{\n\t\t\tif (element1 == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tauto l1 = list1.dup;\n\tauto l2 = list2.dup;\n\t\n\tforeach(e; l1)\n\t{\n\t\tif(l2.count(e))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpt7uhjqjw.d(15): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7uhjqjw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tauto result = false;\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpyzq9dh_c.d(12): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzq9dh_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1) \n\t{\n\t\tforeach(element2; list2) \n\t\t{\n\t\t\tif(element == element2) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach (i; list1)\n\t{\n\t\tforeach (j; list2)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmptw4n9c5q.d(12): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw4n9c5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\treturn list1.length > 0 && list2.length > 0 && list1.length + list2.length > list1.intersect(list2).length;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmplj5i_rpk.d(10): Error: no property `intersect` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj5i_rpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmph0zfp7lw.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0zfp7lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1) \n\t{\n\t\tforeach(item2; list2) \n\t\t{\n\t\t\tif(item == item2) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tauto set1 = set(list1);\n\tauto set2 = set(list2);\n\treturn set1.intersection(set2).length > 0;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmp0atfzsee.d(10): Error: undefined identifier `set`, did you mean template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\n/tmp/tmp0atfzsee.d(11): Error: undefined identifier `set`, did you mean variable `set1`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0atfzsee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(list2.canFind(item))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "/tmp/tmpr0huin9x.d(12): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0huin9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}