{
  "name": "mbpp_752_jacobsthal_num",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\n*/\nlong jacobsthal_num(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    long a = 0, b = 1, c, i; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2 * b; \n        a = b; \n        b = c; \n    } \n    return b; \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{\n\tlong a = 0, b = 1, c = 0;\n\tif (n == 0)\n\t\treturn a;\n\tfor (long i = 2; i <= n; i++) {\n\t\tc = 2 * b + a;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}",
    "{ \n\tif (n == 0 || n == 1) \n\t\treturn n; \n\treturn jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n\tlong a = 0, b = 1, c, i; \n\tif( n == 0) \n\t\treturn a; \n\tfor (i = 2; i <= n; i++) \n\t{ \n\t\tc = a + 2 * b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn b; \n} ",
    "{ \n    if (n == 0) \n        return 0; \n    if (n == 1) \n        return 1; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{ \n    long a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + 2*b; \n        a = b; \n        b = c; \n    } \n    return b; \n} ",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n  \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} ",
    "{\n\tlong a = 0, b = 1, c, i;\n\tif( n == 0 )\n\t\treturn a;\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tc = a + 2 * b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}",
    "{ \n    if (n == 0 || n == 1) \n        return n; \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2); \n} "
  ]
}