{
  "name": "mbpp_450_extract_string",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res = new string[str.length];\n\tfor(int i = 0; i < str.length; i++)\n\t{\n\t\tres[i] = str[i][0..l];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2120yfwb.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428efe]\n??:? immutable(char)[][] tmp2120yfwb.extract_string(immutable(char)[][], long) [0x427c3e]\n??:? void tmp2120yfwb.__unittest_L16_C1() [0x427d1c]\n??:? void tmp2120yfwb.__modtest() [0x4280b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ba6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a631]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b7d]\n??:? runModuleUnitTests [0x42d5cd]\n??:? void rt.dmain2._d_run_main(in",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16qcqogm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp16qcqogm.__unittest_L19_C1() [0x427dd7]\n??:? void tmp16qcqogm.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tresult[i] = str[i].substr(0, l);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpkam53quq.d(12): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkam53quq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7e6fx_yh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp7e6fx_yh.__unittest_L21_C1() [0x427d77]\n??:? void tmp7e6fx_yh.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) \n\t{\n\t\tif(s.length == l) \n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++)\n\t{\n\t\tresult[i] = str[i][0..l];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp658t0s_b.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428efe]\n??:? immutable(char)[][] tmp658t0s_b.extract_string(immutable(char)[][], long) [0x427c3b]\n??:? void tmp658t0s_b.__unittest_L16_C1() [0x427d1c]\n??:? void tmp658t0s_b.__modtest() [0x4280b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ba6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a631]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b7d]\n??:? runModuleUnitTests [0x42d5cd]\n??:? void rt.dmain2._d_run_main(in",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7e6fx_yh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp7e6fx_yh.__unittest_L21_C1() [0x427d77]\n??:? void tmp7e6fx_yh.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(long i = 0; i < str.length; i++)\n\t{\n\t\tresult[i] = str[i].substr(0, l);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "/tmp/tmpw5y8ivqg.d(12): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5y8ivqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n    string[] result;\n    foreach(string s; str)\n    {\n        if(s.length == l)\n            result ~= s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length >= l)\n\t\t\tresult[i] = s[0..l];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqiznkexr.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428e65]\n??:? void tmpqiznkexr.__unittest_L17_C1() [0x427d9b]\n??:? void tmpqiznkexr.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d80f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a74c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a649]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b95]\n??:? runModuleUnitTests [0x42d5e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429328]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16qcqogm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp16qcqogm.__unittest_L19_C1() [0x427dd7]\n??:? void tmp16qcqogm.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(long i = 0; i < str.length; i++)\n\t{\n\t\tif(str[i].length >= l)\n\t\t{\n\t\t\tresult[i] = str[i].substr(0, l);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "/tmp/tmpbp_zf_qj.d(14): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp_zf_qj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2hts5hgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e35]\n??:? void tmp2hts5hgg.__unittest_L19_C1() [0x427d6b]\n??:? void tmp2hts5hgg.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b65]\n??:? runModuleUnitTests [0x42ded1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i++] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_art81_d.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp_art81_d.__unittest_L18_C1() [0x427d77]\n??:? void tmp_art81_d.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\t\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpapppyi1y.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpapppyi1y.__unittest_L21_C1() [0x427d77]\n??:? void tmpapppyi1y.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvdpsbul.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpsvdpsbul.__unittest_L19_C1() [0x427d77]\n??:? void tmpsvdpsbul.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif (s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp04wife8_.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp04wife8_.__unittest_L23_C1() [0x427dd7]\n??:? void tmp04wife8_.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16qcqogm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp16qcqogm.__unittest_L19_C1() [0x427dd7]\n??:? void tmp16qcqogm.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(int i = 0; i < str.length; i++)\n\t{\n\t\tif(str[i].length > l)\n\t\t{\n\t\t\tresult[i] = str[i].substr(0, l);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "/tmp/tmpnib5pnpi.d(14): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnib5pnpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxe9980ws.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpxe9980ws.__unittest_L23_C1() [0x427dd7]\n??:? void tmpxe9980ws.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7e6fx_yh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp7e6fx_yh.__unittest_L21_C1() [0x427d77]\n??:? void tmp7e6fx_yh.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) {\n\t\tif(s.length == l) {\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16qcqogm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp16qcqogm.__unittest_L19_C1() [0x427dd7]\n??:? void tmp16qcqogm.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvdpsbul.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpsvdpsbul.__unittest_L19_C1() [0x427d77]\n??:? void tmpsvdpsbul.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7e6fx_yh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp7e6fx_yh.__unittest_L21_C1() [0x427d77]\n??:? void tmp7e6fx_yh.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tint i;\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7e6fx_yh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp7e6fx_yh.__unittest_L21_C1() [0x427d77]\n??:? void tmp7e6fx_yh.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16qcqogm.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp16qcqogm.__unittest_L19_C1() [0x427dd7]\n??:? void tmp16qcqogm.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\t\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpprbda4v_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpprbda4v_.__unittest_L24_C1() [0x427dd7]\n??:? void tmpprbda4v_.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tint i;\n\tstring[] result;\n\tforeach(str[i])\n\t{\n\t\tif(str[i].length == l)\n\t\t{\n\t\t\tresult ~= str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "/tmp/tmpj0sh5rsj.d(11): Error: no identifier for declarator `str[i]`\n/tmp/tmpj0sh5rsj.d(11): Error: found `)` when expecting `;`\n/tmp/tmpj0sh5rsj.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0sh5rsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}