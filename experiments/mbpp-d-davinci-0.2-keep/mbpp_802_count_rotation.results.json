{
  "name": "mbpp_802_count_rotation",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "/tmp/tmpqc9qqupe.d(17): Error: variable `mid` is shadowing variable `tmpqc9qqupe.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc9qqupe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0]; \n    long min_index = -1; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpisdiqhe4.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpisdiqhe4.__unittest_L20_C1() [0x427e07]\n??:? void tmpisdiqhe4.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min_index = 0;\n\tlong min_value = arr[0];\n\tlong count = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tif(v < min_value)\n\t\t{\n\t\t\tmin_index = i;\n\t\t\tmin_value = v;\n\t\t}\n\t}\n\tcount = min_index;\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptccof5j5.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281b5]\n??:? void tmptccof5j5.__unittest_L23_C1() [0x427dcf]\n??:? void tmptccof5j5.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428678]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tif (arr[i] > arr[i + 1]) \n\t\t{\n\t\t\tcount = i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = min(arr);\n\tlong index = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tif(v == min)\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "/tmp/tmp6c4ga1xs.d(9): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c4ga1xs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_fnqtzen.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp_fnqtzen.__unittest_L22_C1() [0x427dfb]\n??:? void tmp_fnqtzen.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xuec75l.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp5xuec75l.__unittest_L22_C1() [0x427dfb]\n??:? void tmp5xuec75l.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (low + high + arr.length) / 2;\n\t\tif (arr[next] <= arr[prev]) \n\t\t{\n\t\t\thigh = prev;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = next;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp75rpo6br.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282f6]\n??:? long tmp75rpo6br.count_rotation(long[]) [0x427dd3]\n??:? void tmp75rpo6br.__unittest_L31_C1() [0x427e45]\n??:? void tmp75rpo6br.__modtest() [0x427fc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430255]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]\n??:? runModuleUnitTests [0x42c079]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong result = 0; \n\twhile (low <= high) { \n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low; \n\t\tlong mid = (low + high) / 2; \n\t\tlong next = (mid + 1) % n; \n\t\tlong prev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid; \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < min)\n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsgi0d5jr.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpsgi0d5jr.__unittest_L21_C1() [0x427df7]\n??:? void tmpsgi0d5jr.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbedvj3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp1cbedvj3.__unittest_L19_C1() [0x427e03]\n??:? void tmp1cbedvj3.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif (arr[next] <= arr[prev]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\tif (arr[low] <= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg2au9xt1.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpg2au9xt1.__unittest_L36_C1() [0x42801e]\n??:? void tmpg2au9xt1.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif(arr[next] <= arr[prev])\n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\tif(arr[next] <= arr[low])\n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpklei2fdy.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpklei2fdy.__unittest_L36_C1() [0x42801e]\n??:? void tmpklei2fdy.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = 0; \n  \n    // iterate till search space contains at-least one element \n    while (low <= high) { \n        // if the array is already sorted \n        if (arr[low] <= arr[high]) { \n            result = low; \n            break; \n        } \n  \n        // Find mid \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n  \n        // Check if mid is minimum element \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) { \n            result = mid; \n            break; \n        } \n  \n        // Decide whether we need to go to left half or right half \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor(long i = 0; i < n; i++) \n\t{\n\t\tif(arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4ylbkegp.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp4ylbkegp.__unittest_L22_C1() [0x427dfb]\n??:? void tmp4ylbkegp.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong min = arr[0], min_index = -1; \n\tfor (long i = 0; i < arr.length; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjqs74zvy.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjqs74zvy.__unittest_L20_C1() [0x427dff]\n??:? void tmpjqs74zvy.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplrq2r19s.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmplrq2r19s.__unittest_L21_C1() [0x427df7]\n??:? void tmplrq2r19s.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (arr.length + mid - 1) % arr.length;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif (arr[next] <= arr[prev]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\tif (arr[low] <= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg2au9xt1.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpg2au9xt1.__unittest_L36_C1() [0x42801e]\n??:? void tmpg2au9xt1.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if (arr[prev] >= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppi7dhx_9.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmppi7dhx_9.__unittest_L36_C1() [0x427f63]\n??:? void tmppi7dhx_9.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_fnqtzen.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp_fnqtzen.__unittest_L22_C1() [0x427dfb]\n??:? void tmp_fnqtzen.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min_element = arr[0]; \n    long min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min_element > arr[i]) { \n            min_element = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_spcex5t.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp_spcex5t.__unittest_L20_C1() [0x427e03]\n??:? void tmp_spcex5t.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmp24hdl0jr.d(17): Error: variable `mid` is shadowing variable `tmp24hdl0jr.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24hdl0jr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low)/2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xuec75l.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp5xuec75l.__unittest_L22_C1() [0x427dfb]\n??:? void tmp5xuec75l.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_fnqtzen.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp_fnqtzen.__unittest_L22_C1() [0x427dfb]\n??:? void tmp_fnqtzen.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplrq2r19s.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmplrq2r19s.__unittest_L21_C1() [0x427df7]\n??:? void tmplrq2r19s.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n, prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpxbwu4h7i.d(16): Error: variable `mid` is shadowing variable `tmpxbwu4h7i.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbwu4h7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t\thigh = next;\n\t\telse if (arr[next] >= arr[low] && arr[next] >= arr[high]) \n\t\t\tlow = next + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low < high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tmid = (low+high)/2;\n\t\tlong next = (mid+1)%n;\n\t\tlong prev = (mid+n-1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high]) \n\t\t\thigh = mid-1;\n\t\telse if(arr[mid] >= arr[low]) \n\t\t\tlow = mid+1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if (arr[prev] >= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8rim8xg4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmp8rim8xg4.__unittest_L36_C1() [0x427f67]\n??:? void tmp8rim8xg4.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif (arr[next] <= arr[prev]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if (arr[next] >= arr[low]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphe4805z9.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmphe4805z9.__unittest_L36_C1() [0x428072]\n??:? void tmphe4805z9.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c363]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430389]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430838]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430315]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1cd]\n??:? runModuleUnitTests [0x42c139]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpxbwu4h7i.d(16): Error: variable `mid` is shadowing variable `tmpxbwu4h7i.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbwu4h7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong min = arr[0], min_index = -1; \n\tfor (long i = 0; i < arr.length; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjqs74zvy.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjqs74zvy.__unittest_L20_C1() [0x427dff]\n??:? void tmpjqs74zvy.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < arr[min_index])\n\t\t\tmin_index = i;\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc4ji581.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281b5]\n??:? void tmpsc4ji581.__unittest_L18_C1() [0x427dcb]\n??:? void tmpsc4ji581.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428678]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong min = arr[0], min_index = -1; \n\tfor (long i = 0; i < arr.length; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjqs74zvy.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjqs74zvy.__unittest_L20_C1() [0x427dff]\n??:? void tmpjqs74zvy.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = 0; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) { \n            result = low; \n            break; \n        } \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) { \n            result = mid; \n            break; \n        } else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (arr.length + next - 1) % arr.length;\n\t\tif(arr[next] <= arr[prev]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if(arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if(arr[next] >= arr[low]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5qzqy9oy.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmp5qzqy9oy.__unittest_L35_C1() [0x428066]\n??:? void tmp5qzqy9oy.__modtest() [0x42807c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c35b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430381]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43030d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]\n??:? runModuleUnitTests [0x42c131]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = 0; \n  \n    // iterate till search space contains at-least one element \n    while (low <= high) { \n  \n        // if the search space is already sorted, we are done \n        if (arr[low] <= arr[high]) \n            break; \n  \n        // Find mid \n        long mid = (low + high) / 2; \n  \n        // find next and previous element of mid \n        // (in circular manner) \n        long next = (mid + 1) % n; \n        long prev = (mid + n - 1) % n; \n  \n        // if mid is smaller than both its next and previous \n        // neighbor, then it is the minimum element \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            break; \n  \n        // if arr[mid..high] is sorted and mid is not the minimum element, \n        // then pivot element cannot be present in arr[mid..high] and \n        // we can discard arr[mid..high] and search in the left half \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n  \n        // if arr[low..mid] is sorted then pivot element cannot be present in it \n        // and we can discard arr[low..mid] and search in the right half \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n  \n    // required index \n    result = (low + n) % n; \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tforeach(i, v; arr)\n\t{\n\t\tif(v < min)\n\t\t{\n\t\t\tmin = v;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqhq6x444.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpqhq6x444.__unittest_L21_C1() [0x427dd3]\n??:? void tmpqhq6x444.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min_index = 0;\n\tlong min_val = arr[0];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min_val) \n\t\t{\n\t\t\tmin_val = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwezx_vwc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpwezx_vwc.__unittest_L22_C1() [0x427dfb]\n??:? void tmpwezx_vwc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high-low)/2;\n\t\tlong next = (mid+1)%n;\n\t\tlong prev = (mid+n-1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid-1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid+1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high)/2;\n\t\tlong next = (mid + 1)%n;\n\t\tlong prev = (mid + n - 1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if (arr[prev] >= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8rim8xg4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmp8rim8xg4.__unittest_L36_C1() [0x427f67]\n??:? void tmp8rim8xg4.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor(long i = 0; i < n; i++) {\n\t\tif(arr[i] < min) {\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb_dex2le.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpb_dex2le.__unittest_L20_C1() [0x427dfb]\n??:? void tmpb_dex2le.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < arr[min_index]) \n\t\t{\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzb9mmid4.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281b5]\n??:? void tmpzb9mmid4.__unittest_L20_C1() [0x427dcb]\n??:? void tmpzb9mmid4.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428678]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) {\n\t\tif(arr[low] <= arr[high]) {\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif(arr[next] <= arr[prev]) {\n\t\t\treturn next;\n\t\t}\n\t\tif(arr[next] <= arr[high]) {\n\t\t\thigh = next - 1;\n\t\t} else {\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl908g6y4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpl908g6y4.__unittest_L30_C1() [0x42801e]\n??:? void tmpl908g6y4.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n, prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tif(arr[i] < min)\n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwhckbjs0.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpwhckbjs0.__unittest_L21_C1() [0x427df7]\n??:? void tmpwhckbjs0.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmp24hdl0jr.d(17): Error: variable `mid` is shadowing variable `tmp24hdl0jr.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24hdl0jr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbedvj3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp1cbedvj3.__unittest_L19_C1() [0x427e03]\n??:? void tmp1cbedvj3.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) return low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) return mid;\n\t\telse if(arr[mid] <= arr[high]) high = mid - 1;\n\t\telse if(arr[mid] >= arr[low]) low = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[low] <= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgkzkq8pi.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmpgkzkq8pi.__unittest_L36_C1() [0x427f13]\n??:? void tmpgkzkq8pi.__modtest() [0x42807c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c35b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430381]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43030d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]\n??:? runModuleUnitTests [0x42c131]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low+high)/2;\n\t\tlong next = (mid+1)%n;\n\t\tlong prev = (mid+n-1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid-1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid+1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplrq2r19s.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmplrq2r19s.__unittest_L21_C1() [0x427df7]\n??:? void tmplrq2r19s.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbedvj3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp1cbedvj3.__unittest_L19_C1() [0x427e03]\n??:? void tmp1cbedvj3.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min_index = 0;\n\tlong min_value = arr[0];\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < min_value)\n\t\t{\n\t\t\tmin_index = i;\n\t\t\tmin_value = arr[i];\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpakz4zz3o.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpakz4zz3o.__unittest_L21_C1() [0x427df7]\n??:? void tmpakz4zz3o.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high-low)/2;\n\t\tlong next = (mid+1)%n;\n\t\tlong prev = (mid+n-1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid-1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid+1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high])\n\t\t\thigh = next;\n\t\telse if (arr[next] >= arr[low] && arr[next] >= arr[high])\n\t\t\tlow = next + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + 1) % n;\n\t\tlong prev = (high + n - 1) % n;\n\t\tmid = (low + high) / 2;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9e9qpljd.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428365]\n??:? void tmp9e9qpljd.__unittest_L37_C1() [0x4280d2]\n??:? void tmp9e9qpljd.__modtest() [0x4280e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430898]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430375]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428828]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtihveyg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpbtihveyg.__unittest_L20_C1() [0x427dff]\n??:? void tmpbtihveyg.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6h713zoc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6h713zoc.__unittest_L18_C1() [0x427dff]\n??:? void tmp6h713zoc.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbedvj3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp1cbedvj3.__unittest_L19_C1() [0x427e03]\n??:? void tmp1cbedvj3.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\t\n\t\tlong next = (low + 1) % n;\n\t\tlong prev = (high + n - 1) % n;\n\t\t\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high])\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low])\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxo7k9i0q.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428365]\n??:? void tmpxo7k9i0q.__unittest_L42_C1() [0x4280d2]\n??:? void tmpxo7k9i0q.__modtest() [0x4280e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430898]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430375]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428828]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmp24hdl0jr.d(17): Error: variable `mid` is shadowing variable `tmp24hdl0jr.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24hdl0jr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmp24hdl0jr.d(17): Error: variable `mid` is shadowing variable `tmp24hdl0jr.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24hdl0jr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbedvj3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp1cbedvj3.__unittest_L19_C1() [0x427e03]\n??:? void tmp1cbedvj3.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "/tmp/tmp23zk45h7.d(16): Error: variable `mid` is shadowing variable `tmp23zk45h7.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23zk45h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n-1;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high)/2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "/tmp/tmpmfzacy1e.d(17): Error: variable `mid` is shadowing variable `tmpmfzacy1e.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfzacy1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppven91ns.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmppven91ns.__unittest_L19_C1() [0x427e07]\n??:? void tmppven91ns.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif(arr[next] <= arr[prev]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\tif(arr[low] <= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8u6ldv1.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpq8u6ldv1.__unittest_L36_C1() [0x42801e]\n??:? void tmpq8u6ldv1.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptit6fmf2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmptit6fmf2.__unittest_L21_C1() [0x427e03]\n??:? void tmptit6fmf2.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min_index = 0;\n\tlong min_value = arr[0];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] < min_value) \n\t\t{\n\t\t\tmin_value = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3o8uomio.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmp3o8uomio.__unittest_L21_C1() [0x427df7]\n??:? void tmp3o8uomio.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}