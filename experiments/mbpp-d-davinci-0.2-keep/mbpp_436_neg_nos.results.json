{
  "name": "mbpp_436_neg_nos",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem < 0)\n\t\t{\n\t\t\tneg_nos ~= elem;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpr1cfunll.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1cfunll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppusv03px.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmppusv03px.__unittest_L22_C1() [0x427f50]\n??:? void tmppusv03px.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t\tneg_nos ~= num;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp0mam07hp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mam07hp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpaci_7r2r.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaci_7r2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[list1.length];\n\tint j = 0;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq3q295cz.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpq3q295cz.__unittest_L22_C1() [0x427f74]\n??:? void tmpq3q295cz.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp6oujveyf.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oujveyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tlist2 ~= num;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmppf_dybpe.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppf_dybpe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t\tneg_list ~= num;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpfvo79chn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvo79chn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmperzhkg8t.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperzhkg8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppusv03px.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmppusv03px.__unittest_L22_C1() [0x427f50]\n??:? void tmppusv03px.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t\tneg_nos ~= num;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqe6xo5wn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpqe6xo5wn.__unittest_L22_C1() [0x427f74]\n??:? void tmpqe6xo5wn.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp6oujveyf.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oujveyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tlist2~=list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tauto list2 = new long[](0);\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp1rs2_mj9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rs2_mj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpz94zwt85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz94zwt85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp1rs2_mj9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rs2_mj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmperzhkg8t.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperzhkg8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tauto list2 = new long[](list1.length);\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2[0..j];\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk71lgbl3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpk71lgbl3.__unittest_L22_C1() [0x427f50]\n??:? void tmpk71lgbl3.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpz94zwt85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz94zwt85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1) \n\t{\n\t\tif(i < 0) \n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpdc8f3egw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc8f3egw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos[0..j];\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp2gnet73f.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gnet73f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos[0..j];\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp6oujveyf.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oujveyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach (i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(num; list1) \n\t{\n\t\tif(num < 0) \n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp2gnet73f.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gnet73f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem < 0)\n\t\t{\n\t\t\tneg_list ~= elem;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmp3x8ukz7z.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3x8ukz7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvlvqcl1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpvvlvqcl1.__unittest_L22_C1() [0x427f50]\n??:? void tmpvvlvqcl1.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpuh0zqi8s.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh0zqi8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp2gnet73f.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gnet73f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpkywisl85.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkywisl85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpw2cxiymi.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2cxiymi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpg1a5xiw4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1a5xiw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1) \n\t{\n\t\tif(num < 0) \n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpiq9icfse.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq9icfse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num;list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpfttd7u_w.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfttd7u_w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(element; list1)\n\t{\n\t\tif(element < 0)\n\t\t\tlist2 ~= element;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvlvqcl1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpvvlvqcl1.__unittest_L22_C1() [0x427f50]\n??:? void tmpvvlvqcl1.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk71lgbl3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpk71lgbl3.__unittest_L22_C1() [0x427f50]\n??:? void tmpk71lgbl3.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpcoj05bz_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoj05bz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphgm9klzm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmphgm9klzm.__unittest_L22_C1() [0x427f74]\n??:? void tmphgm9klzm.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1) \n\t{\n\t\tif(i < 0) \n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvlvqcl1.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpvvlvqcl1.__unittest_L22_C1() [0x427f50]\n??:? void tmpvvlvqcl1.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpoh__gepw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh__gepw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphgm9klzm.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmphgm9klzm.__unittest_L22_C1() [0x427f74]\n??:? void tmphgm9klzm.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmperzhkg8t.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperzhkg8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(item;list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tneg_list ~= item;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmp5a9g9y5z.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5a9g9y5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] < 0) \n\t\t{\n\t\t\tneg_nos[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdy_yec.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpbpdy_yec.__unittest_L22_C1() [0x427f74]\n??:? void tmpbpdy_yec.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprlxc2t8m.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmprlxc2t8m.__unittest_L22_C1() [0x427f74]\n??:? void tmprlxc2t8m.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpkyow0qzc.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyow0qzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(num; list1) \n\t{\n\t\tif(num < 0) \n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmp976ddgme.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp976ddgme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to return the negative numbers in a list.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}