{
  "name": "mbpp_739_find_Index",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\n*/\nlong find_Index(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long i = 1; \n    long tri = 0; \n    while (true) \n    { \n        tri = (i * (i + 1)) / 2; \n        if (tri % 10 == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long ans = -1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        long tri = mid * (mid + 1) / 2; \n        if (tri == n) \n            return mid; \n        else if (tri < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2 * 3.14 * n) / 2 + 1) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 0; \n    while (count * (count + 1) / 2 < Math.pow(10, n - 1)) { \n        count++; \n    } \n    return count; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 1; \n    while (count * (count + 1) / 2 < pow(10, n - 1)) \n    { \n        count++; \n        triangularNumber = count * (count + 1) / 2; \n    } \n    return count; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        if (triangle <= 9) \n            count++; \n        else\n        { \n            long temp = triangle; \n            while (temp != 0) \n            { \n                temp /= 10; \n                count++; \n            } \n        } \n        i++; \n    } \n    return i - 1; \n} ",
    "{\n\tlong count = 1;\n\tlong triangularNumber = 0;\n\twhile (true) \n\t{\n\t\ttriangularNumber = triangularNumber + count;\n\t\tcount++;\n\t\tif (triangularNumber.to!string.length == n) \n\t\t{\n\t\t\treturn count - 1;\n\t\t}\n\t}\n}",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n * n, mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    long triangularNumber = 0; \n    while (count <= n) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n            count++; \n        i++; \n    } \n    return i - 1; \n} ",
    "{ \n    long i = 1; \n    long triangle = 1; \n    while (true) \n    { \n        if (triangle >= pow(10, n - 1)) \n            return i; \n        i++; \n        triangle = (i * (i + 1)) / 2; \n    } \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            long temp = triangle; \n            long count = 0; \n            while (temp != 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, len, num; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlen = (long)log10(0.5 * mid * (mid + 1)) + 1; \n\t\tif (len == n) \n\t\t{ \n\t\t\tnum = 0.5 * mid * (mid + 1); \n\t\t\twhile (len == (long)log10(num) + 1) \n\t\t\t{ \n\t\t\t\tmid--; \n\t\t\t\tnum = 0.5 * mid * (mid + 1); \n\t\t\t} \n\t\t\treturn mid + 1; \n\t\t} \n\t\telse if (len < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid, num; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = mid * (mid + 1) / 2; \n        if (num < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n\tlong i = 1; \n\tlong sum = 0; \n\twhile (true) \n\t{ \n\t\tsum += i; \n\t\tif (sum % (long)pow(10, n) == sum) \n\t\t\treturn i; \n\t\ti++; \n\t} \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n  \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n  \n        if (triangularNumber % 10 == 0) \n        { \n            if (triangularNumber / 10 == 0) \n                return i; \n            else\n                i++; \n        } \n        else\n            i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\t\n\t// loop till low is less than or equal to high \n\twhile (low <= high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// if mid has n digits, then return mid \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t\treturn mid; \n\t\t\n\t\t// if mid has more digits, search in left half \n\t\telse if (floor(log10(mid * (mid + 1) / 2)) + 1 > n) \n\t\t\thigh = mid - 1; \n\t\t\n\t\t// if mid has less digits, search in right half \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// if no such number exists \n\treturn -1; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n        { \n            long temp = triangularNumber; \n            int count = 0; \n            while (temp != 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n\tlong x = 1; \n\tlong y = 1; \n\tlong index = 1; \n\twhile (y < n) \n\t{ \n\t\tx = x + 1; \n\t\ty = y + x; \n\t\tindex = index + 1; \n\t} \n\treturn index; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid = (low + high) / 2; \n  \n    while (low < high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long tri = 0; \n    while (true) \n    { \n        tri = (i * (i + 1)) / 2; \n        if (tri % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long index = 1; \n    long triangularNumber = 1; \n    while (triangularNumber < n) \n    { \n        index++; \n        triangularNumber = triangularNumber + index; \n    } \n    return index; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid, ans = -1; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long tri = (mid * (mid + 1)) / 2; \n        if (tri >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long tri = (mid * (mid + 1)) / 2; \n        if (tri >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tcount = 0; \n\t\tlong temp = j * (j + 1) / 2; \n\t\twhile (temp > 0) \n\t\t{ \n\t\t\tcount = count + 1; \n\t\t\ttemp = temp / 10; \n\t\t} \n\t\ti = i + 1; \n\t} \n\treturn i; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n; \n  \n    // loop till low is less than or equal to high \n    while (low <= high) { \n  \n        // Find the mid value \n        long mid = (low + high) / 2; \n  \n        // Find the triangular number for mid \n        long t = (mid * (mid + 1)) / 2; \n  \n        // If the triangular number is greater than n, set high as mid - 1 \n        if (t > n) \n            high = mid - 1; \n  \n        // If the triangular number is less than n, set low as mid + 1 \n        else if (t < n) \n            low = mid + 1; \n  \n        // If triangular number is equal to n, return mid \n        else\n            return mid; \n    } \n  \n    // If we reach here, then no triangular number is found \n    return -1; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n        { \n            if (triangularNumber / 10 == n) \n                return i; \n            else\n                i++; \n        } \n        else\n            i++; \n    } \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) \n    { \n        sum = sum + i; \n        if (sum % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    // Base case \n    if (n <= 0) \n        return 0; \n  \n    // Initialize result \n    long sum = 0; \n  \n    // Find index of largest power of 10 \n    // less than or equal to n \n    long x = 1; \n    while (10 * x <= n) \n        x = x * 10; \n  \n    // Find index of smallest triangular \n    // number with n digits \n    long index = 1; \n    while (true) \n    { \n        sum = sum + x; \n        if (sum >= n) \n            return index; \n        index++; \n        x = x * 10; \n    } \n} ",
    "{ \n    long i = 1; \n    long t = 1; \n    while (t < n) \n    { \n        i++; \n        t = (i * (i + 1)) / 2; \n    } \n    return i; \n} ",
    "{ \n    long count = 1; \n    long triangle = 1; \n    while (true) \n    { \n        if (triangle.to!string.length == n) \n            return count; \n        count++; \n        triangle += count; \n    } \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (true) \n    { \n        long tri = (i * (i + 1)) / 2; \n        if (tri % 10 == 0) \n        { \n            count++; \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long temp = mid * (mid + 1) / 2; \n        if (temp >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else { \n            low = mid + 1; \n        } \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        if (triangle > 9) \n        { \n            long digits = (long)log10(triangle) + 1; \n            if (digits == n) \n                return i; \n            count = digits; \n        } \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangularNumber = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangularNumber) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber > pow(10, n - 1)) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, count; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        count = 0; \n        for (long i = 1; i <= n; i++) \n            count += min(mid / i, n); \n        if (count < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0, digits = 0, tri = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        digits = (long)log10(0.5 * mid * (mid + 1)) + 1; \n        if (digits == n) \n        { \n            tri = mid; \n            break; \n        } \n        else if (digits < n) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n    return tri; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search to find index \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If mid is triangular number \n        // with n-1 digits \n        if (mid * (mid + 1) / 2 < pow(10, n - 1)) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(number)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n*(n+1)/2 is smaller than mid \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // Else update high \n        else\n            high = mid; \n    } \n  \n    // Required index \n    return low; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\t\n\t// Do binary search for floor(sqrt(n)) \n\twhile (low < high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If n is a triangular number \n\t\tif (mid * (mid + 1) / 2 < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid; \n\t} \n\t\n\t// low is the required index \n\treturn low; \n} ",
    "{ \n    long first = 1; \n    long second = 1; \n    long index = 2; \n  \n    while (second < n) \n    { \n        long third = first + second; \n        first = second; \n        second = third; \n        index++; \n    } \n  \n    return index; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n  \n    while (count < n) { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) { \n            count++; \n            temp = temp / 10; \n        } \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, num, index = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        num = (long)log10(mid * 2) + 1; \n        if (num == n) { \n            index = mid; \n            break; \n        } \n        else if (num < n) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n    return index; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long tri = (i * (i + 1)) / 2; \n        long digits = (long)log10(tri) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) \n        { \n            count = count + 1; \n            temp = temp / 10; \n        } \n        if (count == n) \n            return j; \n    } \n    return -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = -1; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long x = mid * (mid + 1) / 2; \n        if (x == n) \n            return mid; \n        if (x < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            long temp = triangle; \n            long count = 0; \n            while (temp > 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, count; \n    while (low < high) { \n        mid = (low + high) / 2; \n        count = 0; \n        for (long i = 1; i * (i + 1) < 2 * mid; i++) { \n            count += (mid - (i * (i + 1)) / 2); \n        } \n        if (count < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = triangle + count; \n        count++; \n        if (triangle >= pow(10, n - 1) && triangle < pow(10, n)) \n            return count - 1; \n    } \n} ",
    "{ \n    long x = 1; \n    long y = 1; \n    long index = 1; \n    while (y < n) \n    { \n        x = x + 1; \n        y = y + x; \n        index = index + 1; \n    } \n    return index; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigits(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n    long count = 1; \n    long triangle = 0; \n  \n    while (count * (count + 1) / 2 < pow(10, n - 1)) \n        count++; \n  \n    return count; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) \n        { \n            count++; \n            temp = temp / 10; \n        } \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid, ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (floor(log10(mid * (mid + 1) / 2)) + 1 == n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else if (floor(log10(mid * (mid + 1) / 2)) + 1 < n) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber >= pow(10, n - 1) && triangularNumber < pow(10, n)) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long ans = 0; \n  \n    while (low <= high) { \n        long mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long ans = 0; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        long temp = (mid * (mid + 1)) / 2; \n        if (temp >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\tlong ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong temp = (mid * (mid + 1)) / 2; \n\t\tif (temp >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t\tbreak; \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long tri = 0; \n    while (true) \n    { \n        tri = (i * (i + 1)) / 2; \n        if (tri % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + i; \n\t\ti++; \n\t\tlong temp = j; \n\t\twhile (temp > 0) \n\t\t{ \n\t\t\tcount++; \n\t\t\ttemp = temp / 10; \n\t\t} \n\t} \n\treturn i; \n} ",
    "{ \n    long i = 1; \n    long tri_num = 0; \n    while (true) \n    { \n        tri_num = (i * (i + 1)) / 2; \n        if (tri_num % 10 == 0) \n        { \n            long temp = tri_num; \n            long count = 0; \n            while (temp != 0) \n            { \n                temp /= 10; \n                count++; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long count = 1; \n    long tri_num = 1; \n    while (count * (count + 1) / 2 < pow(10, n - 1)) \n    { \n        count++; \n        tri_num = count * (count + 1) / 2; \n    } \n    return count; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong mid, ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (triangular(mid) >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) { \n            count++; \n            temp = temp / 10; \n        } \n        i++; \n    } \n    return i; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\t\n\t// loop till low is less than or equal to high \n\twhile (low <= high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// if mid is a triangular number \n\t\tif (mid * (mid + 1) / 2 == n) \n\t\t\treturn mid; \n\t\t\n\t\t// if mid is less than n \n\t\telse if (mid * (mid + 1) / 2 < n) \n\t\t\tlow = mid + 1; \n\t\t\n\t\t// if mid is greater than n \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\t\n\t// if no triangular number is found \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, num, digits; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = mid * (mid + 1) / 2; \n        digits = (long)(log10(num) + 1); \n        if (digits == n) \n            return mid; \n        else if (digits < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long t = mid * (mid + 1) / 2; \n        if (t > n) \n        { \n            high = mid - 1; \n        } \n        else\n        { \n            ans = mid; \n            low = mid + 1; \n        } \n    } \n    return ans; \n} ",
    "{ \n    // Base cases \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n  \n    // A temporary array to store triangular \n    // numbers \n    long[] tri = new long[n + 1]; \n  \n    // Fill the array \n    tri[0] = 0; \n    tri[1] = 1; \n    for (long i = 2; i <= n; i++) \n        tri[(int)i] = tri[(int)i - 1] + i; \n  \n    // Binary search \n    long low = 0, high = n; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is one more than a triangular number \n        if (tri[(int)mid] == n - 1) \n            return mid; \n  \n        // If n is more than the previous triangular \n        // number and less than the current triangular \n        // number \n        else if (tri[(int)mid] < n - 1 && \n                 n - 1 < tri[(int)mid + 1]) \n            return mid + 1; \n  \n        // If n is less than the mid triangular number \n        else if (tri[(int)mid] > n - 1) \n            high = mid - 1; \n  \n        // If n is more than the mid triangular number \n        else\n            low = mid + 1; \n    } \n  \n    return -1; \n} \n  \n// Driver code ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) \n        { \n            temp = temp / 10; \n            count = count + 1; \n        } \n        i = i + 1; \n    } \n    return i; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = 0; \n        long k = j * (j + 1) / 2; \n        while (k > 0) \n        { \n            k = k / 10; \n            count = count + 1; \n        } \n        i = i + 1; \n    } \n    return i; \n} ",
    "{ \n    long i = 1; \n    long tri_num = 1; \n    while (true) \n    { \n        if (tri_num % n == 0) \n            break; \n        i++; \n        tri_num += i; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid, ans = -1; \n  \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n, mid; \n\twhile (low < high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 < n * (long)log10(n)) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid; \n\t} \n\treturn low; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // If the number of digits in mid is \n        // greater than n, then move to left \n        if (floor(log10(mid * (mid + 1) / 2)) + 1 > n) \n            high = mid - 1; \n  \n        // If the number of digits in mid is \n        // less than n, then move to right \n        else { \n            ans = mid; \n            low = mid + 1; \n        } \n    } \n  \n    return ans; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long ans = 0; \n  \n    while (low <= high) { \n        long mid = (low + high) / 2; \n  \n        long triangle = (mid * (mid + 1)) / 2; \n  \n        if (triangle >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 0; \n    while (count * (count + 1) / 2 < pow(10, n - 1)) \n    { \n        count++; \n    } \n    return count; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t{ \n\t\t\tif (triangularNumber.to!string.length == n) \n\t\t\t\tbreak; \n\t\t} \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = 1; \n    while (high * (high + 1) / 2 < n) \n        high *= 2; \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n  \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long t = 1; \n    while (t < n) \n    { \n        i++; \n        t = t + i; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, num; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = (long)log10(0.5 * mid * (mid + 1)); \n        if (num < n - 1) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long ans = 0; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        long digits = (long)log10(0.5 * mid * (mid + 1)) + 1; \n        if (digits == n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else if (digits < n) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, tri; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        tri = mid * (mid + 1) / 2; \n        if (tri < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong temp = (i * (i + 1)) / 2; \n\t\tif (temp > 9) \n\t\t{ \n\t\t\tlong digits = (long)log10(temp) + 1; \n\t\t\tif (digits == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long t = (mid * (mid + 1)) / 2; \n        if (t >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tif (t >= pow(10, n - 1)) \n\t\t\tbreak; \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid, ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long t = 1; \n    while (t < n) \n    { \n        i++; \n        t = t + i; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid = 0; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        long digits = (long)log10(mid * 2) + 1; \n        if (digits > n) \n            high = mid; \n        else if (digits < n) \n            low = mid + 1; \n        else\n            return mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid = 0; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (log10(mid * (mid + 1) / 2) < n - 1) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid; \n  \n    // Do binary search to find index \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n  \n        // If mid is a triangular number \n        // with n digits \n        if (mid * (mid + 1) / 2 >= n *  \n                            (long)pow(10, n - 1) && \n            mid * (mid + 1) / 2 < n *  \n                            (long)pow(10, n)) \n            return mid; \n  \n        // If mid is less than n digits \n        if (mid * (mid + 1) / 2 < n *  \n                            (long)pow(10, n - 1)) \n            low = mid + 1; \n  \n        // If mid is more than n digits \n        else\n            high = mid - 1; \n    } \n  \n    return -1; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\tlong ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            if (triangle.to!string().length == n) \n                return i; \n            else\n                i++; \n        } \n        else\n            i++; \n    } \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\tlong ans = 0; \n\t\n\t// Do binary search to find index \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// Calculate number of digits in mid \n\t\tlong digits = (long)log10(mid) + 1; \n\t\t\n\t\t// If number of digits in mid is equal to n, \n\t\t// then find the index of mid \n\t\tif (digits == n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\t\n\t\t// If number of digits in mid is less than n, \n\t\t// then find in right half \n\t\telse if (digits < n) \n\t\t\tlow = mid + 1; \n\t\t\n\t\t// If number of digits in mid is more than n, \n\t\t// then find in left half \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\t\n\t// Find the index of ans \n\tlong index = 0; \n\tfor (long i = 1; i * (i + 1) / 2 < ans; i++) \n\t\tindex++; \n\t\n\treturn index; \n} ",
    "{ \n    long low = 1, high = n, mid; \n    long ans = -1; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long t = (mid * (mid + 1)) / 2; \n        if (t < n) { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, index = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong temp = (mid * (mid + 1)) / 2; \n\t\tif (temp >= n) \n\t\t{ \n\t\t\tindex = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn index; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangle = 0; \n\twhile (true) \n\t{ \n\t\ttriangle = (i * (i + 1)) / 2; \n\t\tif (triangle % 10 == 0) \n\t\t{ \n\t\t\tif (triangle.toString().length == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) \n    { \n        sum = sum + i; \n        if (sum % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t{ \n\t\t\tif (triangularNumber.to!string.length == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            if (triangle.to!string.length == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            if (triangle / 10 == 0) \n                break; \n            else\n                i++; \n        } \n        else\n        { \n            if (triangle % (long)pow(10, n - 1) == 0) \n                break; \n            else\n                i++; \n        } \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long triangle = (mid * (mid + 1)) / 2; \n        if (triangle < n) \n        { \n            low = mid + 1; \n            ans = mid; \n        } \n        else if (triangle > n) \n            high = mid - 1; \n        else\n            return mid; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n, mid; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // If mid*(mid+1)/2 has n digits, \n        // then store it and look for a smaller \n        // number with n digits \n        if (floor(log10(mid * (mid + 1) / 2)) + 1 == n) { \n            ans = mid; \n            high = mid - 1; \n        } \n  \n        // If mid*(mid+1)/2 has more than n digits, \n        // look for a smaller number \n        else if (floor(log10(mid * (mid + 1) / 2)) + 1 > n) \n            high = mid - 1; \n  \n        // If mid*(mid+1)/2 has less than n digits, \n        // look for a greater number \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} \n  \n// Driver code ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (sum < n) \n    { \n        sum += i; \n        i++; \n    } \n    return i - 1; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (triangular(mid) >= pow(10, n - 1) && \n            triangular(mid - 1) < pow(10, n - 1)) \n            return mid; \n  \n        if (triangular(mid) < pow(10, n - 1)) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n  \n    return -1; \n} \n  \nlong triangular(long n) \n{ \n    return (n * (n + 1)) / 2; \n} \n  ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else { \n            low = mid + 1; \n        } \n    } \n    return ans; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 0; \n  \n    while (count * (count + 1) / 2 < n) { \n        count++; \n    } \n  \n    return count; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 1; \n    while (count * (count + 1) / 2 < pow(10, n - 1)) { \n        count++; \n        triangularNumber = count * (count + 1) / 2; \n    } \n    return count; \n} ",
    "{ \n    long x = 1; \n    long i = 1; \n    while (true) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t > pow(10, n - 1)) \n            break; \n        x++; \n        i++; \n    } \n    return x; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tcount = 0; \n\t\tlong temp = (i * (i + 1)) / 2; \n\t\twhile (temp > 0) \n\t\t{ \n\t\t\tcount++; \n\t\t\ttemp = temp / 10; \n\t\t} \n\t\ti++; \n\t} \n\treturn j; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, count, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tcount = (mid * (mid + 1)) / 2; \n\t\tif (count < n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\tlow = mid + 1; \n\t\t} \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            if (triangle / 10 == 0) \n                return i; \n            else if (triangle / 10 >= pow(10, n - 1)) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search to find index \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If mid is a triangular number \n        // with n-digits \n        if (mid * (mid + 1) / 2 >= n * pow(10, n - 1) && \n            (mid - 1) * (mid) / 2 < n * pow(10, n - 1)) \n            return mid; \n  \n        // If mid is less than n-digit \n        // triangular number \n        if (mid * (mid + 1) / 2 < n * pow(10, n - 1)) \n            low = mid + 1; \n  \n        // If mid is more than n-digit \n        // triangular number \n        else\n            high = mid; \n    } \n  \n    return -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber >= pow(10, n - 1) && triangularNumber < pow(10, n)) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = 0; \n        long temp = j * (j + 1) / 2; \n        while (temp > 0) \n        { \n            count = count + 1; \n            temp = temp / 10; \n        } \n        if (count == n) \n            return i; \n        i = i + 1; \n    } \n    return -1; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long low = 0, high = n * n, mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        long temp = (mid * (mid + 1)) / 2; \n        if (temp < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low - 1; \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            if (triangle.to!string.length == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid, count; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        count = 0; \n        for (long i = 1; i <= n; i++) \n            count += min(n, mid / i); \n        if (count < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n\tlong low = 0, high = n * n, mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif (floor(sqrt(2 * mid + 0.25) - 0.5) == mid / (mid + 1)) { \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong tri = 0; \n\twhile (true) \n\t{ \n\t\ttri = (i * (i + 1)) / 2; \n\t\tif (tri % 10 == 0) \n\t\t\treturn i; \n\t\ti++; \n\t} \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, count; \n  \n    while (low < high) { \n        mid = (low + high) / 2; \n        count = 0; \n        for (int i = 1; i <= n; i++) \n            count += min(mid / i, n); \n  \n        if (count < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber >= pow(10, n - 1) && triangularNumber < pow(10, n)) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid = 0; \n  \n    while (low < high) { \n        mid = (low + high) / 2; \n  \n        if (log10(mid * (mid + 1) / 2) < n - 1) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(number)) \n    while (low < high) { \n        long mid = (low + high) / 2; \n  \n        // If n*(n+1)/2 is smaller than mid \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // If n*(n+1)/2 is greater than mid \n        else\n            high = mid; \n    } \n  \n    // Return the index \n    return low; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long x = mid * (mid + 1) / 2; \n        if (x < n) { \n            low = mid + 1; \n            ans = mid; \n        } \n        else if (x > n) \n            high = mid - 1; \n        else\n            return mid; \n    } \n    return ans; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (n > triangularNumber) \n    { \n        triangularNumber = triangularNumber + i; \n        i++; \n    } \n    return i - 1; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, num; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = (mid * (mid + 1)) / 2; \n        if (num < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (sum < n) { \n        sum = sum + i; \n        i++; \n    } \n    return i - 1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long tri_num = 0; \n    while (true) \n    { \n        tri_num = (i * (i + 1)) / 2; \n        if (tri_num % 10 == 0) \n        { \n            if (tri_num / 10 == 0) \n                return i; \n            else\n                i++; \n        } \n        else\n            i++; \n    } \n} ",
    "{ \n    long low = 1, high = n * n; \n    long mid, ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // Check if mid is triangular number \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n    long low = 1; \n    long high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) \n    { \n        sum = sum + i; \n        if (sum % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t{ \n\t\t\tif (triangularNumber.toString.length == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n\tlong low = 1, high = n, mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) { \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse { \n\t\t\tlow = mid + 1; \n\t\t} \n\t} \n\treturn ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n; \n  \n    // Do binary search. \n    while (low <= high) { \n        long mid = (low + high) / 2; \n  \n        // If mid is a triangular number \n        // with n digits. \n        if (mid * (mid + 1) / 2 >= pow(10, n - 1)) { \n            if (mid * (mid + 1) / 2 == pow(10, n - 1)) \n                return mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return -1; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 1; \n    while (true) \n    { \n        if (triangularNumber % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n        triangularNumber += i; \n    } \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, count, ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        count = 0; \n        for (long i = 1; i * (i + 1) < 2 * mid; i++) \n            count += (mid - (i * (i + 1)) / 2); \n        if (count < n) { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigits(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tlong temp = (i * (i + 1)) / 2; \n\t\tif (temp > 9) \n\t\t{ \n\t\t\tif (temp % 10 == 0) \n\t\t\t\tcount += 2; \n\t\t\telse\n\t\t\t\tcount += 1; \n\t\t} \n\t\telse\n\t\t\tcount += 1; \n\t\ti += 1; \n\t} \n\treturn j; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (count * (count + 1)) / 2; \n        if (triangle >= pow(10, n - 1)) \n            break; \n        count++; \n    } \n    return count; \n} ",
    "{ \n\tlong i = 1; \n\tlong tri = 0; \n\twhile (true) \n\t{ \n\t\ttri = (i * (i + 1)) / 2; \n\t\tif (tri % 10 == 0) \n\t\t{ \n\t\t\tlong temp = tri; \n\t\t\twhile (temp % 10 == 0) \n\t\t\t{ \n\t\t\t\ttemp = temp / 10; \n\t\t\t} \n\t\t\tif (temp == 1) \n\t\t\t\tbreak; \n\t\t} \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber >= pow(10, n - 1) && triangularNumber < pow(10, n)) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            long temp = triangle; \n            long count = 0; \n            while (temp > 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    // Base case \n    if (n <= 0) \n        return 0; \n  \n    // Initialize result \n    long sum = 0; \n  \n    // Keep incrementing until \n    // sum of series becomes n \n    long i = 1; \n    while (true) \n    { \n        sum = sum + i; \n  \n        // If sum has n digits, \n        // return index \n        if (sum == n) \n            return i; \n  \n        // If sum has more than n \n        // digits, return -1 \n        if (sum > n) \n            return -1; \n  \n        i++; \n    } \n} ",
    "{ \n    long low = 0, high = n * n, mid; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        long digits = (long)(log10(0.5 * mid * (mid + 1)) + 1); \n        if (digits <= n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low - 1; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) \n    { \n        sum = sum + i; \n        if (sum % (long)pow(10, n - 1) == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // Check if the mid is triangular number \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n, mid; \n\tlong ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long a = 45 * n * n + 26 * n + 7; \n    long b = 2 * n * n + 2 * n + 1; \n    long c = (long)sqrt(a) - b; \n    if (c % 3 == 0) \n        return c / 3; \n    return -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n  \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n * (n + 1) / 2) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 1; \n    while (count < n) \n    { \n        j = j + 1; \n        i = i + j; \n        count = count + 1; \n    } \n    return j; \n} ",
    "{ \n\tlong l = 1, r = 1000000; \n\twhile (l <= r) \n\t{ \n\t\tlong m = (l + r) / 2; \n\t\tlong t = (m * (m + 1)) / 2; \n\t\tif (t >= n) \n\t\t\tr = m - 1; \n\t\telse\n\t\t\tl = m + 1; \n\t} \n\treturn l; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) { \n        sum = sum + i; \n        if (sum > pow(10, n)) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (sum <= n) \n    { \n        sum = sum + i; \n        i++; \n    } \n    return i - 2; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long sum = 0; \n    while (true) \n    { \n        sum += i; \n        if (sum >= pow(10, n - 1) && sum < pow(10, n)) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, ans = -1; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)(log10(triangle) + 1); \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long i = 1; \n    while (true) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t > pow(10, n - 1)) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(number)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n*(n+1)/2 is smaller than mid \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // Else update high \n        else\n            high = mid; \n    } \n  \n    // Required index \n    return low; \n} ",
    "{ \n    long low = 1, high = n, mid; \n  \n    // Do binary search to find the index \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // If the number of digits in mid is equal to n, \n        // then return mid \n        if (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n            return mid; \n  \n        // If the number of digits in mid is less than n, \n        // then search in the right half \n        else if (floor(log10(mid * (mid + 1) / 2)) + 1 < n) \n            low = mid + 1; \n  \n        // If the number of digits in mid is more than n, \n        // then search in the left half \n        else\n            high = mid - 1; \n    } \n  \n    // If no triangular number is found with n digits, \n    // then return -1 \n    return -1; \n} "
  ]
}