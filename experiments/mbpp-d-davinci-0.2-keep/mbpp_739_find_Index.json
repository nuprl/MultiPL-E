{
  "name": "mbpp_739_find_Index",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\n*/\nlong find_Index(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long i = 1; \n    long tri = 0; \n    while (true) \n    { \n        tri = (i * (i + 1)) / 2; \n        if (tri % 10 == 0) \n            return i; \n        i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long ans = -1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        long tri = mid * (mid + 1) / 2; \n        if (tri == n) \n            return mid; \n        else if (tri < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2 * 3.14 * n) / 2 + 1) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 0; \n    while (count * (count + 1) / 2 < Math.pow(10, n - 1)) { \n        count++; \n    } \n    return count; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n * (n + 1) / 2; \n  \n    // Do binary search for floor(sqrt(n)) \n    while (low < high) \n    { \n        long mid = (low + high) / 2; \n  \n        // If n is a triangular number \n        if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        else\n            high = mid; \n    } \n  \n    return low; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 1; \n    while (count * (count + 1) / 2 < pow(10, n - 1)) \n    { \n        count++; \n        triangularNumber = count * (count + 1) / 2; \n    } \n    return count; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        if (triangle <= 9) \n            count++; \n        else\n        { \n            long temp = triangle; \n            while (temp != 0) \n            { \n                temp /= 10; \n                count++; \n            } \n        } \n        i++; \n    } \n    return i - 1; \n} ",
    "{\n\tlong count = 1;\n\tlong triangularNumber = 0;\n\twhile (true) \n\t{\n\t\ttriangularNumber = triangularNumber + count;\n\t\tcount++;\n\t\tif (triangularNumber.to!string.length == n) \n\t\t{\n\t\t\treturn count - 1;\n\t\t}\n\t}\n}",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = n * n, mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    long triangularNumber = 0; \n    while (count <= n) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n            count++; \n        i++; \n    } \n    return i - 1; \n} ",
    "{ \n    long i = 1; \n    long triangle = 1; \n    while (true) \n    { \n        if (triangle >= pow(10, n - 1)) \n            return i; \n        i++; \n        triangle = (i * (i + 1)) / 2; \n    } \n} ",
    "{ \n    long i = 1; \n    long triangle = 0; \n    while (true) \n    { \n        triangle = (i * (i + 1)) / 2; \n        if (triangle % 10 == 0) \n        { \n            long temp = triangle; \n            long count = 0; \n            while (temp != 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, len, num; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlen = (long)log10(0.5 * mid * (mid + 1)) + 1; \n\t\tif (len == n) \n\t\t{ \n\t\t\tnum = 0.5 * mid * (mid + 1); \n\t\t\twhile (len == (long)log10(num) + 1) \n\t\t\t{ \n\t\t\t\tmid--; \n\t\t\t\tnum = 0.5 * mid * (mid + 1); \n\t\t\t} \n\t\t\treturn mid + 1; \n\t\t} \n\t\telse if (len < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 0, high = n * (n + 1) / 2; \n    long mid, num; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = mid * (mid + 1) / 2; \n        if (num < n) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n\tlong i = 1; \n\tlong sum = 0; \n\twhile (true) \n\t{ \n\t\tsum += i; \n\t\tif (sum % (long)pow(10, n) == sum) \n\t\t\treturn i; \n\t\ti++; \n\t} \n} ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n  \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n  \n        if (triangularNumber % 10 == 0) \n        { \n            if (triangularNumber / 10 == 0) \n                return i; \n            else\n                i++; \n        } \n        else\n            i++; \n    } \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n)) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} "
  ]
}