{
  "name": "mbpp_736_left_insertion",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x)\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t\ti++;\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\twhile (i < n) {\n\t\tif (a[i] >= x) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\t\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n    long low = 0;\n    long high = a.length;\n    long mid;\n    while (low < high) \n    {\n        mid = (low + high) / 2;\n        if (x <= a[mid]) \n        {\n            high = mid;\n        } \n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\tlong mid;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j)\n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (x > a[k])\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\tlong mid = 0;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i;\n\tforeach(i; 0 .. a.length)\n\t{\n\t\tif(a[i] >= x)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn a.length;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "/tmp/tmpgr209_rg.d(11): Error: variable `i` is shadowing variable `tmpgr209_rg.left_insertion.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgr209_rg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong low = 0;\n\tlong high = n;\n\twhile(low < high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif(a[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x > a[mid]) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\t\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\tlong mid;\n\twhile (left < right) {\n\t\tmid = (left + right) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (x > a[mid]) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x > a[mid]) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong low = 0;\n\tlong high = n;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x > a[mid])\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = low + (high - low) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn6x5m55e.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpn6x5m55e.__unittest_L28_C1() [0x427dde]\n??:? void tmpn6x5m55e.__modtest() [0x427e94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile(left < right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif(a[mid] < x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tauto n = a.length;\n\tauto left = 0L;\n\tauto right = n;\n\twhile (left < right) {\n\t\tauto mid = (left + right) / 2;\n\t\tif (x > a[mid]) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\tlong j = a.length;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x)\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) {\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x > a[mid]) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) {\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) {\n\t\t\tright = mid;\n\t\t} else {\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (x > a[k])\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) {\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile(i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (x > a[mid])\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x)\n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\tlong j = a.length;\n\twhile (i < j) \n\t{\n\t\tlong m = (i + j) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\ti = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = m;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j)\n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x)\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x)\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\tlong j = a.length;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\tlong mid;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong lo = 0;\n\tlong hi = n;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x > a[mid]) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\tlong j = a.length;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\twhile (i < n) {\n\t\tif (a[i] >= x) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0, right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid])\n\t\t\tright = mid;\n\t\telse\n\t\t\tleft = mid + 1;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) >> 1;\n\t\tif (a[k] < x)\n\t\t\ti = k + 1;\n\t\telse\n\t\t\tj = k;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong i = 0;\n\tlong j = n;\n\twhile (i < j) \n\t{\n\t\tlong k = (i + j) / 2;\n\t\tif (a[k] < x) \n\t\t{\n\t\t\ti = k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong lo = 0;\n\tlong hi = n;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong left = 0;\n\tlong right = n;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x <= a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124226,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] < x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\n*/\nlong left_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x <= a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}