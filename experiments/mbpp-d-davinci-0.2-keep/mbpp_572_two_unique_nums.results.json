{
  "name": "mbpp_572_two_unique_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2garwl3g.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2garwl3g.__unittest_L26_C1() [0x427fed]\n??:? void tmp2garwl3g.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprp3cuuac.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmprp3cuuac.__unittest_L30_C1() [0x427ff1]\n??:? void tmprp3cuuac.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1_d9arok.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428525]\n??:? void tmp1_d9arok.__unittest_L34_C1() [0x42808d]\n??:? void tmp1_d9arok.__modtest() [0x4282a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430689]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6cvaol8z.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp6cvaol8z.__unittest_L24_C1() [0x427ff1]\n??:? void tmp6cvaol8z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5w0a95la.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428525]\n??:? void tmp5w0a95la.__unittest_L33_C1() [0x42808d]\n??:? void tmp5w0a95la.__modtest() [0x4282a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430689]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tfor (long num : nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tfor (long num : nums) \n\t{\n\t\tif ((num & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517139,
      "stdout": "",
      "stderr": "/tmp/tmp2deh329e.d(12): Error: semicolon expected, not `:`\n/tmp/tmp2deh329e.d(12): Error: expression expected, not `:`\n/tmp/tmp2deh329e.d(12): Error: found `nums` when expecting `;` following `for` condition\n/tmp/tmp2deh329e.d(18): Error: semicolon expected, not `:`\n/tmp/tmp2deh329e.d(18): Error: expression expected, not `:`\n/tmp/tmp2deh329e.d(18): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2deh329e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\txor ^= nums[i];\n\t}\n\t\n\tint right_most_set_bit = xor & ~(xor - 1);\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif ((nums[i] & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= nums[i];\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "/tmp/tmp3tpb0it5.d(17): Error: cannot implicitly convert expression `xor & ~(xor - 1L)` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tpb0it5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp3bwzu8o.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpp3bwzu8o.__unittest_L18_C1() [0x427f91]\n??:? void tmpp3bwzu8o.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost set bit\n\tlong right_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9xakezui.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp9xakezui.__unittest_L35_C1() [0x427ff1]\n??:? void tmp9xakezui.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7dlfyx2y.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp7dlfyx2y.__unittest_L31_C1() [0x427ff1]\n??:? void tmp7dlfyx2y.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// Divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpikx90reo.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpikx90reo.__unittest_L34_C1() [0x427ff1]\n??:? void tmpikx90reo.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpawpfp9j5.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpawpfp9j5.__unittest_L26_C1() [0x427ff1]\n??:? void tmpawpfp9j5.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tret[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[1] ^= num;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9m3iwism.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp9m3iwism.__unittest_L30_C1() [0x427ff1]\n??:? void tmp9m3iwism.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// Get the rightmost set bit in xor\n\tlong set_bit_no = (xor & ~(xor - 1));\n\t\n\t// Now divide elements in two sets by comparing rightmost set\n\t// bit of xor with bit at same position in each element.\n\tforeach(num; nums)\n\t{\n\t\tif((num & set_bit_no) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2skvqixf.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2skvqixf.__unittest_L29_C1() [0x427ff1]\n??:? void tmp2skvqixf.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong last_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp96_exrso.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp96_exrso.__unittest_L32_C1() [0x427ff1]\n??:? void tmp96_exrso.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb6y6o2y_.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpb6y6o2y_.__unittest_L33_C1() [0x427fed]\n??:? void tmpb6y6o2y_.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] unique_nums_index = new long[2];\n\tlong[] unique_nums_count = new long[2];\n\t\n\tunique_nums[0] = nums[0];\n\tunique_nums[1] = nums[1];\n\tunique_nums_index[0] = 0;\n\tunique_nums_index[1] = 1;\n\tunique_nums_count[0] = 1;\n\tunique_nums_count[1] = 1;\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif(num == unique_nums[0])\n\t\t{\n\t\t\tunique_nums_count[0]++;\n\t\t}\n\t\telse if(num == unique_nums[1])\n\t\t{\n\t\t\tunique_nums_count[1]++;\n\t\t}\n\t\telse if(unique_nums_count[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t\tunique_nums_index[0] = i;\n\t\t\tunique_nums_count[0] = 1;\n\t\t}\n\t\telse if(unique_nums_count[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t\tunique_nums_index[1] = i;\n\t\t\tunique_nums_count[1] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums_count[0]--;\n\t\t\tunique_nums_count[1]--;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxm_jcy2w.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42876d]\n??:? void tmpxm_jcy2w.__unittest_L52_C1() [0x4282d5]\n??:? void tmpxm_jcy2w.__modtest() [0x4284ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c827]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430945]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430df4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b691]\n??:? runModuleUnitTests [0x42c5fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\t\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[2];\n\t\tunique_nums[1] = nums_copy[3];\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "/tmp/tmpnsbl74uc.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsbl74uc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmt1465qh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpmt1465qh.__unittest_L30_C1() [0x427ff1]\n??:? void tmpmt1465qh.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tforeach (n; nums) \n\t{\n\t\tif (n in result) \n\t\t{\n\t\t\tresult.remove(n);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "/tmp/tmp22j5tgcc.d(13): Error: incompatible types for `(n) in (result)`: `long` and `long[]`\n/tmp/tmp22j5tgcc.d(15): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22j5tgcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ngv77ly.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5ngv77ly.__unittest_L30_C1() [0x427ff1]\n??:? void tmp5ngv77ly.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Get the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// Split the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl1ulsaj6.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpl1ulsaj6.__unittest_L35_C1() [0x427ff1]\n??:? void tmpl1ulsaj6.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuxt97mo2.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpuxt97mo2.__unittest_L26_C1() [0x427ff1]\n??:? void tmpuxt97mo2.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppdi2ms7x.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmppdi2ms7x.__unittest_L24_C1() [0x427ff1]\n??:? void tmppdi2ms7x.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpicmir65p.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpicmir65p.__unittest_L27_C1() [0x427ff1]\n??:? void tmpicmir65p.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tif(unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xrvo_go.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmp_xrvo_go.__unittest_L29_C1() [0x428009]\n??:? void tmp_xrvo_go.__modtest() [0x428220]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5kodpl2u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5kodpl2u.__unittest_L33_C1() [0x427ff1]\n??:? void tmp5kodpl2u.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb7zmtqi3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpb7zmtqi3.__unittest_L30_C1() [0x427ff1]\n??:? void tmpb7zmtqi3.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums.length < 2)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums[0..2];\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppt6hw508.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmppt6hw508.__unittest_L27_C1() [0x428005]\n??:? void tmppt6hw508.__modtest() [0x42821c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430759]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]\n??:? runModuleUnitTests [0x42ccbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdexw5b83.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpdexw5b83.__unittest_L25_C1() [0x427ff1]\n??:? void tmpdexw5b83.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp96lh2xgr.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428525]\n??:? void tmp96lh2xgr.__unittest_L32_C1() [0x42808d]\n??:? void tmp96lh2xgr.__modtest() [0x4282a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430689]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcdl57b0z.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpcdl57b0z.__unittest_L32_C1() [0x427ff1]\n??:? void tmpcdl57b0z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the rightmost bit that is '1'\n\tlong rightmost_set_bit = xor & ~(xor-1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeibcbhmm.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpeibcbhmm.__unittest_L33_C1() [0x427ff1]\n??:? void tmpeibcbhmm.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1see26o5.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp1see26o5.__unittest_L26_C1() [0x427ff1]\n??:? void tmp1see26o5.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ngv77ly.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5ngv77ly.__unittest_L30_C1() [0x427ff1]\n??:? void tmp5ngv77ly.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptc5t59_l.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmptc5t59_l.__unittest_L27_C1() [0x427ff1]\n??:? void tmptc5t59_l.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb0gzgwaf.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpb0gzgwaf.__unittest_L33_C1() [0x427ff1]\n??:? void tmpb0gzgwaf.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprp3cuuac.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmprp3cuuac.__unittest_L30_C1() [0x427ff1]\n??:? void tmprp3cuuac.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit_mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_k_cimnq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp_k_cimnq.__unittest_L30_C1() [0x427ff1]\n??:? void tmp_k_cimnq.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong[] temp = new long[nums.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\t\n\twhile(i < nums.length)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\twhile(j < nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\ttemp[k] = nums[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\tresult[0] = temp[0];\n\tresult[1] = temp[1];\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj651ez3t.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42851d]\n??:? void tmpj651ez3t.__unittest_L40_C1() [0x428085]\n??:? void tmpj651ez3t.__modtest() [0x42829c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b46a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]\n??:? runModuleUnitTests [0x42c3ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_pos = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp769i89ba.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp769i89ba.__unittest_L30_C1() [0x427ff1]\n??:? void tmp769i89ba.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp2 = new long[2];\n\tlong[] temp3 = new long[2];\n\tlong[] temp4 = new long[2];\n\tlong[] temp5 = new long[2];\n\tlong[] temp6 = new long[2];\n\tlong[] temp7 = new long[2];\n\tlong[] temp8 = new long[2];\n\tlong[] temp9 = new long[2];\n\tlong[] temp10 = new long[2];\n\tlong[] temp11 = new long[2];\n\tlong[] temp12 = new long[2];\n\tlong[] temp13 = new long[2];\n\tlong[] temp14 = new long[2];\n\tlong[] temp15 = new long[2];\n\tlong[] temp16 = new long[2];\n\tlong[] temp17 = new long[2];\n\tlong[] temp18 = new long[2];\n\tlong[] temp19 = new long[2];\n\tlong[] temp20 = new long[2];\n\tlong[] temp21 = new long[2];\n\tlong[] temp22 = new long[2];\n\tlong[] temp23 = new long[2];\n\tlong[] temp24 = new long[2];\n\tlong[] temp25 = new long[2];\n\tlong[] temp26 = new long[2];\n\tlong[] temp27 = new long[2];\n\tlong[] temp28 = new long[2];\n\tlong[] temp29 = new long[2];\n\tlong[] temp30 = new long[2];\n\tlong[] temp31 = new long[2];\n\tlong[] temp32 = new long[2];\n\tlong[] temp33 = new long[2];\n\tlong[] temp34 = new long[2];\n\tlong[] temp35 = new long[2];\n\tlong[] temp36 = new long[2];\n\tlong[] temp37 = new long[2];\n\tlong[] temp38 = new long[2];\n\tlong[] temp39 = new long[2];\n\tlong[] temp40 = new long[2];\n\tlong[] temp41 = new long[2];\n\tlong[] temp42 = new\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "/tmp/tmp30_nhh2q.d(53): Error: basic type expected, not `unittest`\n/tmp/tmp30_nhh2q.d(53): Error: semicolon expected, not `unittest`\n/tmp/tmp30_nhh2q.d(53): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30_nhh2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxvzxz8fy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxvzxz8fy.__unittest_L33_C1() [0x427ff1]\n??:? void tmpxvzxz8fy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4gigqyfb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp4gigqyfb.__unittest_L33_C1() [0x427ff1]\n??:? void tmp4gigqyfb.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tresult[0] ^= num;\n\t}\n\tresult[1] = result[0];\n\tforeach(num; nums)\n\t{\n\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_x6j5gqr.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp_x6j5gqr.__unittest_L22_C1() [0x427ff9]\n??:? void tmp_x6j5gqr.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbt2gtu1z.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpbt2gtu1z.__unittest_L25_C1() [0x427ff1]\n??:? void tmpbt2gtu1z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuxt97mo2.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpuxt97mo2.__unittest_L26_C1() [0x427ff1]\n??:? void tmpuxt97mo2.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[2];\n\t\tunique_nums[1] = nums_copy[3];\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "/tmp/tmpct47gj9v.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpct47gj9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7dlfyx2y.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp7dlfyx2y.__unittest_L31_C1() [0x427ff1]\n??:? void tmp7dlfyx2y.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp_nums[0] && num != temp_nums[1])\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t\ttemp_nums = unique_nums;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwkvnyggi.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42846d]\n??:? void tmpwkvnyggi.__unittest_L22_C1() [0x427fd9]\n??:? void tmpwkvnyggi.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bda6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43087d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd7d]\n??:? runModuleUnitTests [0x42cce9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428930]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((bit & num) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp_fuzesf.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpp_fuzesf.__unittest_L31_C1() [0x427ff5]\n??:? void tmpp_fuzesf.__modtest() [0x42820c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5r5dltss.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5r5dltss.__unittest_L33_C1() [0x427ff1]\n??:? void tmp5r5dltss.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwmvi9ese.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpwmvi9ese.__unittest_L26_C1() [0x427ff1]\n??:? void tmpwmvi9ese.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp918atl8c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp918atl8c.__unittest_L33_C1() [0x427ff1]\n??:? void tmp918atl8c.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxnz1qo7k.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxnz1qo7k.__unittest_L33_C1() [0x427fed]\n??:? void tmpxnz1qo7k.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num in result)\n\t\t{\n\t\t\tresult.remove(num);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "/tmp/tmphf9jciaq.d(13): Error: incompatible types for `(num) in (result)`: `long` and `long[]`\n/tmp/tmphf9jciaq.d(15): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphf9jciaq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp918atl8c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp918atl8c.__unittest_L33_C1() [0x427ff1]\n??:? void tmp918atl8c.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2yqp68e7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2yqp68e7.__unittest_L33_C1() [0x427ff1]\n??:? void tmp2yqp68e7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\t// Iterate through the array\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\t// Check if the number is already in the unique_nums array\n\t\tif (unique_nums[0] == nums[i] || unique_nums[1] == nums[i])\n\t\t{\n\t\t\t// If it is, then do nothing\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If it isn't, then add it to the unique_nums array\n\t\t\tif (unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = nums[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = nums[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpakmo68of.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428515]\n??:? void tmpakmo68of.__unittest_L36_C1() [0x428081]\n??:? void tmpakmo68of.__modtest() [0x428298]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b462]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430679]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b439]\n??:? runModuleUnitTests [0x42c3a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5r5dltss.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5r5dltss.__unittest_L33_C1() [0x427ff1]\n??:? void tmp5r5dltss.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp89sy97eh.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp89sy97eh.__unittest_L27_C1() [0x427ff1]\n??:? void tmp89sy97eh.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplspi_lfy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmplspi_lfy.__unittest_L33_C1() [0x427ff1]\n??:? void tmplspi_lfy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp_nums = nums;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(temp_nums.length == 1)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_nums = temp_nums[1..$];\n\t\t\tif(num !in temp_nums)\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t\tif(unique_nums.length == 2)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "/tmp/tmp2pqubjkz.d(24): Error: incompatible types for `(num) in (temp_nums)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pqubjkz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_z2few5.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp4_z2few5.__unittest_L30_C1() [0x427ff1]\n??:? void tmp4_z2few5.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0ao0vkci.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp0ao0vkci.__unittest_L26_C1() [0x427ff1]\n??:? void tmp0ao0vkci.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5q0bhon_.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5q0bhon_.__unittest_L30_C1() [0x427ff1]\n??:? void tmp5q0bhon_.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tresult[0] ^= num;\n\t}\n\tresult[1] = result[0] & ~(result[0] - 1);\n\tresult[0] = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & result[1]) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpncl4_mzt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42852d]\n??:? void tmpncl4_mzt.__unittest_L30_C1() [0x428095]\n??:? void tmpncl4_mzt.__modtest() [0x4282ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430705]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430691]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xpmfuie.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp7xpmfuie.__unittest_L25_C1() [0x427ff1]\n??:? void tmp7xpmfuie.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tnum1 ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum2 ^= num;\n\t\t}\n\t}\n\tresult[0] = num1;\n\tresult[1] = num2;\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpycgdayu2.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4284a5]\n??:? void tmpycgdayu2.__unittest_L35_C1() [0x42800d]\n??:? void tmpycgdayu2.__modtest() [0x428224]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c55f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43067d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430609]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c9]\n??:? runModuleUnitTests [0x42c335]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428968]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5r5dltss.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5r5dltss.__unittest_L33_C1() [0x427ff1]\n??:? void tmp5r5dltss.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost bit that is 1\n\tlong rightmost_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkim290gl.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpkim290gl.__unittest_L33_C1() [0x427ff1]\n??:? void tmpkim290gl.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_pos = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppfg48qpk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmppfg48qpk.__unittest_L33_C1() [0x427ff1]\n??:? void tmppfg48qpk.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uph1fpk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp_uph1fpk.__unittest_L33_C1() [0x427ff1]\n??:? void tmp_uph1fpk.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tres[0] ^= num;\n\t\telse\n\t\t\tres[1] ^= num;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzbhdpeka.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpzbhdpeka.__unittest_L27_C1() [0x427fed]\n??:? void tmpzbhdpeka.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t{\n\t\txor ^= n;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(n; nums)\n\t{\n\t\tif((n & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= n;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwa9rgg3j.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpwa9rgg3j.__unittest_L30_C1() [0x427ff1]\n??:? void tmpwa9rgg3j.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp[0] && num != temp[1])\n\t\t{\n\t\t\tif(temp[0] == 0)\n\t\t\t{\n\t\t\t\ttemp[0] = num;\n\t\t\t}\n\t\t\telse if(temp[1] == 0)\n\t\t\t{\n\t\t\t\ttemp[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = temp[0];\n\t\t\t\tunique_nums[1] = temp[1];\n\t\t\t\treturn unique_nums;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwiisvb6q.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpwiisvb6q.__unittest_L35_C1() [0x4280e9]\n??:? void tmpwiisvb6q.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c637]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430755]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a1]\n??:? runModuleUnitTests [0x42c40d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi8escivg.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpi8escivg.__unittest_L26_C1() [0x427ff1]\n??:? void tmpi8escivg.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tif(unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoydpe9nw.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmpoydpe9nw.__unittest_L27_C1() [0x42802d]\n??:? void tmpoydpe9nw.__modtest() [0x428244]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c57f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b412]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43069d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430629]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3e9]\n??:? runModuleUnitTests [0x42c355]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428988]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxin22z2b.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxin22z2b.__unittest_L27_C1() [0x427ff1]\n??:? void tmpxin22z2b.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvag5kj7q.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvag5kj7q.__unittest_L33_C1() [0x427ff1]\n??:? void tmpvag5kj7q.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8cjtq8k3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp8cjtq8k3.__unittest_L31_C1() [0x427ff1]\n??:? void tmp8cjtq8k3.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxvzxz8fy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxvzxz8fy.__unittest_L33_C1() [0x427ff1]\n??:? void tmpxvzxz8fy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp193dvhlv.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp193dvhlv.__unittest_L27_C1() [0x427fed]\n??:? void tmp193dvhlv.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1pd0vkc0.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp1pd0vkc0.__unittest_L30_C1() [0x427fed]\n??:? void tmp1pd0vkc0.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpicmir65p.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpicmir65p.__unittest_L27_C1() [0x427ff1]\n??:? void tmpicmir65p.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjortiz5z.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjortiz5z.__unittest_L25_C1() [0x427ff1]\n??:? void tmpjortiz5z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] != nums[i+1]) \n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tunique_nums[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpftp48osu.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmpftp48osu.__unittest_L23_C1() [0x428009]\n??:? void tmpftp48osu.__modtest() [0x428220]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t\telse if(num == unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp13_87c48.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmp13_87c48.__unittest_L44_C1() [0x4280e5]\n??:? void tmp13_87c48.__modtest() [0x4282fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c637]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430755]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a1]\n??:? runModuleUnitTests [0x42c40d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9352hqyc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp9352hqyc.__unittest_L28_C1() [0x427fed]\n??:? void tmp9352hqyc.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2garwl3g.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2garwl3g.__unittest_L26_C1() [0x427fed]\n??:? void tmp2garwl3g.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8s3m26uk.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp8s3m26uk.__unittest_L24_C1() [0x427ff1]\n??:? void tmp8s3m26uk.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx7hoaub1.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpx7hoaub1.__unittest_L20_C1() [0x427f91]\n??:? void tmpx7hoaub1.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvag5kj7q.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvag5kj7q.__unittest_L33_C1() [0x427ff1]\n??:? void tmpvag5kj7q.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdexw5b83.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpdexw5b83.__unittest_L25_C1() [0x427ff1]\n??:? void tmpdexw5b83.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphyz5iqmx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmphyz5iqmx.__unittest_L32_C1() [0x427ff1]\n??:? void tmphyz5iqmx.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9e_sy1m8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp9e_sy1m8.__unittest_L25_C1() [0x427ff1]\n??:? void tmp9e_sy1m8.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj0j7frv0.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42854d]\n??:? void tmpj0j7frv0.__unittest_L38_C1() [0x4280b9]\n??:? void tmpj0j7frv0.__modtest() [0x4282d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430725]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpicmir65p.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpicmir65p.__unittest_L27_C1() [0x427ff1]\n??:? void tmpicmir65p.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\txor_num ^= nums[i];\n\t}\n\t\n\tint right_most_set_bit = xor_num & ~(xor_num - 1);\n\t\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif ((nums[i] & right_most_set_bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= nums[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= nums[i];\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpb43vnkyg.d(17): Error: cannot implicitly convert expression `xor_num & ~(xor_num - 1L)` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb43vnkyg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp918atl8c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp918atl8c.__unittest_L33_C1() [0x427ff1]\n??:? void tmp918atl8c.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo9w6is38.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpo9w6is38.__unittest_L26_C1() [0x427ff1]\n??:? void tmpo9w6is38.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & (-xor);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0x3i30dx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp0x3i30dx.__unittest_L25_C1() [0x427fed]\n??:? void tmp0x3i30dx.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpde6x85ei.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpde6x85ei.__unittest_L26_C1() [0x427ff1]\n??:? void tmpde6x85ei.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4cfl0dzr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp4cfl0dzr.__unittest_L30_C1() [0x427ff1]\n??:? void tmp4cfl0dzr.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tlong xor = 0;\n\tfor (long num : nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tfor (long num : nums)\n\t{\n\t\tif ((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpr8pnllf2.d(13): Error: semicolon expected, not `:`\n/tmp/tmpr8pnllf2.d(13): Error: expression expected, not `:`\n/tmp/tmpr8pnllf2.d(13): Error: found `nums` when expecting `;` following `for` condition\n/tmp/tmpr8pnllf2.d(20): Error: semicolon expected, not `:`\n/tmp/tmpr8pnllf2.d(20): Error: expression expected, not `:`\n/tmp/tmpr8pnllf2.d(20): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8pnllf2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjq6s3ep7.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjq6s3ep7.__unittest_L30_C1() [0x427ff1]\n??:? void tmpjq6s3ep7.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp918atl8c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp918atl8c.__unittest_L33_C1() [0x427ff1]\n??:? void tmp918atl8c.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp2 = new long[2];\n\t\n\tif(nums.length == 2)\n\t{\n\t\tunique_nums = nums;\n\t}\n\telse\n\t{\n\t\ttemp = nums[0..2];\n\t\ttemp2 = nums[2..$];\n\t\t\n\t\tunique_nums = two_unique_nums(temp);\n\t\tunique_nums ~= two_unique_nums(temp2);\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpukzmhgnn.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428516]\n??:? long[] tmpukzmhgnn.two_unique_nums(long[]) [0x427e91]\n??:? long[] tmpukzmhgnn.two_unique_nums(long[]) [0x427eee]\n??:? long[] tmpukzmhgnn.two_unique_nums(long[]) [0x427eee]\n??:? long[] tmpukzmhgnn.two_unique_nums(long[]) [0x427eee]\n??:? void tmpukzmhgnn.__unittest_L29_C1() [0x427f72]\n??:? void tmpukzmhgnn.__modtest() [0x4281e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cfbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42be4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430875]\n??:? int ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg8qg6alw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpg8qg6alw.__unittest_L26_C1() [0x427ff1]\n??:? void tmpg8qg6alw.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvx3vy7qx.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvx3vy7qx.__unittest_L33_C1() [0x427ff1]\n??:? void tmpvx3vy7qx.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbodfgr8m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42845d]\n??:? void tmpbodfgr8m.__unittest_L23_C1() [0x427fc5]\n??:? void tmpbodfgr8m.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c517]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430635]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b381]\n??:? runModuleUnitTests [0x42c2ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428920]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvjt1_r3z.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvjt1_r3z.__unittest_L28_C1() [0x427ff1]\n??:? void tmpvjt1_r3z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tint i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp[0] && num != temp[1])\n\t\t{\n\t\t\tunique_nums[i] = num;\n\t\t\ti++;\n\t\t}\n\t\ttemp[0] = temp[1];\n\t\ttemp[1] = num;\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc67q7nxv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42858e]\n??:? long[] tmpc67q7nxv.two_unique_nums(long[]) [0x427eed]\n??:? void tmpc67q7nxv.__unittest_L25_C1() [0x427fea]\n??:? void tmpc67q7nxv.__modtest() [0x428260]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c597]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b42a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430641]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b401]\n??:? runModuleUnitTests [0x42c36d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tfor (long num : nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tfor (long num : nums) \n\t{\n\t\tif ((num & bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpwp7j4s80.d(12): Error: semicolon expected, not `:`\n/tmp/tmpwp7j4s80.d(12): Error: expression expected, not `:`\n/tmp/tmpwp7j4s80.d(12): Error: found `nums` when expecting `;` following `for` condition\n/tmp/tmpwp7j4s80.d(18): Error: semicolon expected, not `:`\n/tmp/tmpwp7j4s80.d(18): Error: expression expected, not `:`\n/tmp/tmpwp7j4s80.d(18): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp7j4s80.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp65caw5s.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpp65caw5s.__unittest_L33_C1() [0x427ff1]\n??:? void tmpp65caw5s.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo9w6is38.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpo9w6is38.__unittest_L26_C1() [0x427ff1]\n??:? void tmpo9w6is38.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the first bit that is set\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_1ssrgx1.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp_1ssrgx1.__unittest_L34_C1() [0x427ff1]\n??:? void tmp_1ssrgx1.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbodfgr8m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42845d]\n??:? void tmpbodfgr8m.__unittest_L23_C1() [0x427fc5]\n??:? void tmpbodfgr8m.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c517]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430635]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b381]\n??:? runModuleUnitTests [0x42c2ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428920]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ngv77ly.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp5ngv77ly.__unittest_L30_C1() [0x427ff1]\n??:? void tmp5ngv77ly.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg8kt4plr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpg8kt4plr.__unittest_L24_C1() [0x427ff1]\n??:? void tmpg8kt4plr.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp3bwzu8o.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpp3bwzu8o.__unittest_L18_C1() [0x427f91]\n??:? void tmpp3bwzu8o.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tres[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[1] ^= num;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy5jkiu9i.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpy5jkiu9i.__unittest_L30_C1() [0x427ff1]\n??:? void tmpy5jkiu9i.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qcfnokf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2qcfnokf.__unittest_L32_C1() [0x427ff1]\n??:? void tmp2qcfnokf.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tint bit = xor & ~(xor-1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpmvv290ta.d(17): Error: cannot implicitly convert expression `xor & ~(xor - 1L)` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvv290ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjabhizhn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjabhizhn.__unittest_L24_C1() [0x427fed]\n??:? void tmpjabhizhn.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong last_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcp_fax06.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpcp_fax06.__unittest_L33_C1() [0x427ff1]\n??:? void tmpcp_fax06.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qcfnokf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2qcfnokf.__unittest_L32_C1() [0x427ff1]\n??:? void tmp2qcfnokf.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] != nums[i+1])\n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tunique_nums[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobjw22p8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmpobjw22p8.__unittest_L24_C1() [0x428009]\n??:? void tmpobjw22p8.__modtest() [0x428220]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppt6xbfo6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmppt6xbfo6.__unittest_L30_C1() [0x427ff1]\n??:? void tmppt6xbfo6.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamb_1ln6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpamb_1ln6.__unittest_L24_C1() [0x427ff1]\n??:? void tmpamb_1ln6.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((rightmost_bit & num) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr8dhq0vz.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpr8dhq0vz.__unittest_L27_C1() [0x427ff5]\n??:? void tmpr8dhq0vz.__modtest() [0x42820c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprp3cuuac.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmprp3cuuac.__unittest_L30_C1() [0x427ff1]\n??:? void tmprp3cuuac.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t\txor ^= n;\n\tresult[0] = xor;\n\tresult[1] = xor;\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy5a9o1cm.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpy5a9o1cm.__unittest_L18_C1() [0x427f91]\n??:? void tmpy5a9o1cm.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\t\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[2];\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpz9t8igxx.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9t8igxx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnxn6jr9i.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpnxn6jr9i.__unittest_L24_C1() [0x427ff1]\n??:? void tmpnxn6jr9i.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp3bwzu8o.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpp3bwzu8o.__unittest_L18_C1() [0x427f91]\n??:? void tmpp3bwzu8o.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4_z2few5.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp4_z2few5.__unittest_L30_C1() [0x427ff1]\n??:? void tmp4_z2few5.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_mask = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyq061mfm.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpyq061mfm.__unittest_L32_C1() [0x427ff1]\n??:? void tmpyq061mfm.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpggvukygy.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpggvukygy.__unittest_L34_C1() [0x427ff1]\n??:? void tmpggvukygy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_mask = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz20yl_f1.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpz20yl_f1.__unittest_L30_C1() [0x427ff1]\n??:? void tmpz20yl_f1.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tint bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "/tmp/tmpyzbyvxw5.d(16): Error: cannot implicitly convert expression `xor & ~(xor - 1L)` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzbyvxw5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong[] unique_nums_count = new long[2];\n\tunique_nums[0] = nums[0];\n\tunique_nums[1] = nums[1];\n\tunique_nums_count[0] = 1;\n\tunique_nums_count[1] = 1;\n\t\n\tforeach(num; nums[2..$])\n\t{\n\t\tif(num == unique_nums[0])\n\t\t{\n\t\t\tunique_nums_count[0]++;\n\t\t}\n\t\telse if(num == unique_nums[1])\n\t\t{\n\t\t\tunique_nums_count[1]++;\n\t\t}\n\t\telse if(unique_nums_count[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t\tunique_nums_count[0] = 1;\n\t\t}\n\t\telse if(unique_nums_count[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t\tunique_nums_count[1] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums_count[0]--;\n\t\t\tunique_nums_count[1]--;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2uavz7c3.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4286bd]\n??:? void tmp2uavz7c3.__unittest_L46_C1() [0x428229]\n??:? void tmp2uavz7c3.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkw7czh8p.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42845d]\n??:? void tmpkw7czh8p.__unittest_L21_C1() [0x427fc5]\n??:? void tmpkw7czh8p.__modtest() [0x4281dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c517]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430635]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b381]\n??:? runModuleUnitTests [0x42c2ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428920]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tunique_nums[0] = xor_result;\n\tunique_nums[1] = xor_result;\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuptg7t32.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpuptg7t32.__unittest_L21_C1() [0x427f91]\n??:? void tmpuptg7t32.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo9w6is38.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpo9w6is38.__unittest_L26_C1() [0x427ff1]\n??:? void tmpo9w6is38.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != nums[i+1])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tresult[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwpx0f0ol.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpwpx0f0ol.__unittest_L22_C1() [0x428015]\n??:? void tmpwpx0f0ol.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7dlfyx2y.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp7dlfyx2y.__unittest_L31_C1() [0x427ff1]\n??:? void tmp7dlfyx2y.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong bit_num = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_num) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe7vim5_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpe7vim5_2.__unittest_L33_C1() [0x427ff1]\n??:? void tmpe7vim5_2.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517140,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprp3cuuac.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmprp3cuuac.__unittest_L30_C1() [0x427ff1]\n??:? void tmprp3cuuac.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tint pos = 0;\n\twhile((xor & (1 << pos)) == 0)\n\t\tpos++;\n\t\n\tlong mask = 1 << pos;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124203,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qcfnokf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2qcfnokf.__unittest_L32_C1() [0x427ff1]\n??:? void tmp2qcfnokf.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach (num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach (num; nums)\n\t{\n\t\tif ((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0e_kforr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp0e_kforr.__unittest_L27_C1() [0x427ff1]\n??:? void tmp0e_kforr.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbt2gtu1z.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpbt2gtu1z.__unittest_L25_C1() [0x427ff1]\n??:? void tmpbt2gtu1z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeabg1zml.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpeabg1zml.__unittest_L26_C1() [0x427ff1]\n??:? void tmpeabg1zml.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\tlong first = 0;\n\tlong second = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tfirst ^= num;\n\t\telse\n\t\t\tsecond ^= num;\n\t}\n\t\n\tret[0] = first;\n\tret[1] = second;\n\treturn ret;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_1vpgcls.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmp_1vpgcls.__unittest_L30_C1() [0x428009]\n??:? void tmp_1vpgcls.__modtest() [0x428220]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpshyg6qct.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpshyg6qct.__unittest_L33_C1() [0x427ff1]\n??:? void tmpshyg6qct.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((last_bit & num) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8pffdf_c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmp8pffdf_c.__unittest_L33_C1() [0x427ff5]\n??:? void tmp8pffdf_c.__modtest() [0x42820c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & rightmost_set_bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp668xanu6.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp668xanu6.__unittest_L31_C1() [0x427ff1]\n??:? void tmp668xanu6.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo9w6is38.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpo9w6is38.__unittest_L26_C1() [0x427ff1]\n??:? void tmpo9w6is38.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tres[0] ^= num;\n\t\telse\n\t\t\tres[1] ^= num;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplv416fs9.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmplv416fs9.__unittest_L26_C1() [0x427ff1]\n??:? void tmplv416fs9.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpogijaa2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpogijaa2v.__unittest_L26_C1() [0x427ff1]\n??:? void tmpogijaa2v.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxvzxz8fy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxvzxz8fy.__unittest_L33_C1() [0x427ff1]\n??:? void tmpxvzxz8fy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor_res = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_res ^= num;\n\t}\n\t\n\tlong mask = xor_res & ~(xor_res - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2prdes9m.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp2prdes9m.__unittest_L33_C1() [0x427ff1]\n??:? void tmp2prdes9m.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxvzxz8fy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpxvzxz8fy.__unittest_L33_C1() [0x427ff1]\n??:? void tmpxvzxz8fy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvjt1_r3z.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvjt1_r3z.__unittest_L28_C1() [0x427ff1]\n??:? void tmpvjt1_r3z.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvnxhdzsk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpvnxhdzsk.__unittest_L34_C1() [0x427ff1]\n??:? void tmpvnxhdzsk.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp918atl8c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp918atl8c.__unittest_L33_C1() [0x427ff1]\n??:? void tmp918atl8c.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg4ibk60h.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpg4ibk60h.__unittest_L26_C1() [0x427ff1]\n??:? void tmpg4ibk60h.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4cfl0dzr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp4cfl0dzr.__unittest_L30_C1() [0x427ff1]\n??:? void tmp4cfl0dzr.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjwwd9t_y.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjwwd9t_y.__unittest_L26_C1() [0x427ff1]\n??:? void tmpjwwd9t_y.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t\telse if(num == unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjmab6wjr.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42854d]\n??:? void tmpjmab6wjr.__unittest_L39_C1() [0x4280b9]\n??:? void tmpjmab6wjr.__modtest() [0x4282d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c607]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b49a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430725]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]\n??:? runModuleUnitTests [0x42c3dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplspi_lfy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmplspi_lfy.__unittest_L33_C1() [0x427ff1]\n??:? void tmplspi_lfy.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != 0)\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tnums[i] = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != 0)\n\t\t{\n\t\t\tresult[1] = nums[i];\n\t\t\tnums[i] = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzgpjp0_p.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42853d]\n??:? void tmpzgpjp0_p.__unittest_L31_C1() [0x4280a5]\n??:? void tmpzgpjp0_p.__modtest() [0x4282bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b48a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430715]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b461]\n??:? runModuleUnitTests [0x42c3cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tres[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj0qyz5d.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpjj0qyz5d.__unittest_L33_C1() [0x427fed]\n??:? void tmpjj0qyz5d.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tnum1 ^= num;\n\t\telse\n\t\t\tnum2 ^= num;\n\t}\n\tresult[0] = num1;\n\tresult[1] = num2;\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp044icg6t.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4284a5]\n??:? void tmp044icg6t.__unittest_L29_C1() [0x42800d]\n??:? void tmp044icg6t.__modtest() [0x428224]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c55f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43067d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430609]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c9]\n??:? runModuleUnitTests [0x42c335]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428968]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccz18es.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpoccz18es.__unittest_L33_C1() [0x427ff1]\n??:? void tmpoccz18es.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(result.length == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(result.length == 1)\n\t\t\t{\n\t\t\t\tif(result[0] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(result[0] != num && result[1] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0f4sjqxj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4284e5]\n??:? void tmp0f4sjqxj.__unittest_L37_C1() [0x428051]\n??:? void tmp0f4sjqxj.__modtest() [0x428268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf2f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bdc2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430815]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd99]\n??:? runModuleUnitTests [0x42cd05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}