{
  "name": "mbpp_565_split",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to split a string into characters.\n\t\n*/\nstring[] split(string word) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tresult[i] = word[i..i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, w; word)\n\t{\n\t\tresult ~= w;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split;\n}",
    "{\n\treturn word.split;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, ch; word)\n\t{\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0..length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.idup;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length) \n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c.to!string;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to count the number of words in a string.\n\t\n*/",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] splitted;\n\tforeach(char c; word)\n\t\tsplitted ~= c;\n\treturn splitted;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t\tresult ~= word[i .. i+1];\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tauto result = new string[];\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new string[];\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i + 1];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] chars;\n\tforeach(c; word)\n\t{\n\t\tchars ~= c;\n\t}\n\treturn chars;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new string[];\n\tforeach(i, ch; word)\n\t{\n\t\tresult ~= ch;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result = new string[word.length];\n\tforeach(i, c; word)\n\t{\n\t\tresult[i] = c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split;\n}",
    "{\n\tstring[] result;\n\tforeach(i, w; word)\n\t{\n\t\tresult ~= w;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result = new string[length];\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. length)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (i; 0 .. word.length) \n\t{\n\t\tresult ~= word[i .. i + 1];\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] split_word;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tsplit_word ~= word[i..i];\n\t}\n\treturn split_word;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] split_word;\n\tforeach(char c; word)\n\t{\n\t\tsplit_word ~= c;\n\t}\n\treturn split_word;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i..i+1];\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach(i; 0..length)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i];\n\t}\n\treturn result;\n}",
    "{\n\treturn word.split();\n}",
    "{\n\treturn word.split();\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] arr;\n\tarr.length = len;\n\tforeach(int i, char c; word)\n\t{\n\t\tarr[i] = c.toString();\n\t}\n\treturn arr;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c;\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to split a string into words.\n*/\nstring[] splitWords(string word)\n{\n\tstring[] result;\n\tstring temp;\n\tforeach(c; word)\n\t{\n\t\tif(c == ' ')\n\t\t{\n\t\t\tresult ~= temp;\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp ~= c;\n\t\t}\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to reverse a string.\n*/\nstring reverse(string word)\n{\n\tstring result;\n\tforeach(c; word)\n\t{\n\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to find the length of a string.\n*/",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0..len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new string[];\n\tforeach(i, c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t\tresult ~= c.toString();\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult[i] = word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i; 0 .. word.length)\n\t{\n\t\tresult ~= word[i .. i+1];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result;\n\tforeach(i; 0 .. len)\n\t{\n\t\tresult ~= word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tint length = word.length;\n\tstring[] result;\n\tforeach (i; 0 .. length) \n\t{\n\t\tresult ~= word[i .. i];\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring[] result = new string[len];\n\tforeach(i; 0..len)\n\t{\n\t\tresult[i] = word[i..i];\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(char c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach (i, c; word) \n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word) \n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c.to!string();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word) \n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(i, c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(c; word)\n\t{\n\t\tresult ~= c.toString();\n\t}\n\treturn result;\n}"
  ]
}