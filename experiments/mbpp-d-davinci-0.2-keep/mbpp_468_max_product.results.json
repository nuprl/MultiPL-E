{
  "name": "mbpp_468_max_product",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong max_num = 0;\n\tforeach(num; arr)\n\t{\n\t\tif(num > max_num)\n\t\t{\n\t\t\tmax_num = num;\n\t\t\tcurr_product *= num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr_product = 1;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpf9zmshag.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9zmshag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmp_whucw86.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp_whucw86.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_whucw86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong[] max_product_reverse = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[arr.length-1] = arr.length-1;\n\tmax_product_reverse[arr.length-1] = arr[arr.length-1];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length-2; i >= 0; i--) \n\t{\n\t\tmax_product_reverse[i] = arr[i];\n\t\tmax_product_index_reverse[i] = i;\n\t\t\n\t\tfor (int j = arr.length-1; j > i; j--) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tif (max_product_reverse[i] < max_product_reverse[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_reverse[i] = max_product_reverse[j] * arr[i];\n\t\t\t\t\tmax_product\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpxrfi50hf.d(50): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpxrfi50hf.d(58): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxrfi50hf.d(58): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxrfi50hf.d(58): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxrfi50hf.d(58): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxrfi50hf.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrfi50hf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpsjy0uyzx.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpsjy0uyzx.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjy0uyzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_z96klqv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp_z96klqv.__unittest_L19_C1() [0x427dcd]\n??:? void tmp_z96klqv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpuybnqmgr.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpuybnqmgr.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuybnqmgr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmppnfn7ekb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppnfn7ekb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnfn7ekb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tlong current_min = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max * arr[i], arr[i]);\n\t\t\tcurrent_min = min(current_min * arr[i], arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = current_max;\n\t\t\tcurrent_max = max(current_min * arr[i], arr[i]);\n\t\t\tcurrent_min = min(temp * arr[i], arr[i]);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, current_max);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmp1hvgqu4p.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1hvgqu4p.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp1hvgqu4p.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1hvgqu4p.d(25): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp1hvgqu4p.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hvgqu4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmppj2glpl6.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmppj2glpl6.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppj2glpl6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpyerjqpdt.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpyerjqpdt.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpyerjqpdt.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyerjqpdt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] res = new long[arr.length];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tres[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i-1], arr[i] * min[i-1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i-1], arr[i] * min[i-1]));\n\t\tres[i] = max(res[i-1], max[i]);\n\t}\n\treturn res[arr.length-1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpdimmcbjb.d(17): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpdimmcbjb.d(18): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpdimmcbjb.d(19): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdimmcbjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph74f8fmh.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42850d]\n??:? void tmph74f8fmh.__unittest_L47_C1() [0x4281a1]\n??:? void tmph74f8fmh.__modtest() [0x428290]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b45a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430671]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b431]\n??:? runModuleUnitTests [0x42c39d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmp0zn89ksn.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0zn89ksn.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zn89ksn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, dp[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpr4nqddjj.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpr4nqddjj.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4nqddjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpthd090ky.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpthd090ky.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthd090ky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpswj04zxs.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpswj04zxs.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswj04zxs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_so_far = 0;\n\tlong min_so_far = 0;\n\tlong max_ending_here = 0;\n\tlong min_ending_here = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax_ending_here = max(i, max(i * max_so_far, i * min_so_far));\n\t\tmin_ending_here = min(i, min(i * max_so_far, i * min_so_far));\n\t\t\n\t\tmax_so_far = max_ending_here;\n\t\tmin_so_far = min_ending_here;\n\t\t\n\t\tmax_product = max(max_product, max_so_far);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpo91srt0g.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpo91srt0g.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpo91srt0g.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo91srt0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpktc6l3oa.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpktc6l3oa.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktc6l3oa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpmu5ofs8o.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpmu5ofs8o.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmu5ofs8o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tmax_product_so_far = max(max_product_so_far * i, i);\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpn7eg3xju.d(13): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpn7eg3xju.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7eg3xju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_so_far = 0;\n\tlong max_product_index_so_far = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_so_far < max_product[i])\n\t\t{\n\t\t\tmax_product_so_far = max_product[i];\n\t\t\tmax_product_index_so_far = i;\n\t\t}\n\t}\n\t\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8v86m1uw.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp8v86m1uw.__unittest_L37_C1() [0x428051]\n??:? void tmp8v86m1uw.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpasdxw7is.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpasdxw7is.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasdxw7is.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpjk6vefhz.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpjk6vefhz.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpjk6vefhz.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk6vefhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpp69gckhq.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpp69gckhq.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp69gckhq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpxx4lv99k.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpxx4lv99k.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx4lv99k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmplyouaa8q.d(16): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmplyouaa8q.d(17): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmplyouaa8q.d(18): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyouaa8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t\tif (arr[i] == 0) \n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpn04qm9qa.d(14): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn04qm9qa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tdp[i] = 1;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(dp[i] == max)\n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpy_sxm82y.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpy_sxm82y.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_sxm82y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max = 0;\n\t\tlong max_index = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i] && max_product[j] > max) \n\t\t\t{\n\t\t\t\tmax = max_product[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max * arr[i];\n\t\tmax_product_index[i] = max_index;\n\t}\n\t\n\tlong max = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product[i] > max) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvjwe5yxt.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x428375]\n??:? void tmpvjwe5yxt.__unittest_L44_C1() [0x428005]\n??:? void tmpvjwe5yxt.__modtest() [0x4280f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c42f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43054d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b299]\n??:? runModuleUnitTests [0x42c205]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428838]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_rev = new long[arr.length];\n\tlong[] max_product_rev = new long[arr.length];\n\tlong max_product_final = 0;\n\tlong max_product_index_final = 0;\n\tlong max_product_index_rev_final = 0;\n\tlong max_product_rev_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_rev[arr.length-1] = arr.length-1;\n\tmax_product_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > max_product[i-1]*arr[i])\n\t\t{\n\t\t\tmax_product[i] = arr[i];\n\t\t\tmax_product_index[i] = i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product[i] = max_product[i-1]*arr[i];\n\t\t\tmax_product_index[i] = max_product_index[i-1];\n\t\t}\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tif(arr[i] > max_product_rev[i+1]*arr[i])\n\t\t{\n\t\t\tmax_product_rev[i] = arr[i];\n\t\t\tmax_product_index_rev[i] = i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_rev[i] = max_product_rev[i+1]*arr[i];\n\t\t\tmax_product_index_rev[i] = max_product_index_rev[i+1];\n\t\t}\n\t}\n\t\n\tfor(int i =\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp7x0kokk5.d(52): Error: expression expected, not `unittest`\n/tmp/tmp7x0kokk5.d(53): Error: semicolon expected, not `{`\n/tmp/tmp7x0kokk5.d(60): Error: found `void` when expecting `;` following `for` condition\n/tmp/tmp7x0kokk5.d(60): Error: found `{` when expecting `)`\n/tmp/tmp7x0kokk5.d(60): Error: found `}` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7x0kokk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpxx4lv99k.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpxx4lv99k.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx4lv99k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp0k_apw4p.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0k_apw4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpja4tk0l6.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpja4tk0l6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpja4tk0l6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurrent_product *= i;\n\t\tif(current_product > max_product)\n\t\t\tmax_product = current_product;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcvwuj2u3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpcvwuj2u3.__unittest_L19_C1() [0x427dc9]\n??:? void tmpcvwuj2u3.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c11f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430145]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af89]\n??:? runModuleUnitTests [0x42bef5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428584]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\t\n\t\tforeach(j, v2; arr[0 .. i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * v);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmplxchnpv0.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmplxchnpv0.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxchnpv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_z96klqv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp_z96klqv.__unittest_L19_C1() [0x427dcd]\n??:? void tmp_z96klqv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp2_gbagq4.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp2_gbagq4.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_gbagq4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tlong max_val = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_val = max(max_val, dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_val;\n\t\tmax = max(max, max_val);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmppuyl76xo.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppuyl76xo.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuyl76xo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp0xl3taks.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp0xl3taks.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xl3taks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t\tmax_product_value = max_product[i];\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnmi84lwj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42843d]\n??:? void tmpnmi84lwj.__unittest_L36_C1() [0x4280d1]\n??:? void tmpnmi84lwj.__modtest() [0x4281c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430615]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]\n??:? runModuleUnitTests [0x42c2cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428900]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(max_prod[i - 1] * arr[i], min_prod[i - 1] * arr[i]));\n\t\tmin_prod[i] = min(arr[i], min(max_prod[i - 1] * arr[i], min_prod[i - 1] * arr[i]));\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpjkwxiqcj.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpjkwxiqcj.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpjkwxiqcj.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkwxiqcj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpayfw460a.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpayfw460a.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayfw460a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_rev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_rev[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_rev[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_rev = max_product[arr.length - 1];\n\tmax_product_index_rev[arr.length - 1] = arr.length - 1;\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--)\n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_rev < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_rev = max_product[j] * arr[i];\n\t\t\t\tmax_product_index_rev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_final = max_product[arr.length - 1];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_final\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpn4gl1xv9.d(53): Error: found `unittest` when expecting `)`\n/tmp/tmpn4gl1xv9.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn4gl1xv9.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4gl1xv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmppnfn7ekb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppnfn7ekb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnfn7ekb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpom8kcw72.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpom8kcw72.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom8kcw72.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpjk9vwqsb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjk9vwqsb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk9vwqsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong max_prod = 0;\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tprod *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_prod = max(max_prod, prod);\n\t\t\tprod = 1;\n\t\t\tmax = i;\n\t\t\tprod *= i;\n\t\t}\n\t}\n\tmax_prod = max(max_prod, prod);\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpsbkv1lw7.d(21): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpsbkv1lw7.d(27): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbkv1lw7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_m9y3n8e.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmp_m9y3n8e.__unittest_L24_C1() [0x427de1]\n??:? void tmp_m9y3n8e.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c137]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43015d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43060c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa1]\n??:? runModuleUnitTests [0x42bf0d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42859c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] result = new long[arr.length];\n\t\n\tmax[0] = min[0] = result[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = min[i] = result[i] = arr[i];\n\t\t\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax[i] = max(max[i], max[i - 1] * arr[i]);\n\t\t\tmin[i] = min(min[i], min[i - 1] * arr[i]);\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tmax[i] = max(max[i], min[i - 1] * arr[i]);\n\t\t\tmin[i] = min(min[i], max[i - 1] * arr[i]);\n\t\t}\n\t\t\n\t\tresult[i] = max(result[i], max[i]);\n\t}\n\t\n\treturn result[arr.length - 1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpn4hlu7yz.d(21): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpn4hlu7yz.d(22): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpn4hlu7yz.d(26): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpn4hlu7yz.d(27): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpn4hlu7yz.d(30): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4hlu7yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpvzaucuk5.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpvzaucuk5.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzaucuk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmplbalwzy5.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmplbalwzy5.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbalwzy5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpn8z7oini.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpn8z7oini.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8z7oini.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = 1;\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp9oejf3gh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9oejf3gh.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oejf3gh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_prev_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_index_prev_value = 0;\n\t\t\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[j] > max_product_value) \n\t\t\t{\n\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\tmax_product_index_value = j;\n\t\t\t\tmax_product_index_prev_value = max_product_index_prev[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = max_product_index_value;\n\t}\n\t\n\tlong max_product_value_final = 0;\n\tlong max_product_index_value_final = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product[i] > max_product_value_final) \n\t\t{\n\t\t\tmax_product_value_final = max_product[i];\n\t\t\tmax_product_index_value_final = i;\n\t\t}\n\t}\n\t\n\treturn max_product_\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp77uaehoi.d(54): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp77uaehoi.d(62): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77uaehoi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpvyq2ej13.d(16): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpvyq2ej13.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyq2ej13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = product * arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmptpzennbh.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmptpzennbh.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpzennbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < max_arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpqy5usy_r.d(24): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpqy5usy_r.d(31): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqy5usy_r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpu5bj4di6.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5bj4di6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(e; arr)\n\t{\n\t\tif(e > max)\n\t\t\tmax = e;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd2cn9edt.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpd2cn9edt.__unittest_L17_C1() [0x427dbd]\n??:? void tmpd2cn9edt.__modtest() [0x427eac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c117]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43013d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af81]\n??:? runModuleUnitTests [0x42beed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42857c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 1;\n\tlong[] max_prod_arr = new long[arr.length];\n\tlong[] min_prod_arr = new long[arr.length];\n\tmax_prod_arr[0] = arr[0];\n\tmin_prod_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod_arr[i] = max(max_prod_arr[i - 1] * arr[i], min_prod_arr[i - 1] * arr[i], arr[i]);\n\t\tmin_prod_arr[i] = min(max_prod_arr[i - 1] * arr[i], min_prod_arr[i - 1] * arr[i], arr[i]);\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpi3dtalt5.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpi3dtalt5.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpi3dtalt5.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3dtalt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurr_product *= i;\n\t\tmax_product = max(max_product, curr_product);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpasnfr2mm.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasnfr2mm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproduct = max(product, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = product * arr[i];\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpk3ylxt4h.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpk3ylxt4h.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3ylxt4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong last_max = 1;\n\tlong last_min = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t\tmax_product = max(max_product, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = product;\n\t\t\tproduct = max(last_max * i, last_min * i);\n\t\t\tmax_product = max(max_product, product);\n\t\t\tlast_max = temp;\n\t\t\tlast_min = product;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpsheywetb.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsheywetb.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsheywetb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsheywetb.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsheywetb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = i;\n\t\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tif (max < max_product[i]) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwp6xvfmh.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmpwp6xvfmh.__unittest_L51_C1() [0x428181]\n??:? void tmpwp6xvfmh.__modtest() [0x428270]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b43a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430651]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b411]\n??:? runModuleUnitTests [0x42c37d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong max_product_so_far = arr[0];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpfset54j6.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfset54j6.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfset54j6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdxr8y1p4.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxr8y1p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong[] max_product_reverse = new long[arr.length];\n\tlong max_product_final = 0;\n\tlong max_product_index_final = 0;\n\tlong max_product_index_reverse_final = 0;\n\tlong max_product_reverse_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[0] = 0;\n\tmax_product_reverse[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax_product_index[i] = max(i, max_product_index[i-1] * arr[i]);\n\t\tmax_product_reverse[i] = max(arr[i], max_product_reverse[i-1] * arr[i]);\n\t\tmax_product_index_reverse[i] = max(i, max_product_index_reverse[i-1] * arr[i]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(max_product[i] > max_product_final)\n\t\t{\n\t\t\tmax_product_final = max_product[i];\n\t\t\tmax_product_index_final = max_product_index[i];\n\t\t}\n\t\tif(max_product_reverse[i] > max_product_reverse_final)\n\t\t{\n\t\t\tmax_product_reverse_final = max_product_reverse[i];\n\t\t\tmax_product_index_reverse_final = max_product_index_reverse[i];\n\t\t}\n\t}\n\t\n\treturn max(max_product_final, max_product_reverse\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdf0lcltt.d(46): Error: found `unittest` when expecting `,`\n/tmp/tmpdf0lcltt.d(54): Error: found `void` when expecting `,`\n/tmp/tmpdf0lcltt.d(54): Error: found `{` when expecting `,`\n/tmp/tmpdf0lcltt.d(54): Error: expression expected, not `}`\n/tmp/tmpdf0lcltt.d(54): Error: found `End of File` when expecting `,`\n/tmp/tmpdf0lcltt.d(54): Error: found `End of File` when expecting `)`\n/tmp/tmpdf0lcltt.d(54): Error: found `End of File` when expecting `;` following `return` statement\n/tmp/tmpdf0lcltt.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdf0lcltt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong max_element = 0;\n\tforeach(element; arr)\n\t{\n\t\tif(element > max_element)\n\t\t{\n\t\t\tmax_element = element;\n\t\t\tproduct *= element;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(product > max_product)\n\t\t\t\tmax_product = product;\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max(max_product, product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp_r43jgol.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_r43jgol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = 1;\n\tlong current_min = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max * i, i);\n\t\t\tcurrent_min = min(current_min * i, i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_max = max(current_min * i, i);\n\t\t\tcurrent_min = min(current_max * i, i);\n\t\t}\n\t\tmax_product = max(max_product, current_max);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpab466s_a.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpab466s_a.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpab466s_a.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpab466s_a.d(23): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpab466s_a.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab466s_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpz9omk0r1.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpz9omk0r1.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9omk0r1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp1kkcas3u.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1kkcas3u.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kkcas3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpe2vinvqa.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpe2vinvqa.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2vinvqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong product = 1;\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp9eoeg51n.d(16): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eoeg51n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = 1;\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (dp[i] == max) \n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpm_adhcli.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpm_adhcli.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_adhcli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpu5bj4di6.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5bj4di6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_o73bz0g.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmp_o73bz0g.__unittest_L38_C1() [0x428059]\n??:? void tmp_o73bz0g.__modtest() [0x428148]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c47f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b312]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43059d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430529]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]\n??:? runModuleUnitTests [0x42c255]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 0;\n\tlong[] max_prod_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_prod_arr[i] = v;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(w < v)\n\t\t\t\tmax_prod_arr[i] = max(max_prod_arr[i], w * v);\n\t\t}\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmphwzjh7f8.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmphwzjh7f8.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwzjh7f8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp3zkgqkmf.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp3zkgqkmf.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zkgqkmf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product /= current_max;\n\t\t\tcurrent_product *= i;\n\t\t\tcurrent_max = i;\n\t\t}\n\t\tmax_product = max(max_product, current_product);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmppw565ujn.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw565ujn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\twhile (max_index != -1)\n\t{\n\t\twriteln(arr[max_index]);\n\t\tmax_index = max_product_index_prev[max_index];\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpqmcsb7_6.d(48): Error: `writeln` is not defined, perhaps `import std.stdio;` is needed?\n/tmp/tmpqmcsb7_6.d(49): Error: cannot implicitly convert expression `max_product_index_prev[cast(ulong)max_index]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmcsb7_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong last_num = arr[0];\n\tforeach(num; arr)\n\t{\n\t\tif(num > last_num)\n\t\t{\n\t\t\tcurr_product *= num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr_product = num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\tlast_num = num;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmppk_j8dqi.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmppk_j8dqi.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppk_j8dqi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_ = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_ = max(max_, dp[j]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_ * arr[i];\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpmpgveugh.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpmpgveugh.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpgveugh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong prev_product = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tcurr_product = max(elem, elem * prev_product);\n\t\tmax_product = max(max_product, curr_product);\n\t\tprev_product = curr_product;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpjkkw0qqf.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpjkkw0qqf.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkkw0qqf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu2g0zy7a.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42846d]\n??:? void tmpu2g0zy7a.__unittest_L41_C1() [0x428101]\n??:? void tmpu2g0zy7a.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c527]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430645]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]\n??:? runModuleUnitTests [0x42c2fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428930]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax = max(max, product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpy9ns9cft.d(16): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9ns9cft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpja4tk0l6.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpja4tk0l6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpja4tk0l6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpjk9vwqsb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjk9vwqsb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk9vwqsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdxr8y1p4.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxr8y1p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t\tmax_product_arr[i] = arr[i];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpn4h2673c.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4h2673c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpxx4lv99k.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpxx4lv99k.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx4lv99k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpztjdewhb.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpztjdewhb.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztjdewhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tlong temp = max;\n\t\t\tmax = min;\n\t\t\tmin = temp;\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpfnqx4ng0.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpfnqx4ng0.d(23): Error: function expected before `()`, not `min` of type `long`\n/tmp/tmpfnqx4ng0.d(25): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnqx4ng0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp32v4iuvd.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp32v4iuvd.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32v4iuvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurr_prod *= i;\n\t\tmax_prod = max(max_prod, curr_prod);\n\t}\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpo4qac2jc.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4qac2jc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpejyiz7c3.d(15): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpejyiz7c3.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejyiz7c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_num = arr[0];\n\tlong min_num = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * i, i);\n\t\t\tmin_num = min(min_num * i, i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_num = max(min_num * i, i);\n\t\t\tmin_num = min(max_num * i, i);\n\t\t}\n\t\tmax_product = max(max_product, max_num);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpfy1f9n6_.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfy1f9n6_.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpfy1f9n6_.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfy1f9n6_.d(22): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpfy1f9n6_.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy1f9n6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tint n = arr.length;\n\tlong[] max_product = new long[n];\n\tmax_product[0] = arr[0];\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product[n-1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdwkayxhe.d(9): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpdwkayxhe.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwkayxhe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_so_far = 0;\n\tlong max_product_index_so_far = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\tif (max_product_so_far < max_product[i]) \n\t\t{\n\t\t\tmax_product_so_far = max_product[i];\n\t\t\tmax_product_index_so_far = i;\n\t\t}\n\t}\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvtb1f9nb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmpvtb1f9nb.__unittest_L33_C1() [0x428059]\n??:? void tmpvtb1f9nb.__modtest() [0x428148]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c47f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b312]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43059d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430529]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]\n??:? runModuleUnitTests [0x42c255]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_prod_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1]*arr[i], min_prod[i-1]*arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1]*arr[i], min_prod[i-1]*arr[i]), arr[i]);\n\t\tmax_prod_so_far = max(max_prod_so_far, max_prod[i]);\n\t}\n\treturn max_prod_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpaa1uttub.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpaa1uttub.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpaa1uttub.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaa1uttub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpux_n85qv.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpux_n85qv.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpux_n85qv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpfzn_hb2s.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfzn_hb2s.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzn_hb2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max_product = 1;\n    long max_product_so_far = 1;\n    long min_product_so_far = 1;\n    foreach(i; arr)\n    {\n        if (i > 0)\n        {\n            max_product_so_far *= i;\n            min_product_so_far *= i;\n        }\n        else if (i == 0)\n        {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        }\n        else\n        {\n            long temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if (max_product_so_far > max_product)\n        {\n            max_product = max_product_so_far;\n        }\n    }\n    return max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpwb526_0f.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb526_0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp18jrs886.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmp18jrs886.__unittest_L48_C1() [0x428191]\n??:? void tmp18jrs886.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(max(max[i - 1] * arr[i], min[i - 1] * arr[i]), arr[i]);\n\t\tmin[i] = min(min(max[i - 1] * arr[i], min[i - 1] * arr[i]), arr[i]);\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp3m3j3v_q.d(17): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmp3m3j3v_q.d(18): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmp3m3j3v_q.d(19): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m3j3v_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpihmta2ua.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpihmta2ua.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihmta2ua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_arr[i] = max(arr[i], max_arr[i - 1] * arr[i]);\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t\tif (product == 0) \n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmppqvzxheo.d(15): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppqvzxheo.d(20): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqvzxheo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpa8uwotcg.d(14): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa8uwotcg.d(15): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8uwotcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[i] == dp[j] + 1) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpl3uzupd_.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpl3uzupd_.d(31): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3uzupd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i, v; arr)\n\t{\n\t\tif(v > dp[i])\n\t\t{\n\t\t\tdp[i] = v;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdp[i] = dp[i-1];\n\t\t}\n\t\tmax = max(max, dp[i] * v);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpscmequur.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscmequur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[i] < dp[j] * arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] * arr[i];\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp_m0_ov7i.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_m0_ov7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tlong prev_prod = 1;\n\tlong prev_max_prod = 1;\n\tlong prev_min_prod = 1;\n\tlong curr_max_prod = 1;\n\tlong curr_min_prod = 1;\n\t\n\tforeach(num; arr)\n\t{\n\t\tcurr_prod = num;\n\t\tcurr_max_prod = max(curr_prod, max(prev_max_prod * curr_prod, prev_min_prod * curr_prod));\n\t\tcurr_min_prod = min(curr_prod, min(prev_max_prod * curr_prod, prev_min_prod * curr_prod));\n\t\t\n\t\tprev_max_prod = curr_max_prod;\n\t\tprev_min_prod = curr_min_prod;\n\t\t\n\t\tmax_prod = max(max_prod, curr_max_prod);\n\t}\n\t\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpbu98zx83.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpbu98zx83.d(21): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpbu98zx83.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu98zx83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, dp[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp93hs_4e3.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp93hs_4e3.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93hs_4e3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;i..arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k;i..j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max,product);\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpk_1gik_2.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_1gik_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], max_product_arr_rev[i+1] * arr[i]);\n\t}\n\t\n\tlong max_product = max_product_arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\tfor(int i = 1; i < arr.length-1; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i-1] * max_product_arr_rev[i+1]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpzg101tix.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzg101tix.d(20): Error: cannot implicitly convert expression `arr.length - 2LU` of type `ulong` to `int`\n/tmp/tmpzg101tix.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzg101tix.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzg101tix.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzg101tix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, e; arr)\n\t{\n\t\tmax_product_arr[i] = e;\n\t\tforeach(j, f; arr[0..i])\n\t\t{\n\t\t\tif(e > f)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], e * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpo62inwyk.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpo62inwyk.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo62inwyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\t\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp8mwt59_k.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8mwt59_k.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp8mwt59_k.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mwt59_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjmgoj01q.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmpjmgoj01q.__unittest_L21_C1() [0x427dd5]\n??:? void tmpjmgoj01q.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430155]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430604]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af99]\n??:? runModuleUnitTests [0x42bf05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428594]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc8_evxbk.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmpc8_evxbk.__unittest_L43_C1() [0x4280c1]\n??:? void tmpc8_evxbk.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b351]\n??:? runModuleUnitTests [0x42c2bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp743xhogb.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp743xhogb.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp743xhogb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max_product)\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps5oxbgln.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmps5oxbgln.__unittest_L33_C1() [0x427e9d]\n??:? void tmps5oxbgln.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b15a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b131]\n??:? runModuleUnitTests [0x42c09d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > max_element)\n\t\t\tmax_element = elem;\n\t\t\n\t\tproduct *= elem;\n\t\t\n\t\tif(product > max_product)\n\t\t\tmax_product = product;\n\t\telse if(product == 0)\n\t\t\tproduct = 1;\n\t}\n\t\n\tif(max_product == 1)\n\t\treturn max_element;\n\telse\n\t\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdrzqqtgc.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpdrzqqtgc.__unittest_L31_C1() [0x427e21]\n??:? void tmpdrzqqtgc.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_z96klqv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp_z96klqv.__unittest_L19_C1() [0x427dcd]\n??:? void tmp_z96klqv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_z96klqv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp_z96klqv.__unittest_L19_C1() [0x427dcd]\n??:? void tmp_z96klqv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\tlong max_product = 0;\n\tlong max_product_index = 0;\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product_arr[i] < max_product_arr[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product < max_product_arr[i]) \n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t\tmax_product_index = i;\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0swni2xz.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmp0swni2xz.__unittest_L43_C1() [0x4280b9]\n??:? void tmp0swni2xz.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9bjknfcj.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp9bjknfcj.__unittest_L44_C1() [0x428105]\n??:? void tmp9bjknfcj.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\tlong m = 0;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(w < v)\n\t\t\t\tm = max(m, dp[j]);\n\t\t}\n\t\tdp[i] = m * v;\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpse0m7_fk.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpse0m7_fk.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpse0m7_fk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyryqfwnt.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpyryqfwnt.__unittest_L43_C1() [0x4280b9]\n??:? void tmpyryqfwnt.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430589]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_z96klqv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp_z96klqv.__unittest_L19_C1() [0x427dcd]\n??:? void tmp_z96klqv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tmax_prod[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_prod[i] = max(max_prod[i], max_prod[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpsti53pti.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsti53pti.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsti53pti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_so_far *= arr[i];\n\t\t\tmin_so_far = min(min_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * arr[i], 1);\n\t\t\tmin_so_far = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpr55lo5eq.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpr55lo5eq.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr55lo5eq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong maxProduct = 1;\n\tlong max = arr[0];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > max) \n\t\t{\n\t\t\tmax = arr[i];\n\t\t\tmaxProduct *= arr[i];\n\t\t}\n\t}\n\treturn maxProduct;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgtiowwb.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ad]\n??:? void tmpvgtiowwb.__unittest_L21_C1() [0x427e3d]\n??:? void tmpvgtiowwb.__modtest() [0x427f2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428670]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "/tmp/tmpthd090ky.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpthd090ky.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthd090ky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_prev_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_prev_value = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product_value < max_product[j]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\t\tmax_product_index_value = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = max_product_index_value;\n\t\tmax_product_prev[i] = i;\n\t}\n\t\n\tmax_product_value = 0;\n\tmax_product_index_value = 0;\n\tmax_product_prev_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product_value < max_product[i]) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\tmax_product_prev_value = max_product_index[max_product_index_value\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpamv1ygwp.d(57): Error: found `unittest` when expecting `,`\n/tmp/tmpamv1ygwp.d(65): Error: found `void` when expecting `,`\n/tmp/tmpamv1ygwp.d(65): Error: found `{` when expecting `,`\n/tmp/tmpamv1ygwp.d(65): Error: expression expected, not `}`\n/tmp/tmpamv1ygwp.d(65): Error: found `End of File` when expecting `,`\n/tmp/tmpamv1ygwp.d(65): Error: found `End of File` when expecting `]`\n/tmp/tmpamv1ygwp.d(65): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpamv1ygwp.d(65): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamv1ygwp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp32v4iuvd.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp32v4iuvd.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32v4iuvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpu5bj4di6.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5bj4di6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpur9o_cqk.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpur9o_cqk.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpur9o_cqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpy1msxizr.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpy1msxizr.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1msxizr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_m9y3n8e.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmp_m9y3n8e.__unittest_L24_C1() [0x427de1]\n??:? void tmp_m9y3n8e.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c137]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43015d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43060c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa1]\n??:? runModuleUnitTests [0x42bf0d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42859c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpxqchz12b.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpxqchz12b.d(28): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqchz12b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = 1;\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = product * arr[i];\n\t\tmax = max(max, product * dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpr7mxdzgv.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpr7mxdzgv.d(24): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7mxdzgv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = 1;\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, products[i]);\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpjgeuj50l.d(24): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjgeuj50l.d(31): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgeuj50l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_back = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_back[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_back[i] = i;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_back[i] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = 0;\n\tint max_index = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv35qq4i6.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmpv35qq4i6.__unittest_L49_C1() [0x428159]\n??:? void tmpv35qq4i6.__modtest() [0x428248]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c57f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b412]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43069d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430629]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3e9]\n??:? runModuleUnitTests [0x42c355]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428988]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\treturn max_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpngi8alji.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpngi8alji.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpngi8alji.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngi8alji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpknwtjgxg.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpknwtjgxg.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknwtjgxg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_num = 0;\n\tlong min_num = 0;\n\t\n\tforeach(num; arr)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * num, num);\n\t\t\tmin_num = min(min_num * num, num);\n\t\t}\n\t\telse if(num == 0)\n\t\t{\n\t\t\tmax_num = 0;\n\t\t\tmin_num = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_num;\n\t\t\tmax_num = max(min_num * num, num);\n\t\t\tmin_num = min(temp * num, num);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_num);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpl003juai.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpl003juai.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpl003juai.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpl003juai.d(30): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpl003juai.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl003juai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_products[i] = v;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpilz2zksz.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpilz2zksz.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilz2zksz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tint current_length = 1;\n\tint max_length = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcurrent_product *= i;\n\t\t\tcurrent_length++;\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t\tmax_product = current_product;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product = 1;\n\t\t\tcurrent_length = 1;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyt8t2dhy.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpyt8t2dhy.__unittest_L34_C1() [0x427df9]\n??:? void tmpyt8t2dhy.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1]*arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], max_product_arr_rev[i+1]*arr[i]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]*max_product_arr_rev[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp2ondn3cq.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2ondn3cq.d(21): Error: cannot implicitly convert expression `arr.length - 2LU` of type `ulong` to `int`\n/tmp/tmp2ondn3cq.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2ondn3cq.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ondn3cq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] dp = new long[arr.length];\n\tlong max = arr[0];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmptktsqmz5.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmptktsqmz5.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptktsqmz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpayfw460a.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpayfw460a.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayfw460a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong result = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tresult = max(result, max[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdsfgkjgc.d(16): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpdsfgkjgc.d(17): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpdsfgkjgc.d(18): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsfgkjgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpijk_3xon.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpijk_3xon.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijk_3xon.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdxbhfpst.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdxbhfpst.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxbhfpst.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[j] < arr[i]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpjtdyozit.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjtdyozit.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjtdyozit.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp3nda557y.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp3nda557y.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nda557y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproduct = products[j] * arr[i];\n\t\t\t\tif (product > products[i])\n\t\t\t\t{\n\t\t\t\t\tproducts[i] = product;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (arr[i] > products[i])\n\t\t{\n\t\t\tproducts[i] = arr[i];\n\t\t}\n\t\tif (products[i] > max)\n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw5kiikza.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428355]\n??:? void tmpw5kiikza.__unittest_L36_C1() [0x427fe5]\n??:? void tmpw5kiikza.__modtest() [0x4280d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c40f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43052d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]\n??:? runModuleUnitTests [0x42c1e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428818]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t\tproduct = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_element;\n\t\t\tmax_element = max(min_element * elem, elem);\n\t\t\tmin_element = min(temp * elem, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpdgaaaae3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdgaaaae3.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpdgaaaae3.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdgaaaae3.d(32): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpdgaaaae3.d(36): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgaaaae3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_arr[i] < max_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_arr[i] > max)\n\t\t{\n\t\t\tmax = max_arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmple56wsfv.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428375]\n??:? void tmple56wsfv.__unittest_L35_C1() [0x428009]\n??:? void tmple56wsfv.__modtest() [0x4280f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c42f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43054d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b299]\n??:? runModuleUnitTests [0x42c205]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428838]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = arr[0];\n\tlong min_so_far = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_so_far = max(max_so_far * arr[i], arr[i]);\n\t\t\tmin_so_far = min(min_so_far * arr[i], arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * arr[i], arr[i]);\n\t\t\tmin_so_far = min(temp * arr[i], arr[i]);\n\t\t}\n\t\tmax_product = max(max_product, max_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpzwryz8ea.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzwryz8ea.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpzwryz8ea.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzwryz8ea.d(23): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpzwryz8ea.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwryz8ea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_index_value = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_index[i] = i;\n\t}\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif(max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_index[i] = max_product_index_index[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = max_product_index[i];\n\t\t\tmax_product_index_index_value = max_product_index_index[i];\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeubgzx6g.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmpeubgzx6g.__unittest_L48_C1() [0x428145]\n??:? void tmpeubgzx6g.__modtest() [0x428234]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 0;\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp9oh0wum3.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9oh0wum3.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oh0wum3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmps99cs2h8.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmps99cs2h8.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps99cs2h8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\t\n\t\tdp[i] = v;\n\t\t\n\t\tforeach(j, w; dp[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t\tdp[i] = max(dp[i], v*w);\n\t\t}\n\t\t\n\t\tmax = max(max, dp[i]);\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpys0im93n.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpys0im93n.d(25): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpys0im93n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong prev = arr[0];\n\tforeach(i; 1 .. arr.length) \n\t{\n\t\tif(arr[i] > prev) \n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_product = max(max_product, product);\n\t\t\tproduct = arr[i];\n\t\t}\n\t\tprev = arr[i];\n\t}\n\treturn max(max_product, product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpccv9c0bq.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpccv9c0bq.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpccv9c0bq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmplyouaa8q.d(16): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmplyouaa8q.d(17): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmplyouaa8q.d(18): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyouaa8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmp5f2zxibq.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5f2zxibq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmppebsu8p0.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppebsu8p0.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppebsu8p0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far = min(min_product_so_far * i, 1);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpsnv76o4y.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpsnv76o4y.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsnv76o4y.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnv76o4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_so_far = 0;\n\tlong max_ending_here = 0;\n\tlong min_ending_here = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_ending_here = 0;\n\t\t\tmin_ending_here = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_so_far < max_ending_here)\n\t\t{\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\t\n\treturn max_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpsz9bj4o4.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpsz9bj4o4.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz9bj4o4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp8l4d0lt_.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8l4d0lt_.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8l4d0lt_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tlong current_min = arr[0];\n\t\n\tforeach(i,v;arr)\n\t{\n\t\tif(v > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max*v,v);\n\t\t\tcurrent_min = min(current_min*v,v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = current_max;\n\t\t\tcurrent_max = max(current_min*v,v);\n\t\t\tcurrent_min = min(temp*v,v);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product,current_max);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp9i111aof.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9i111aof.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp9i111aof.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9i111aof.d(25): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp9i111aof.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i111aof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max_product_so_far = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmphghsz9hi.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmphghsz9hi.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphghsz9hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tmax_prod[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max_prod[i - 1] * arr[i]);\n\t\tmax = max(max, max_prod[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp13pye88x.d(14): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp13pye88x.d(15): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13pye88x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmprewm4rko.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmprewm4rko.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprewm4rko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp7p0061ea.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp7p0061ea.d(28): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7p0061ea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp5ekg5iso.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp5ekg5iso.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ekg5iso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmphvkb23i7.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmphvkb23i7.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvkb23i7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tmax_products[i] = max(arr[i], max_products[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmpp58zu_8u.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpp58zu_8u.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp58zu_8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp1smh37vi.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1smh37vi.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp1smh37vi.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1smh37vi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp4c5oufvw.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4c5oufvw.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c5oufvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(arr[i], max_arr[i-1]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct *= max_arr[i];\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp0ro2w076.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0ro2w076.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ro2w076.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp0cpeec1h.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0cpeec1h.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cpeec1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[j] == dp[i] - 1)\n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax = max(max, product * arr[i]);\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmph2d_34na.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmph2d_34na.d(33): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2d_34na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpqv_2o04x.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpqv_2o04x.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqv_2o04x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tlong temp = max;\n\t\t\tmax = min;\n\t\t\tmin = temp;\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmpfwe63jh_.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpfwe63jh_.d(23): Error: function expected before `()`, not `min` of type `long`\n/tmp/tmpfwe63jh_.d(25): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwe63jh_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpjk9vwqsb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjk9vwqsb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk9vwqsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmpknwtjgxg.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpknwtjgxg.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknwtjgxg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpewkv_zwu.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpewkv_zwu.__unittest_L41_C1() [0x428095]\n??:? void tmpewkv_zwu.__modtest() [0x428184]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp1itr_8ke.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1itr_8ke.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_count = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_count_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_count[i] = 1;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_count[i] = max_product_index_count[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t\tmax_product_index_count_value = max_product_index_count[i];\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz1uy2uqc.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpz1uy2uqc.__unittest_L45_C1() [0x428129]\n??:? void tmpz1uy2uqc.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmpu6hdyomu.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpu6hdyomu.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6hdyomu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpz9omk0r1.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpz9omk0r1.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9omk0r1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] result = new long[arr.length];\n\t\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tresult[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tresult[i] = max(result[i - 1], max[i]);\n\t}\n\t\n\treturn result[arr.length - 1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmpezl10_tb.d(19): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpezl10_tb.d(20): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpezl10_tb.d(21): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezl10_tb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[j] > arr[i]) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t\tproducts[i] = product;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < products.length; i++) \n\t{\n\t\tif (products[i] > max) \n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpns2kur1b.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42825d]\n??:? void tmpns2kur1b.__unittest_L33_C1() [0x427eed]\n??:? void tmpns2kur1b.__modtest() [0x427fdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430435]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428720]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong result = 0;\n\tlong[] max_product = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tresult = max(result, max_product[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "/tmp/tmp4ij_lymz.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4ij_lymz.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ij_lymz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}