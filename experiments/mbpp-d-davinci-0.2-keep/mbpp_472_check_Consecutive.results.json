{
  "name": "mbpp_472_check_Consecutive",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpo9ur3ddn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9ur3ddn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmplqvybfx2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqvybfx2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpo9ur3ddn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9ur3ddn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpubmr4a9a.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubmr4a9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0 .. l2.length - 1)\n\t{\n\t\tif(l2[i] + 1 != l2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp64q2z9bt.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64q2z9bt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpubmr4a9a.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubmr4a9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif (n <= 1)\n\t\treturn false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpijfy3lvm.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijfy3lvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpszuva1r_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszuva1r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint len = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor (int i = 1; i < len; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == len) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpzzc9i243.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpzzc9i243.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzzc9i243.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzzc9i243.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpzzc9i243.d(21): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzc9i243.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif(n < 1) \n\t\treturn false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpgxkvk_sc.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpgxkvk_sc.d(13): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpgxkvk_sc.d(14): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpgxkvk_sc.d(16): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxkvk_sc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif (l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdi062ofi.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi062ofi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif(i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp4s8ma4oz.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4s8ma4oz.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4s8ma4oz.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp4s8ma4oz.d(19): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s8ma4oz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpnbi8uvzn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbi8uvzn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif (n < 1)\n\t\treturn false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach (int i; l)\n\t{\n\t\tif (i < min)\n\t\t\tmin = i;\n\t\tif (i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif (max - min + 1 == n)\n\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdtbvcore.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpdtbvcore.d(13): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpdtbvcore.d(14): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpdtbvcore.d(16): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtbvcore.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpwxfab6jt.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxfab6jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpklisiszz.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklisiszz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpx3glarpe.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpx3glarpe.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpx3glarpe.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpx3glarpe.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpx3glarpe.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3glarpe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i != l[0] + 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpdydyjj7o.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdydyjj7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpnbi8uvzn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbi8uvzn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif (i != l[0] + l.indexOf(i))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpqg3t58z_.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpqg3t58z_.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg3t58z_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpb2fuuuio.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2fuuuio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpuo9q_00f.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpuo9q_00f.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpuo9q_00f.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpuo9q_00f.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo9q_00f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(int i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpx9nu2seb.d(10): Error: no property `sort` for type `long[]`\n/tmp/tmpx9nu2seb.d(11): Error: cannot implicitly convert expression `temp.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9nu2seb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp330gfvj_.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp330gfvj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpwe2m7u5j.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwe2m7u5j.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwe2m7u5j.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpwe2m7u5j.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwe2m7u5j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpz8pmtnpu.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8pmtnpu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(abs(l[i] - l[i+1]) != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpijuv123y.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijuv123y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpwli6_c2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwli6_c2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tforeach(i; 0 .. sorted.length - 1)\n\t{\n\t\tif(sorted[i] + 1 != sorted[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp6jlnx7es.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jlnx7es.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(long i; temp)\n\t{\n\t\tif(temp[i] != temp[i+1] - 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpxzwr79ti.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzwr79ti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpiorl4jq_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiorl4jq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpo9ur3ddn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9ur3ddn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] != l[i]+1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp7yhnqgag.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yhnqgag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp4sl41ah3.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4sl41ah3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif (i < min)\n\t\t\tmin = i;\n\t\tif (i > max)\n\t\t\tmax = i;\n\t}\n\tif (max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpfod7wt1l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfod7wt1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp9z0izc83.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z0izc83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmph7fdau5s.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7fdau5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tfor(int i = 0; i < l.length - 1; i++)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmps07w3m2y.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps07w3m2y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(int i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp3lh2x_lw.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp3lh2x_lw.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lh2x_lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(int i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpkp7vdmj3.d(10): Error: no property `sort` for type `long[]`\n/tmp/tmpkp7vdmj3.d(11): Error: cannot implicitly convert expression `temp.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp7vdmj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1]-temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp7zgtgsv4.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zgtgsv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tif (l.length == 0)\n\t\treturn false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tforeach(long i; l)\n\t{\n\t\tif (i < min)\n\t\t\tmin = i;\n\t\tif (i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif (max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpzn1uk3e8.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpzn1uk3e8.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn1uk3e8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tforeach(long i; 0 .. sorted.length - 1)\n\t{\n\t\tif(sorted[i + 1] - sorted[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmppsjnz8l2.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsjnz8l2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp6h317iws.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6h317iws.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6h317iws.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp6h317iws.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6h317iws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tforeach(i; 0 .. sorted.length - 1)\n\t{\n\t\tif(sorted[i] + 1 != sorted[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmptxz6ru53.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxz6ru53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpiorl4jq_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiorl4jq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpceh7f5zh.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceh7f5zh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(long i; temp)\n\t{\n\t\tif(i != temp[0])\n\t\t{\n\t\t\tif(abs(i - temp[0]) != 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ttemp = temp[1..$];\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpqu7lz668.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqu7lz668.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(long i; temp)\n\t{\n\t\tif(i != temp[0])\n\t\t{\n\t\t\tif(abs(i - temp[0]) != 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp8fiwhtwk.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fiwhtwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(int i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpllzn7dh4.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpllzn7dh4.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllzn7dh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i + 1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpjzk11g0a.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzk11g0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;1..l.length-1)\n\t{\n\t\tif(l[i] - l[i-1] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpl6shusmh.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6shusmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tif (l.length < 2)\n\t\treturn true;\n\t\n\tsort(l);\n\t\n\tforeach (i; 1 .. l.length)\n\t{\n\t\tif (l[i] - l[i - 1] != 1)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpm45a4_n0.d(12): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm45a4_n0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min) min = i;\n\t\tif(i > max) max = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp_ermw61c.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp_ermw61c.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp_ermw61c.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ermw61c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(int i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpkt4vy708.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpkt4vy708.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt4vy708.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1) \n\t{\n\t\tif(l[i+1]-l[i] != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp79hc7j9_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79hc7j9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i - l[0] != 1)\n\t\t\t\treturn false;\n\t\t}\n\t\tl[0] = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp7_vhqrts.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_vhqrts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(int i; 0..l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpfvguzni4.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpfvguzni4.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvguzni4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp26yr5lrl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26yr5lrl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpofxmljm3.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofxmljm3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tsort(l);\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpajjj7iih.d(9): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajjj7iih.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(l2[i] != l2[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp1npz11_b.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1npz11_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(i != l2[0])\n\t\t{\n\t\t\tif(i - l2[0] != 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tl2[0] = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpbm2j_d2m.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbm2j_d2m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpb2fuuuio.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2fuuuio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpwl4xqvlk.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpwl4xqvlk.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwl4xqvlk.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwl4xqvlk.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpwl4xqvlk.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwl4xqvlk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(long i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i != l[0] + 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpfnfactf1.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnfactf1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif(n < 1)\n\t\treturn false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif(max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp9ij53bpt.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9ij53bpt.d(13): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp9ij53bpt.d(14): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp9ij53bpt.d(19): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp9ij53bpt.d(21): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ij53bpt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif (n < 1) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach(int i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\t\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmprmt8fawn.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmprmt8fawn.d(15): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprmt8fawn.d(16): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprmt8fawn.d(18): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmt8fawn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1) \n\t{\n\t\tif(temp[i + 1] - temp[i] != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp0gy4lxix.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gy4lxix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(l2[i] != l2[i+1] - 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp67x10n9g.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67x10n9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp9z0izc83.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z0izc83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i + 1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpe_4c51c3.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_4c51c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tforeach(i; 0 .. sorted.length - 1)\n\t{\n\t\tif(sorted[i] + 1 != sorted[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmptxz6ru53.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxz6ru53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpszuva1r_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszuva1r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(int i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpsfniel3q.d(10): Error: no property `sort` for type `long[]`\n/tmp/tmpsfniel3q.d(11): Error: cannot implicitly convert expression `l2.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfniel3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\t// sort the list\n\tsort(l);\n\t\n\t// check if the list is consecutive\n\tforeach(int i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp8xij4s1k.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8xij4s1k.d(13): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xij4s1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp_7f_0gbc.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7f_0gbc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i]+1 != l[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpfkwllwx8.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkwllwx8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(l2[i] != l2[i+1] - 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp67x10n9g.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67x10n9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tlong diff = temp[0] - temp[1];\n\tfor (int i = 1; i < temp.length; i++) \n\t{\n\t\tif (temp[i] - temp[i + 1] != diff) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmplndijzff.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplndijzff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l;\n\tl2.sort;\n\tforeach(i; 0 .. l2.length - 1)\n\t{\n\t\tif(l2[i] + 1 != l2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmps3439pcq.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3439pcq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(e; l)\n\t{\n\t\tif(e < min)\n\t\t\tmin = e;\n\t\tif(e > max)\n\t\t\tmax = e;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpuwqcusqs.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpuwqcusqs.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwqcusqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(i != l2[0])\n\t\t{\n\t\t\tif(abs(i - l2[0]) != 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tl2[0] = i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp5jwvlwop.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jwvlwop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i+1]-temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplheacf01.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplheacf01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpiorl4jq_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiorl4jq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach (i; l)\n\t{\n\t\tif (i != l[0] + l.indexOf(i))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp7_yj0amm.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp7_yj0amm.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_yj0amm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint[] temp = new int[l.length];\n\tforeach(int i; l)\n\t\ttemp ~= i;\n\tsort(temp);\n\tforeach(int i; temp)\n\t{\n\t\tif(i != temp[0])\n\t\t\treturn false;\n\t\ttemp[0]++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp_7mzbl59.d(10): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\n/tmp/tmp_7mzbl59.d(12): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7mzbl59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpubmr4a9a.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubmr4a9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(i,e;l2)\n\t{\n\t\tif(e != l2[0]+i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp4fd_snh4.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fd_snh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp9z0izc83.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z0izc83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif (n < 1)\n\t\treturn true;\n\t\n\tsort(l);\n\t\n\tint d = l[1] - l[0];\n\tfor (int i = 2; i < n; i++)\n\t{\n\t\tif (l[i] - l[i - 1] != d)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpif464bom.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpif464bom.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpif464bom.d(15): Error: cannot implicitly convert expression `l[1] - l[0]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpif464bom.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpwxfab6jt.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxfab6jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif(i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tlong min = sorted[0];\n\tlong max = sorted[$-1];\n\tlong diff = max - min;\n\tif (diff == $-1) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpz0yf8yoc.d(14): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0yf8yoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpubmr4a9a.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubmr4a9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0 .. l2.length - 1)\n\t{\n\t\tif(abs(l2[i] - l2[i + 1]) != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmparma56m6.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparma56m6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpbg2pjnco.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpbg2pjnco.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpbg2pjnco.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbg2pjnco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmphrou6whp.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphrou6whp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(int i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpyd4ge_sg.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpyd4ge_sg.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd4ge_sg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tif (l.length < 2)\n\t\treturn false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tforeach (e; l)\n\t{\n\t\tif (e < min)\n\t\t\tmin = e;\n\t\tif (e > max)\n\t\t\tmax = e;\n\t}\n\t\n\tif (max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length)\n\t{\n\t\tif(l[i] != l[0] + i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpmian_ds5.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmian_ds5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplf7h80rn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplf7h80rn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp_5y6gk10.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_5y6gk10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmps5ez7j97.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ez7j97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] s = l.dup;\n\ts.sort;\n\tforeach(i; 0 .. s.length - 1)\n\t{\n\t\tif(s[i + 1] - s[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp38pqnhp4.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38pqnhp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i] != l[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp9pl14e11.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pl14e11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpe5dee6wv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5dee6wv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplkda6he8.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkda6he8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tsort(l);\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpa79u440i.d(9): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa79u440i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp330gfvj_.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp330gfvj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint[] arr = new int[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tarr[i] = (int)l[i];\n\t}\n\tint min = min(arr);\n\tint max = max(arr);\n\tif(max - min + 1 == arr.length)\n\t{\n\t\tfor(int i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif(arr[i] < min || arr[i] > max)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp7hj331ey.d(12): Error: C style cast illegal, use `cast(int)l[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hj331ey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpb2fuuuio.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2fuuuio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpi6sjmfxv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6sjmfxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp421uhu5f.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp421uhu5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length)\n\t{\n\t\tif(i+1 < l.length)\n\t\t{\n\t\t\tif(l[i] + 1 != l[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmps3mizn6g.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3mizn6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpbg2pjnco.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpbg2pjnco.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpbg2pjnco.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbg2pjnco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif (n < 1) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach(int i; l)\n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpdqfezkne.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpdqfezkne.d(15): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpdqfezkne.d(16): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpdqfezkne.d(18): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqfezkne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpwaqv8v1l.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaqv8v1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpq1gumr2e.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1gumr2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tsort(l);\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpa1xsia3l.d(9): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1xsia3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tif(l.length < 2)\n\t\treturn false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint[] temp = new int[l.length];\n\tint[] temp2 = new int[l.length];\n\tint[] temp3 = new int[l.length];\n\tint[] temp4 = new int[l.length];\n\tint[] temp5 = new int[l.length];\n\tint[] temp6 = new int[l.length];\n\tint[] temp7 = new int[l.length];\n\tint[] temp8 = new int[l.length];\n\tint[] temp9 = new int[l.length];\n\tint[] temp10 = new int[l.length];\n\tint[] temp11 = new int[l.length];\n\tint[] temp12 = new int[l.length];\n\tint[] temp13 = new int[l.length];\n\tint[] temp14 = new int[l.length];\n\tint[] temp15 = new int[l.length];\n\tint[] temp16 = new int[l.length];\n\tint[] temp17 = new int[l.length];\n\tint[] temp18 = new int[l.length];\n\tint[] temp19 = new int[l.length];\n\tint[] temp20 = new int[l.length];\n\tint[] temp21 = new int[l.length];\n\tint[] temp22 = new int[l.length];\n\tint[] temp23 = new int[l.length];\n\tint[] temp24 = new int[l.length];\n\tint[] temp25 = new int[l.length];\n\tint[] temp26 = new int[l.length];\n\tint[] temp27 = new int[l.length];\n\tint[] temp28 = new int[l.length];\n\tint[] temp29 = new int[l.length];\n\tint[] temp30 = new int[l.length];\n\tint[] temp31 = new int[l.length];\n\tint[] temp32 = new int[l.length];\n\tint[] temp33 = new int[l.length];\n\tint[] temp34 = new int[l.length];\n\tint[] temp35 =\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplaipuox6.d(48): Error: expression expected, not `unittest`\n/tmp/tmplaipuox6.d(49): Error: semicolon expected, not `{`\n/tmp/tmplaipuox6.d(56): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaipuox6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmph7fdau5s.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7fdau5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpuwqcusqs.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpuwqcusqs.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwqcusqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif(n < 1) return false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tforeach(long i; l)\n\t{\n\t\tif(i < min) min = i;\n\t\tif(i > max) max = i;\n\t}\n\t\n\tif(max - min + 1 == n) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp85es0vs9.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85es0vs9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpubmr4a9a.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpubmr4a9a.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubmr4a9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp330gfvj_.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp330gfvj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpiorl4jq_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiorl4jq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n    long[] sorted = l.dup;\n    sorted.sort;\n    foreach(i; 0..sorted.length-1)\n    {\n        if(abs(sorted[i] - sorted[i+1]) != 1)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp1t_188s1.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t_188s1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp32__3qk2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32__3qk2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif(n < 1) return false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(l[i] < min) min = l[i];\n\t\tif(l[i] > max) max = l[i];\n\t}\n\t\n\tif(max - min + 1 == n) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpiekl293i.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiekl293i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpo9ur3ddn.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9ur3ddn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min) min = i;\n\t\tif(i > max) max = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp7qek16uo.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qek16uo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i] != l[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp9pl14e11.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pl14e11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp6h317iws.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6h317iws.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6h317iws.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp6h317iws.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6h317iws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpe5dee6wv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5dee6wv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsort(sorted);\n\tforeach(long i; 0..sorted.length-1)\n\t{\n\t\tif(sorted[i+1] - sorted[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmplt4fsnxz.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplt4fsnxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(int i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpilf_baj6.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmpilf_baj6.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilf_baj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsorted.sort;\n\tforeach(long i; 0 .. sorted.length - 1)\n\t{\n\t\tif(sorted[i] != sorted[i + 1] - 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpc3kjpqh_.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3kjpqh_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpic1xsstz.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic1xsstz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpa7jzj34g.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7jzj34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tsort(l);\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8j0xr6dm.d(9): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8j0xr6dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpceh7f5zh.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceh7f5zh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l[0..$];\n\tsort(l2);\n\tforeach(i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp958rvbut.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp958rvbut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length)\n\t{\n\t\tif(i == l.length - 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpwrlzmr8b.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrlzmr8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tif(n < 1) return false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(l[i] < min) min = l[i];\n\t\tif(l[i] > max) max = l[i];\n\t}\n\t\n\tif(max - min + 1 == n) return true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp88b9hcrb.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp88b9hcrb.d(12): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp88b9hcrb.d(13): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp88b9hcrb.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp88b9hcrb.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88b9hcrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpf346av35.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf346av35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpee_5cdyk.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpee_5cdyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(int i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmp3lh2x_lw.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp3lh2x_lw.d(10): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lh2x_lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpofxmljm3.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofxmljm3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(i; 0 .. l2.length - 1)\n\t{\n\t\tif(l2[i + 1] - l2[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8bie8a9x.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bie8a9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; l2)\n\t{\n\t\tif(l2[i] != l2[0] + i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpjiv1iuxx.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjiv1iuxx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpofxmljm3.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofxmljm3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted = l.dup;\n\tsort(sorted);\n\tforeach(long i; 0..sorted.length-1)\n\t{\n\t\tif(sorted[i+1] - sorted[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpjcg1_7m4.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcg1_7m4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp32__3qk2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32__3qk2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] + 1 != temp[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8rsy8ipr.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rsy8ipr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp9_cgn4s9.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_cgn4s9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmplqvybfx2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqvybfx2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach (int i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp4gucwwvf.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp4gucwwvf.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4gucwwvf.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4gucwwvf.d(13): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gucwwvf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] sorted_l = l.dup.sort;\n\tforeach(i; 0 .. sorted_l.length - 1)\n\t{\n\t\tif(sorted_l[i] + 1 != sorted_l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpekkmo7gz.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekkmo7gz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpc1mod54w.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1mod54w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i-1 != l[0])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tl[0] = i;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpsxidinlo.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsxidinlo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(i;0..l2.length-1)\n\t{\n\t\tif(l2[i+1]-l2[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpoiv577st.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiv577st.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(long i; temp)\n\t{\n\t\tif(temp[i] != temp[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp8nk77dqs.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nk77dqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpiorl4jq_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiorl4jq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = min(l);\n\tint max = max(l);\n\tint[] temp = new int[max - min + 1];\n\tforeach(int i; l)\n\t{\n\t\ttemp[i - min] = 1;\n\t}\n\tforeach(int i; temp)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpn0m_1e3w.d(9): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpn0m_1e3w.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpn0m_1e3w.d(12): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0m_1e3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp1wam6t2q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wam6t2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpb2fuuuio.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2fuuuio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i]!=l[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmp4g5wgrqd.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4g5wgrqd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0..l2.length-1)\n\t{\n\t\tif(l2[i+1] - l2[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "/tmp/tmpic1xsstz.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic1xsstz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}