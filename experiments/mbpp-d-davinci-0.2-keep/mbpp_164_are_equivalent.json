{
  "name": "mbpp_164_are_equivalent",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\n*/\nbool are_equivalent(long num1, long num2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = are_equivalent;\n\n    assert(candidate(36L, 57L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(23L, 47L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\treturn sum(divisors(num1)) == sum(divisors(num2));\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = get_divisors(num1);\n\tauto divisors2 = get_divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}"
  ]
}