{
  "name": "mbpp_769_Diff",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to get the difference between two lists.\n\t\n*/\nlong[] Diff(long[] li1, long[] li2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = Diff;\n\n    assert(candidate([10L, 15L, 20L, 25L, 30L, 35L, 40L], [25L, 40L, 35L]) == [10L, 20L, 30L, 15L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 1L]) == [2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L], [6L, 7L, 1L]) == [2L, 3L, 6L, 7L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++)\n\t{\n\t\tif (li1[i] != li2[i])\n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tforeach(long i; li1)\n\t{\n\t\tif(i in li2)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tli3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tlong[] li4 = new long[li2.length];\n\tlong[] li5 = new long[li1.length];\n\tlong[] li6 = new long[li2.length];\n\t\n\tforeach(i; li1)\n\t{\n\t\tli3[i] = li1[i];\n\t}\n\t\n\tforeach(i; li2)\n\t{\n\t\tli4[i] = li2[i];\n\t}\n\t\n\tforeach(i; li3)\n\t{\n\t\tforeach(j; li4)\n\t\t{\n\t\t\tif(li3[i] == li4[j])\n\t\t\t{\n\t\t\t\tli3[i] = 0;\n\t\t\t\tli4[j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; li3)\n\t{\n\t\tif(li3[i] != 0)\n\t\t{\n\t\t\tli5 ~= li3[i];\n\t\t}\n\t}\n\t\n\tforeach(i; li4)\n\t{\n\t\tif(li4[i] != 0)\n\t\t{\n\t\t\tli6 ~= li4[i];\n\t\t}\n\t}\n\t\n\treturn li5 ~ li6;\n}",
    "{\n\tlong[] li = new long[li1.length];\n\tint i = 0;\n\tforeach(long l; li1)\n\t{\n\t\tif(l in li2)\n\t\t{\n\t\t\tli[i] = l;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn li;\n}",
    "{\n\tauto li3 = li1.dup;\n\tforeach(i; li2)\n\t{\n\t\tauto pos = li3.find(i);\n\t\tif(pos != -1)\n\t\t\tli3.remove(pos);\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++) \n\t{\n\t\tif (li1[i] != li2[i]) \n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tauto li3 = li1.dup;\n\tforeach(long i; li2)\n\t{\n\t\tif(li3.find(i) != -1)\n\t\t{\n\t\t\tli3.remove(i);\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint i = 0;\n\tforeach(long l1; li1)\n\t{\n\t\tif(l1 != li2[i])\n\t\t{\n\t\t\tli3[i] = l1;\n\t\t}\n\t\ti++;\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++)\n\t{\n\t\tif (li1[i] != li2[i])\n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tlong[] li4 = new long[li2.length];\n\t\n\tforeach(i; 0 .. li1.length)\n\t{\n\t\tli3[i] = li1[i];\n\t}\n\t\n\tforeach(i; 0 .. li2.length)\n\t{\n\t\tli4[i] = li2[i];\n\t}\n\t\n\tlong[] li5 = new long[li3.length + li4.length];\n\t\n\tforeach(i; 0 .. li3.length)\n\t{\n\t\tli5[i] = li3[i];\n\t}\n\t\n\tforeach(i; 0 .. li4.length)\n\t{\n\t\tli5[i + li3.length] = li4[i];\n\t}\n\t\n\tlong[] li6 = new long[li5.length];\n\t\n\tforeach(i; 0 .. li5.length)\n\t{\n\t\tli6[i] = li5[i];\n\t}\n\t\n\tlong[] li7 = new long[li6.length];\n\t\n\tforeach(i; 0 .. li6.length)\n\t{\n\t\tli7[i] = li6[i];\n\t}\n\t\n\tlong[] li8 = new long[li7.length];\n\t\n\tforeach(i; 0 .. li7.length)\n\t{\n\t\tli8[i] = li7[i];\n\t}\n\t\n\tlong[] li9 = new long[li8.length];\n\t\n\tforeach(i; 0 .. li8.length)\n\t{\n\t\tli9[i] = li8[i];\n\t}\n\t\n\tlong[] li10 = new long[li9.length];\n\t\n\tforeach(i; 0 .. li9.length)\n\t{\n\t\tli10[i] = li9[i];\n\t}\n\t\n\tlong[] li11 = new long[li10.length];\n\t\n\tforeach(i; 0 .. li10.length)\n\t{\n\t\tli11[i]",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++)\n\t{\n\t\tif (li1[i] != li2[i])\n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tlong[] li4 = new long[li2.length];\n\t\n\tforeach(i; 0..li1.length)\n\t{\n\t\tli3[i] = li1[i];\n\t}\n\t\n\tforeach(i; 0..li2.length)\n\t{\n\t\tli4[i] = li2[i];\n\t}\n\t\n\tforeach(i; 0..li3.length)\n\t{\n\t\tforeach(j; 0..li4.length)\n\t\t{\n\t\t\tif(li3[i] == li4[j])\n\t\t\t{\n\t\t\t\tli3[i] = 0;\n\t\t\t\tli4[j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++) \n\t{\n\t\tif (!li2.contains(li1[i])) \n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3[0..j];\n}",
    "{\n\tlong[] li3 = new long[li1.length + li2.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < li1.length && j < li2.length) \n\t{\n\t\tif (li1[i] < li2[j]) \n\t\t{\n\t\t\tli3[k] = li1[i];\n\t\t\ti += 1;\n\t\t\tk += 1;\n\t\t} \n\t\telse if (li2[j] < li1[i]) \n\t\t{\n\t\t\tj += 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti += 1;\n\t\t\tj += 1;\n\t\t}\n\t}\n\twhile (i < li1.length) \n\t{\n\t\tli3[k] = li1[i];\n\t\ti += 1;\n\t\tk += 1;\n\t}\n\treturn li3[0 .. k];\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++) \n\t{\n\t\tif (li1[i] != li2[i]) \n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n    long[] li3 = new long[li1.length + li2.length];\n    long[] li4 = new long[li1.length + li2.length];\n    long[] li5 = new long[li1.length + li2.length];\n    long[] li6 = new long[li1.length + li2.length];\n    long[] li7 = new long[li1.length + li2.length];\n    long[] li8 = new long[li1.length + li2.length];\n    long[] li9 = new long[li1.length + li2.length];\n    long[] li10 = new long[li1.length + li2.length];\n    long[] li11 = new long[li1.length + li2.length];\n    long[] li12 = new long[li1.length + li2.length];\n    long[] li13 = new long[li1.length + li2.length];\n    long[] li14 = new long[li1.length + li2.length];\n    long[] li15 = new long[li1.length + li2.length];\n    long[] li16 = new long[li1.length + li2.length];\n    long[] li17 = new long[li1.length + li2.length];\n    long[] li18 = new long[li1.length + li2.length];\n    long[] li19 = new long[li1.length + li2.length];\n    long[] li20 = new long[li1.length + li2.length];\n    long[] li21 = new long[li1.length + li2.length];\n    long[] li22 = new long[li1.length + li2.length];\n    long[] li23 = new long[li1.length + li2.length];\n    long[] li24 = new long[li1.length + li2.length];\n    long[] li25 = new long[li1.length + li2.length];\n    long[] li26 = new long[li1.length + li2.length];\n    long[] li27 = new long[li1.length + li2.length];\n    long[] li28 = new long[",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++) \n\t{\n\t\tif (li1[i] != li2[i]) \n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint k = 0;\n\tforeach(long i; li1)\n\t{\n\t\tif(!li2.canFind(i))\n\t\t{\n\t\t\tli3[k] = i;\n\t\t\tk++;\n\t\t}\n\t}\n\treturn li3[0..k];\n}",
    "{\n\tlong[] li3 = li1.dup;\n\tforeach(long i; li2)\n\t{\n\t\tli3 -= i;\n\t}\n\treturn li3;\n}",
    "{\n\tlong[] li3 = new long[li1.length];\n\tint j = 0;\n\tfor (int i = 0; i < li1.length; i++)\n\t{\n\t\tif (li1[i] != li2[i])\n\t\t{\n\t\t\tli3[j] = li1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn li3;\n}"
  ]
}