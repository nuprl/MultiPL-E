{
  "name": "mbpp_741_all_Characters_Same",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpo6md9be0.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6md9be0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // If atleast one character is different \n    // from the first character. \n    for (int i = 1; i < s.length; i++) \n        if (s[i] != s[0]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpo6md9be0.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6md9be0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!((a) => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpe691n4xk.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe691n4xk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // Find the first character \n    char first = s[0]; \n  \n    // Compare all the characters with first \n    // character and return false if any character \n    // is not same as first character \n    for (int i = 1; i < s.length; i++) \n        if (s[i] != first) \n            return false; \n  \n    // If all characters are same \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.find(' ') == -1 && s.find(s[0]) == s.rfind(s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpmt6gsnbu.d(10): Error: no property `find` for type `string`\n/tmp/tmpmt6gsnbu.d(10): Error: no property `find` for type `string`\n/tmp/tmpmt6gsnbu.d(10): Error: no property `rfind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt6gsnbu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!((a,b) => a == b)();\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp06ffynvc.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06ffynvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!((a,b) => a == b);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3y20uztr.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y20uztr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(c => c == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp7oskdqvd.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oskdqvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.find(' ') == -1 && s.find('\\t') == -1 && s.find('\\n') == -1; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\n/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\n/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp394fltup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn s.all!(a => a == s[0]);\n\t}\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp1oumr7ew.d(16): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1oumr7ew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all!(c => c == s[0])(s); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpvf22s_wb.d(10): Error: template instance `all!((c) => c == s[0])` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvf22s_wb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0 .. $ - 1] == s[1 .. $]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpf0f8hs2g.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0f8hs2g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(c => c == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp7oskdqvd.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oskdqvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // Using all() to  \n    // check equal characters \n    return all(s[0 .. $] == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp1clzjbsb.d(12): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1clzjbsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.find(' ') == -1 && s.find('\\t') == -1 && s.find('\\n') == -1 && s.find('\\r') == -1 && s.find('\\f') == -1 && s.find('\\v') == -1 && s.find('\\0') == -1; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\n/tmp/tmphwl0_79i.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwl0_79i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all!(a => a == s[0])(s); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp4jkbfw42.d(10): Error: template instance `all!((a) => a == s[0])` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jkbfw42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\treturn all(s.map!(a => a == s[0]));\n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpczfd9pl6.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczfd9pl6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    if (s.length == 0) \n        return true; \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    if (s.length == 0) \n        return true; \n  \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // If atleast one character is different from the first character. \n    for (int i = 1; i < s.length; i++) \n        if (s[i] != s[0]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(x => x == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpy93s_gag.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy93s_gag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\treturn all(s[0..$-1].map!(a => a == s[0]));\n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpntawfuao.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpntawfuao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // If atleast one character is different  \n    // from the first character. \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all(s[0..$-1].map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpudssxxs0.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudssxxs0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1 .. $]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1].map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp5uq_2vlr.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uq_2vlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.find(' ') == -1 && s.find('\\t') == -1 && s.find('\\n') == -1;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp9kcaxt0a.d(10): Error: no property `find` for type `string`\n/tmp/tmp9kcaxt0a.d(10): Error: no property `find` for type `string`\n/tmp/tmp9kcaxt0a.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kcaxt0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\treturn all(s[0..$-1].map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp8bha20pp.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bha20pp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tif (s.length == 0)\n\t\treturn false;\n\t\t\n\tchar c = s[0];\n\tforeach (i; s)\n\t{\n\t\tif (i != c)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\tif(s.length == 0)\n\t\treturn false;\n\t\n\tchar first = s[0];\n\t\n\tforeach(i; s)\n\t{\n\t\tif(i != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp4_yyyksw.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_yyyksw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1 .. $]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \n/*\n\tWrite a python function to check whether a string is a palindrome or not.\n\t\n*/\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp4kyimnuf.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kyimnuf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tint i;\n\tfor(i=1;i<s.length;i++)\n\t{\n\t\tif(s[i]!=s[0])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n    return s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp52ldwvsl.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52ldwvsl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!((a, b) => a == b);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpvayy4vo2.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvayy4vo2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tforeach(i;0..s.length)\n\t{\n\t\tif(s[0]!=s[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0 .. $ - 1], (c) => c == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpefeu45n7.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefeu45n7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpo6md9be0.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6md9be0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1] == s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp10gzyge0.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10gzyge0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1 .. $]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n    return s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp52ldwvsl.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52ldwvsl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((x) => x == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpuh_gdwra.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh_gdwra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0 .. $ - 1] == s[1 .. $]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpf0f8hs2g.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0f8hs2g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return (s.length == 1) || (s[0] == s[1] && all_Characters_Same(s[1..$])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1].map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp5uq_2vlr.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uq_2vlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0..1] == s[$-1..$];\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all!((a, b) => a == b)(s); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpk4dhv6vu.d(10): Error: template instance `all!((a, b) => a == b)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4dhv6vu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(c => c == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp7oskdqvd.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oskdqvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return (s.length == 1) || (s[0] == s[1] && all_Characters_Same(s[1..$])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // Find the first character \n    char first = s[0]; \n  \n    // Compare each character with first \n    // character \n    for (int i = 0; i < s.length; i++) \n        if (s[i] != first) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tif (s.length == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn s.all!((a, b) => a == b);\n\t}\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpryji8x9_.d(16): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpryji8x9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0 .. $] == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpwqv7dytx.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqv7dytx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s.front == s.back && all_Characters_Same(s[1 .. $ - 1]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpwk0qrt1_.d(10): Error: no property `front` for type `string`\n/tmp/tmpwk0qrt1_.d(10): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwk0qrt1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1 .. $]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // Find the first character \n    char first = s[0]; \n  \n    // Compare all the characters with first character \n    for (int i = 0; i < s.length; i++) \n        if (s[i] != first) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1].map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp5uq_2vlr.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uq_2vlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tint i;\n\tfor(i=0;i<s.length;i++)\n\t{\n\t\tif(s[i]!=s[0])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1].map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp5uq_2vlr.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uq_2vlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.find(' ') == -1 && s.find('\\t') == -1 && s.find('\\n') == -1; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\n/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\n/tmp/tmp394fltup.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp394fltup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpo6md9be0.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6md9be0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    int n = s.length(); \n    for (int i = 1; i < n; i++) \n        if (s[i] != s[0]) \n            return false; \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp6abqxu8l.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6abqxu8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s[0..$-1].map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp5uq_2vlr.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uq_2vlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b)(); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpctjiwvm9.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctjiwvm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\treturn all(s[0..$-1].map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp8bha20pp.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bha20pp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // If atleast one character is different from the first character. \n    for (int i = 1; i < s.length; i++) \n        if (s[i] != s[0]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n\treturn all(s.map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpfmynymx6.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmynymx6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    // Find the first character \n    char first = s[0]; \n  \n    // Compare all the characters with first \n    // character \n    for (int i = 1; i < s.length; i++) \n        if (s[i] != first) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tint n = s.length;\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (s[0] != s[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpn8mzz5nw.d(10): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8mzz5nw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    for (int i = 1; i < s.length; i++) \n        if (s[0] != s[i]) \n            return false; \n  \n    return true; \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(x => x == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpy93s_gag.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy93s_gag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\tint i;\n\tfor (i = 0; i < s.length; i++)\n\t{\n\t\tif (s[i] != s[0])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b)(); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpctjiwvm9.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctjiwvm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s.length == 0 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b)(); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpctjiwvm9.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctjiwvm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all(s[0..$-1].map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpudssxxs0.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudssxxs0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpy_uo07hj.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_uo07hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn all(s.map!(a => a == s[0]));\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpg307powv.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg307powv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.length == 1 || s.all!(a => a == s[0]); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpo6md9be0.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6md9be0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.length == 1 || s[0] == s[1] && all_Characters_Same(s[1..$]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return all(s.map!(a => a == s[0])); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmp1z626btl.d(10): Error: undefined identifier `all`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1z626btl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{ \n    return s.all!((a, b) => a == b); \n} \nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpray6bpat.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpray6bpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether all the characters are same or not.\n\t\n*/\nbool all_Characters_Same(string s) \n{\n\treturn s.all!(a => a == s[0]);\n}\nunittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp3ezf_1ul.d(10): Error: no property `all` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ezf_1ul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}