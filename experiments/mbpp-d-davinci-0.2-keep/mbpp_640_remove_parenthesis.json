{
  "name": "mbpp_640_remove_parenthesis",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\n*/\nstring remove_parenthesis(string[] items) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = remove_parenthesis;\n\n    assert(candidate([\"python (chrome)\"]) == \"python\");\n    assert(candidate([\"string(.abc)\"]) == \"string\");\n    assert(candidate([\"alpha(num)\"]) == \"alpha\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] != '(')\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(')\n\t\t\t{\n\t\t\t\titem = item[1..$];\n\t\t\t}\n\t\t\tif(item.length > 0)\n\t\t\t{\n\t\t\t\tif(item[$-1] == ')')\n\t\t\t\t{\n\t\t\t\t\titem = item[0..$-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult ~= item;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(item[0] == '(' && item[$-1] == ')')\n\t\t\t{\n\t\t\t\tresult ~= item[1..$-2];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(item[0] == '(' && item[$-1] == ')')\n\t\t\t{\n\t\t\t\tresult ~= item[1..$-1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(item[0] != '(' && item[$-1] != ')')\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item != \"(\" && item != \")\")\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse if(item[0] != '(' && item[$-1] != ')')\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(string item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(' && item[$ - 1] == ')')\n\t\t\t{\n\t\t\t\tresult ~= item[1..$ - 2];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(')\n\t\t\t{\n\t\t\t\titem = item[1..$];\n\t\t\t}\n\t\t\tif(item.length > 0)\n\t\t\t{\n\t\t\t\tif(item[$-1] == ')')\n\t\t\t\t{\n\t\t\t\t\titem = item[0..$-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult ~= item;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint count = 0;\n\tforeach(item; items)\n\t{\n\t\tif(item == \"(\")\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(item == \")\")\n\t\t{\n\t\t\tcount--;\n\t\t}\n\t\telse if(count == 0)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(' && item[$-1] == ')')\n\t\t\t{\n\t\t\t\tresult ~= item[1..$-2];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(item; items)\n\t{\n\t\tif(item[0] != '(')\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(')\n\t\t\t{\n\t\t\t\tint index = item.find(')');\n\t\t\t\tif(index != -1)\n\t\t\t\t{\n\t\t\t\t\titem = item[index+1..$];\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse if(item[0] != '(' && item[$-1] != ')')\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(item; items)\n\t{\n\t\tif(item == \"(\" || item == \")\")\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= item;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(')\n\t\t\t{\n\t\t\t\titem = item[1..$];\n\t\t\t}\n\t\t\tif(item.length > 0)\n\t\t\t{\n\t\t\t\tif(item[$-1] == ')')\n\t\t\t\t{\n\t\t\t\t\titem = item[0..$-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult ~= item;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item == \"(\")\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\telse if(item == \")\")\n\t\t{\n\t\t\tresult ~= \" \";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0)\n\t\t{\n\t\t\tif(item[0] == '(')\n\t\t\t{\n\t\t\t\tresult ~= item[1..$-1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items)\n\t{\n\t\tif(item.length > 0 && item[0] != '(')\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(item; items) \n\t{\n\t\tif(item[0] != '(') \n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}