{
  "name": "mbpp_743_rotate_right",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong j = 0;\n\tfor (long i = list.length - m; i < list.length; i++) \n\t{\n\t\ttemp[j] = list[i];\n\t\tj++;\n\t}\n\tj = 0;\n\tfor (long i = m; i < list.length; i++) \n\t{\n\t\tnew_list[j] = list[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tnew_list[j] = temp[i];\n\t\tj++;\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = list.length;\n\tauto result = new long[n];\n\tfor (auto i = 0; i < n; i++)\n\t{\n\t\tresult[(i + m) % n] = list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\t\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tnew_list[i + list.length - m] = temp[i];\n\t}\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\t\n\tfor(i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(j = m; j < list.length; j++)\n\t{\n\t\tnew_list[k] = list[j];\n\t\tk++;\n\t}\n\t\n\tfor(i = 0; i < m; i++)\n\t{\n\t\tnew_list[k] = temp[i];\n\t\tk++;\n\t}\n\t\n\treturn new_list;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - list.length + m];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i + temp2.length] = temp[i];\n\t}\n\t\n\treturn result;\n}"
  ]
}