{
  "name": "mbpp_784_mul_even_odd",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong mul = 0;\n\t\n\tforeach(long item; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = item;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = item;\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i == 1 && j == 1)\n\t\t{\n\t\t\tmul = even * odd;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp6ya93au.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmpp6ya93au.__unittest_L38_C1() [0x427e2e]\n??:? void tmpp6ya93au.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c18f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b022]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430664]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430141]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff9]\n??:? runModuleUnitTests [0x42bf65]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = list1.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile(j < len)\n\t{\n\t\tif(list1[j] % 2 != 0)\n\t\t{\n\t\t\todd_num = list1[j];\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\t\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpq6b8acc4.d(14): Error: cannot implicitly convert expression `list1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6b8acc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long l; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = l;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = l;\n\t\t\tbreak;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk921mmpj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpk921mmpj.__unittest_L30_C1() [0x427dfe]\n??:? void tmpk921mmpj.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, e; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i, e; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprrmndh56.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmprrmndh56.__unittest_L30_C1() [0x427e46]\n??:? void tmprrmndh56.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\treturn list1[0] * list1[1];\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxysu56bd.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpxysu56bd.__unittest_L12_C1() [0x427dba]\n??:? void tmpxysu56bd.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43013d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff5]\n??:? runModuleUnitTests [0x42bf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tcount++;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpygjqwi4i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpygjqwi4i.__unittest_L28_C1() [0x427dfe]\n??:? void tmpygjqwi4i.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpededml57.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpededml57.__unittest_L33_C1() [0x427e46]\n??:? void tmpededml57.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(long elem; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(long elem; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6vbh8dte.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp6vbh8dte.__unittest_L34_C1() [0x427e56]\n??:? void tmp6vbh8dte.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\treturn list1.filter!(x => x % 2 == 0).front * list1.filter!(x => x % 2 != 0).front;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpxg0i4u6j.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmpxg0i4u6j.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg0i4u6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i, val; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = val;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = val;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8junvf3k.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmp8junvf3k.__unittest_L29_C1() [0x427df2]\n??:? void tmp8junvf3k.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tbool even_found = false;\n\tbool odd_found = false;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\teven_found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\todd_found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(even_found && odd_found)\n\t{\n\t\treturn even * odd;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = item;\n\t\t\tresult = even * odd;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = item;\n\t\t\tresult = even * odd;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy9brlzxn.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpy9brlzxn.__unittest_L29_C1() [0x427e06]\n??:? void tmpy9brlzxn.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm9s1m90t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281b5]\n??:? void tmpm9s1m90t.__unittest_L30_C1() [0x427e42]\n??:? void tmpm9s1m90t.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b032]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430674]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430151]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b009]\n??:? runModuleUnitTests [0x42bf75]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428604]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tlong product = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\teven = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(count == 1)\n\t\t\t{\n\t\t\t\todd = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3r2_a3c1.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmp3r2_a3c1.__unittest_L38_C1() [0x427e9f]\n??:? void tmp3r2_a3c1.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c177]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43019d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43064c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430129]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe1]\n??:? runModuleUnitTests [0x42bf4d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i, element; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = element;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = element;\n\t\t}\n\t\t\n\t\tif(even != 0 && odd != 0)\n\t\t{\n\t\t\tresult = even * odd;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv3gq3wud.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpv3gq3wud.__unittest_L34_C1() [0x427e0e]\n??:? void tmpv3gq3wud.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b002]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430195]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430644]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430121]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd9]\n??:? runModuleUnitTests [0x42bf45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7fe200gk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmp7fe200gk.__unittest_L30_C1() [0x427e4a]\n??:? void tmp7fe200gk.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpededml57.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpededml57.__unittest_L33_C1() [0x427e46]\n??:? void tmpededml57.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\teven = even + list1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = odd + list1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq5eagbfd.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpq5eagbfd.__unittest_L27_C1() [0x427e26]\n??:? void tmpq5eagbfd.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e;list1)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\teven = even*e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = odd*e;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5253ex2f.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp5253ex2f.__unittest_L25_C1() [0x427dfa]\n??:? void tmp5253ex2f.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjd38c9hv.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpjd38c9hv.__unittest_L28_C1() [0x427dfa]\n??:? void tmpjd38c9hv.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(j; list1)\n\t{\n\t\tif(j % 2 != 0)\n\t\t{\n\t\t\todd = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "/tmp/tmpw2sd05nn.d(16): Error: variable `i` is shadowing variable `tmpw2sd05nn.mul_even_odd.i`\n/tmp/tmpw2sd05nn.d(25): Error: variable `j` is shadowing variable `tmpw2sd05nn.mul_even_odd.j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2sd05nn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpajt_393b.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpajt_393b.__unittest_L34_C1() [0x427e66]\n??:? void tmpajt_393b.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnrzbyvxk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpnrzbyvxk.__unittest_L30_C1() [0x427e46]\n??:? void tmpnrzbyvxk.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp32jgth1r.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp32jgth1r.__unittest_L34_C1() [0x427e56]\n??:? void tmp32jgth1r.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd7f_46dv.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpd7f_46dv.__unittest_L34_C1() [0x427e56]\n??:? void tmpd7f_46dv.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e;list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e;list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dq8jqme.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmp_dq8jqme.__unittest_L30_C1() [0x427e46]\n??:? void tmp_dq8jqme.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even_num * odd_num;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tauto even = list1.filter!(a => a % 2 == 0);\n\tauto odd = list1.filter!(a => a % 2 != 0);\n\treturn even[0] * odd[0];\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "/tmp/tmpjf0am0x7.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmpjf0am0x7.d(11): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjf0am0x7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_number = 0;\n\tlong odd_number = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_number = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_number = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even_number * odd_number;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tbool even_found = false;\n\tbool odd_found = false;\n\tforeach(i, elem; list1)\n\t{\n\t\tif(elem % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\teven_found = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t\todd_found = true;\n\t\t}\n\t\tif(even_found && odd_found)\n\t\t{\n\t\t\tresult = even * odd;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjibwvuuh.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpjibwvuuh.__unittest_L35_C1() [0x427e26]\n??:? void tmpjibwvuuh.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(long elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(long elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7wzuuov4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmp7wzuuov4.__unittest_L34_C1() [0x427e66]\n??:? void tmp7wzuuov4.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\tcount++;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(num; list1)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\todd = num;\n\t\t\tcount++;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(count == 2)\n\t{\n\t\treturn even * odd;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong product = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong bv = 0;\n\tlong bw = 0;\n\tlong bx =\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "/tmp/tmp8mas5wtl.d(80): Error: expression expected, not `unittest`\n/tmp/tmp8mas5wtl.d(81): Error: semicolon expected, not `{`\n/tmp/tmp8mas5wtl.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mas5wtl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tbool even_found = false;\n\tbool odd_found = false;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(even_found == false)\n\t\t\t{\n\t\t\t\teven = i;\n\t\t\t\teven_found = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(odd_found == false)\n\t\t\t{\n\t\t\t\todd = i;\n\t\t\t\todd_found = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(even_found && odd_found)\n\t\t{\n\t\t\tresult = even * odd;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even_num * odd_num;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = x;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpedlu91e7.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpedlu91e7.__unittest_L27_C1() [0x427e02]\n??:? void tmpedlu91e7.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0, odd = 0;\n\tforeach(i,e;list1)\n\t{\n\t\tif(i%2==0)\n\t\t\teven = e;\n\t\telse\n\t\t\todd = e;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpssj76sfz.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpssj76sfz.__unittest_L20_C1() [0x427df2]\n??:? void tmpssj76sfz.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoj07e5iz.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpoj07e5iz.__unittest_L33_C1() [0x427e4a]\n??:? void tmpoj07e5iz.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tint even = 0;\n\tint odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tforeach(elem; list1[i..$])\n\t{\n\t\tif(elem % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "/tmp/tmpauz4_4kd.d(17): Error: cannot implicitly convert expression `elem` of type `long` to `int`\n/tmp/tmpauz4_4kd.d(27): Error: cannot implicitly convert expression `elem` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauz4_4kd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(j; list1)\n\t{\n\t\tif(j % 2 != 0)\n\t\t{\n\t\t\todd = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "/tmp/tmp210rab20.d(16): Error: variable `i` is shadowing variable `tmp210rab20.mul_even_odd.i`\n/tmp/tmp210rab20.d(25): Error: variable `j` is shadowing variable `tmp210rab20.mul_even_odd.j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp210rab20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = item;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = item;\n\t\t}\n\t\ti++;\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuw7imvuq.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpuw7imvuq.__unittest_L29_C1() [0x427df6]\n??:? void tmpuw7imvuq.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = x;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = x;\n\t\t}\n\t\ti++;\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3jparr3x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp3jparr3x.__unittest_L29_C1() [0x427df6]\n??:? void tmp3jparr3x.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tforeach(n; list1)\n\t{\n\t\tif(n % 2 == 0)\n\t\t{\n\t\t\teven = n;\n\t\t\ti++;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(n; list1)\n\t{\n\t\tif(n % 2 != 0)\n\t\t{\n\t\t\todd = n;\n\t\t\tj++;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(i == 0 || j == 0)\n\t{\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\treturn even * odd;\n\t}\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tint i = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_mul *= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd_mul *= num;\n\t\t}\n\t\ti++;\n\t}\n\treturn even_mul * odd_mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy8wpr92v.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpy8wpr92v.__unittest_L27_C1() [0x427e0a]\n??:? void tmpy8wpr92v.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tint even = 0;\n\tint odd = 0;\n\tint i = 0;\n\twhile(even == 0 || odd == 0)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = list1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpjrag_n58.d(17): Error: cannot implicitly convert expression `list1[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpjrag_n58.d(21): Error: cannot implicitly convert expression `list1[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrag_n58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tint even_count = 0;\n\tint odd_count = 0;\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_count++;\n\t\t\tif(even_count == 1)\n\t\t\t\teven_num = i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd_count++;\n\t\t\tif(odd_count == 1)\n\t\t\t\todd_num = i;\n\t\t}\n\t\tif(even_count == 1 && odd_count == 1)\n\t\t\tbreak;\n\t}\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvn10q2l.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmptvn10q2l.__unittest_L30_C1() [0x427e46]\n??:? void tmptvn10q2l.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tint i = 0;\n\tint even = 0;\n\tint odd = 0;\n\t\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\t\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpthz7lsiy.d(18): Error: cannot implicitly convert expression `elem` of type `long` to `int`\n/tmp/tmpthz7lsiy.d(30): Error: cannot implicitly convert expression `elem` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthz7lsiy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach(long num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t\tbreak;\n\t\t}\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptjhrde9p.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmptjhrde9p.__unittest_L30_C1() [0x427dfe]\n??:? void tmptjhrde9p.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tcount++;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wrtkthc.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp6wrtkthc.__unittest_L32_C1() [0x427e02]\n??:? void tmp6wrtkthc.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even_num * odd_num;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = num;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyimabx15.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpyimabx15.__unittest_L34_C1() [0x427e56]\n??:? void tmpyimabx15.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even_num * odd_num;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(long l; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = l;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = l;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppn1l4rnc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmppn1l4rnc.__unittest_L28_C1() [0x427dfa]\n??:? void tmppn1l4rnc.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjedjkafp.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpjedjkafp.__unittest_L33_C1() [0x427e4a]\n??:? void tmpjedjkafp.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] % 2 == 0) \n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] % 2 != 0) \n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4ftkteog.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmp4ftkteog.__unittest_L25_C1() [0x427e1e]\n??:? void tmp4ftkteog.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428658]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong product = 0;\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = item;\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\t\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpew_5ij80.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpew_5ij80.__unittest_L30_C1() [0x427df2]\n??:? void tmpew_5ij80.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tforeach(long x; list1)\n\t{\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = x;\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i == 1 && j == 1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpshskypal.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpshskypal.__unittest_L36_C1() [0x427e1a]\n??:? void tmpshskypal.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c177]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43019d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43064c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430129]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe1]\n??:? runModuleUnitTests [0x42bf4d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt4ypqjx2.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpt4ypqjx2.__unittest_L27_C1() [0x427e02]\n??:? void tmpt4ypqjx2.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong product = 0;\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzjcu_ba1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpzjcu_ba1.__unittest_L35_C1() [0x427e4a]\n??:? void tmpzjcu_ba1.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(long i; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (list1[i] % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (list1[i] % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong product = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\t\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t\teven = x;\n\t\telse\n\t\t\todd = x;\n\t\ti++;\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4duf_e18.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp4duf_e18.__unittest_L25_C1() [0x427dfe]\n??:? void tmp4duf_e18.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tlong i = 0;\n\tforeach(long e; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = e;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(e % 2 == 0)\n\t\t\t{\n\t\t\t\teven = e;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = e;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyvk9i_o6.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpyvk9i_o6.__unittest_L40_C1() [0x427e2a]\n??:? void tmpyvk9i_o6.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpltttx4ot.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpltttx4ot.__unittest_L34_C1() [0x427e66]\n??:? void tmpltttx4ot.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0, odd = 0;\n\tforeach(i, e; list1) \n\t{\n\t\tif(i % 2 == 0)\n\t\t\teven = e;\n\t\telse\n\t\t\todd = e;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppxma4dvm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmppxma4dvm.__unittest_L20_C1() [0x427df2]\n??:? void tmppxma4dvm.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tint j = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(j == 0)\n\t\t\t{\n\t\t\t\teven = x;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(j == 1)\n\t\t\t{\n\t\t\t\todd = x;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjkoeh_b8.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpjkoeh_b8.__unittest_L44_C1() [0x427e26]\n??:? void tmpjkoeh_b8.__modtest() [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tlong result = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tcount = 1;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = i;\n\t\t\tcount = 0;\n\t\t}\n\t\tresult = even * odd;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpof6vcfh3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpof6vcfh3.__unittest_L30_C1() [0x427e12]\n??:? void tmpof6vcfh3.__modtest() [0x427f08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b002]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430195]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430644]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430121]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd9]\n??:? runModuleUnitTests [0x42bf45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjedjkafp.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpjedjkafp.__unittest_L33_C1() [0x427e4a]\n??:? void tmpjedjkafp.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < list1.length)\n\t{\n\t\tif (list1[i] % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j < list1.length)\n\t{\n\t\tif (list1[j] % 2 != 0)\n\t\t{\n\t\t\todd = list1[j];\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = even * elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = odd * elem;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb45402le.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpb45402le.__unittest_L25_C1() [0x427dfa]\n??:? void tmpb45402le.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tint even_num = 0;\n\tint odd_num = 0;\n\tint i = 0;\n\tint flag = 0;\n\t\n\tforeach(l; list1)\n\t{\n\t\tif(l % 2 == 0)\n\t\t{\n\t\t\teven_num = l;\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 0)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tforeach(l; list1)\n\t{\n\t\tif(l % 2 != 0)\n\t\t{\n\t\t\todd_num = l;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpxslalfg1.d(19): Error: cannot implicitly convert expression `l` of type `long` to `int`\n/tmp/tmpxslalfg1.d(34): Error: cannot implicitly convert expression `l` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxslalfg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 != 0)\n\t\t{\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even_num * odd_num;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tforeach(i,e; list1)\n\t{\n\t\tif(e % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e; list1)\n\t{\n\t\tif(e % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = list1[i];\n\t\t}\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptcqz_fik.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmptcqz_fik.__unittest_L28_C1() [0x427e22]\n??:? void tmptcqz_fik.__modtest() [0x427f18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428658]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\ti = 0;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0uy0xoij.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp0uy0xoij.__unittest_L30_C1() [0x427e02]\n??:? void tmp0uy0xoij.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\treturn list1.filter!(x => x % 2 == 0).front * list1.filter!(x => x % 2 != 0).front;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmpxg0i4u6j.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmpxg0i4u6j.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg0i4u6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpmf4vfjln.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpmf4vfjln.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf4vfjln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt4ypqjx2.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpt4ypqjx2.__unittest_L27_C1() [0x427e02]\n??:? void tmpt4ypqjx2.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\teven = elem;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = elem;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4xrkamqb.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmp4xrkamqb.__unittest_L42_C1() [0x427e22]\n??:? void tmp4xrkamqb.__modtest() [0x427f18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b012]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430654]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430131]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe9]\n??:? runModuleUnitTests [0x42bf55]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong product = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(long i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tproduct = even_num * odd_num;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzlw0ed3n.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpzlw0ed3n.__unittest_L27_C1() [0x427dfa]\n??:? void tmpzlw0ed3n.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2un0yxa.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpr2un0yxa.__unittest_L30_C1() [0x427e46]\n??:? void tmpr2un0yxa.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\teven = even * elem;\n\t\t}\n\t\telse \n\t\t{\n\t\t\todd = odd * elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpms2wlygc.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpms2wlygc.__unittest_L27_C1() [0x427e02]\n??:? void tmpms2wlygc.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\t\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] % 2 != 0)\n\t\t{\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even_num * odd_num;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm142ukf9.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpm142ukf9.__unittest_L27_C1() [0x427df6]\n??:? void tmpm142ukf9.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(x % 2 == 0)\n\t\t\t{\n\t\t\t\teven = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = x;\n\t\t\t}\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw2a4lxfd.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpw2a4lxfd.__unittest_L41_C1() [0x427e2a]\n??:? void tmpw2a4lxfd.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, e; list1)\n\t{\n\t\tif (e % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i, e; list1)\n\t{\n\t\tif (e % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp32jgth1r.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp32jgth1r.__unittest_L34_C1() [0x427e56]\n??:? void tmp32jgth1r.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(elem % 2 == 0)\n\t\t\t{\n\t\t\t\teven = elem;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = elem;\n\t\t\t}\n\t\t}\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ax_j8g_.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmp5ax_j8g_.__unittest_L41_C1() [0x427e2a]\n??:? void tmp5ax_j8g_.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong bb = 0;\n\tlong cc = 0;\n\tlong dd = 0;\n\tlong ee = 0;\n\tlong ff = 0;\n\tlong gg = 0;\n\tlong hh = 0;\n\tlong ii = 0;\n\tlong jj = 0;\n\tlong kk = 0;\n\tlong ll = 0;\n\tlong mm = 0;\n\tlong nn = 0;\n\tlong oo = 0;\n\tlong pp = 0;\n\tlong qq = 0;\n\tlong rr = 0;\n\tlong ss = 0;\n\tlong tt = 0;\n\tlong uu = 0;\n\tlong vv = 0;\n\tlong ww = 0;\n\tlong xx = 0;\n\tlong yy = 0;\n\tlong zz = 0;\n\tlong aaa = 0;\n\tlong bbb = 0;\n\tlong ccc = 0;\n\tlong ddd = 0;\n\tlong eee = 0;\n\tlong fff = 0;\n\tlong ggg = 0;\n\tlong hhh = 0;\n\tlong iii = 0;\n\tlong jjj = 0;\n\tlong kkk = 0;\n\tlong lll = 0;\n\tlong mmm = 0;\n\tlong nnn = 0;\n\tlong ooo = 0;\n\tlong ppp = 0;\n\tlong qqq = 0;\n\tlong rrr = 0;\n\tlong sss = 0;\n\tlong ttt = 0;\n\tlong uuu = 0;\n\tlong v\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpyqy7lcrq.d(78): Error: semicolon expected, not `unittest`\n/tmp/tmpyqy7lcrq.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqy7lcrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyd9g1041.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpyd9g1041.__unittest_L30_C1() [0x427e46]\n??:? void tmpyd9g1041.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\treturn list1.filter!(a => a % 2 == 0).front * list1.filter!(a => a % 2 != 0).front;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpboewx0je.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmpboewx0je.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboewx0je.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong bb = 0;\n\tlong cc = 0;\n\tlong dd = 0;\n\tlong ee = 0;\n\tlong ff = 0;\n\tlong gg = 0;\n\tlong hh = 0;\n\tlong ii = 0;\n\tlong jj = 0;\n\tlong kk = 0;\n\tlong ll = 0;\n\tlong mm = 0;\n\tlong nn = 0;\n\tlong oo = 0;\n\tlong pp = 0;\n\tlong qq = 0;\n\tlong rr = 0;\n\tlong ss = 0;\n\tlong tt = 0;\n\tlong uu = 0;\n\tlong vv = 0;\n\tlong ww = 0;\n\tlong xx = 0;\n\tlong yy = 0;\n\tlong zz = 0;\n\tlong aaa = 0;\n\tlong bbb = 0;\n\tlong ccc = 0;\n\tlong ddd = 0;\n\tlong eee = 0;\n\tlong fff = 0;\n\tlong ggg = 0;\n\tlong hhh = 0;\n\tlong iii = 0;\n\tlong jjj = 0;\n\tlong kkk = 0;\n\tlong lll = 0;\n\tlong mmm = 0;\n\tlong nnn = 0;\n\tlong ooo = 0;\n\tlong ppp = 0;\n\tlong qqq = 0;\n\tlong rrr = 0;\n\tlong sss = 0;\n\tlong ttt = 0;\n\tlong uuu = 0;\n\tlong v\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "/tmp/tmpyqy7lcrq.d(78): Error: semicolon expected, not `unittest`\n/tmp/tmpyqy7lcrq.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqy7lcrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t\ti++;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkbnfn329.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpkbnfn329.__unittest_L30_C1() [0x427dfa]\n??:? void tmpkbnfn329.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong product = 0;\n\t\n\tforeach(long x; list1)\n\t{\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\ti++;\n\t\t\tif(i == 1)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(long x; list1)\n\t{\n\t\tif(x % 2 != 0)\n\t\t{\n\t\t\todd = x;\n\t\t\tj++;\n\t\t\tif(j == 1)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tint i = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven_mul *= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd_mul *= num;\n\t\t}\n\t\ti++;\n\t}\n\treturn even_mul * odd_mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp70k3bxs4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp70k3bxs4.__unittest_L27_C1() [0x427e0a]\n??:? void tmp70k3bxs4.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tforeach(i, list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven_num = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(j, list1)\n\t{\n\t\tif(j % 2 != 0)\n\t\t{\n\t\t\todd_num = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even_num * odd_num;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpww1ic3_7.d(16): Error: no identifier for declarator `list1`\n/tmp/tmpww1ic3_7.d(16): Error: found `)` when expecting `;`\n/tmp/tmpww1ic3_7.d(25): Error: found `foreach` when expecting `)`\n/tmp/tmpww1ic3_7.d(34): Error: found `mul` when expecting `;` following statement\n/tmp/tmpww1ic3_7.d(34): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww1ic3_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tforeach(i;list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i;list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tlong result = 0;\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 == 0)\n\t\t{\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] % 2 != 0)\n\t\t{\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even_num * odd_num;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach(long num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t\ti = 0;\n\t\t}\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxrqni37c.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpxrqni37c.__unittest_L30_C1() [0x427e02]\n??:? void tmpxrqni37c.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong product = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(j; list1)\n\t{\n\t\tif(j % 2 != 0)\n\t\t{\n\t\t\todd = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp_oo61tpn.d(16): Error: variable `i` is shadowing variable `tmp_oo61tpn.mul_even_odd.i`\n/tmp/tmp_oo61tpn.d(25): Error: variable `j` is shadowing variable `tmp_oo61tpn.mul_even_odd.j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_oo61tpn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tcount = 1;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = i;\n\t\t\tcount = 2;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcn2hxe3f.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpcn2hxe3f.__unittest_L28_C1() [0x427e06]\n??:? void tmpcn2hxe3f.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpajt_393b.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpajt_393b.__unittest_L34_C1() [0x427e66]\n??:? void tmpajt_393b.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(item; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = item;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = item;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptcfclvgr.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmptcfclvgr.__unittest_L35_C1() [0x427dfa]\n??:? void tmptcfclvgr.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = item;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = item;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\teven = item;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = item;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5ideunkf.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmp5ideunkf.__unittest_L42_C1() [0x427e22]\n??:? void tmp5ideunkf.__modtest() [0x427f18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b012]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430654]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430131]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe9]\n??:? runModuleUnitTests [0x42bf55]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = item;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94r4ub2n.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmp94r4ub2n.__unittest_L27_C1() [0x427df2]\n??:? void tmp94r4ub2n.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\t\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i, elem; list1) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\teven = even * elem;\n\t\t}\n\t\telse \n\t\t{\n\t\t\todd = odd * elem;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj5o0ioab.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpj5o0ioab.__unittest_L25_C1() [0x427dfa]\n??:? void tmpj5o0ioab.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428543]\n??:? _d_run_main [0x4284ae]\n??:? main [0x427f03]\n??:? __libc_start_main [0xad0b1554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(element; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = element;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(element; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = element;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl3mmwfof.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpl3mmwfof.__unittest_L34_C1() [0x427e66]\n??:? void tmpl3mmwfof.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong count = 0;\n\tlong result = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tcount++;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = i;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpolp7j1jf.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpolp7j1jf.__unittest_L34_C1() [0x427e06]\n??:? void tmpolp7j1jf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti = 1;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjd38c9hv.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpjd38c9hv.__unittest_L28_C1() [0x427dfa]\n??:? void tmpjd38c9hv.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i,e; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvn10q2l.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmptvn10q2l.__unittest_L30_C1() [0x427e46]\n??:? void tmptvn10q2l.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt4ypqjx2.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpt4ypqjx2.__unittest_L27_C1() [0x427e02]\n??:? void tmpt4ypqjx2.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even, odd;\n\teven = odd = 1;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\teven *= i;\n\t\telse\n\t\t\todd *= i;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr86oef7u.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpr86oef7u.__unittest_L21_C1() [0x427e0e]\n??:? void tmpr86oef7u.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b002]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430195]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430644]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430121]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd9]\n??:? runModuleUnitTests [0x42bf45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\t\n\tforeach(element; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = element;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\t\n\tforeach(element; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = element;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeyxfy5ha.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpeyxfy5ha.__unittest_L38_C1() [0x427e66]\n??:? void tmpeyxfy5ha.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzlw0ed3n.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpzlw0ed3n.__unittest_L27_C1() [0x427dfa]\n??:? void tmpzlw0ed3n.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even_num = 0;\n\tlong odd_num = 0;\n\tbool even_found = false;\n\tbool odd_found = false;\n\tforeach(long num; list1)\n\t{\n\t\tif(num % 2 == 0)\n\t\t{\n\t\t\teven_num = num;\n\t\t\teven_found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(long num; list1)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\todd_num = num;\n\t\t\todd_found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(even_found && odd_found)\n\t{\n\t\treturn even_num * odd_num;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tlong mul = 0;\n\t\n\tforeach(long x; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = x;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgx0u1xcf.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpgx0u1xcf.__unittest_L36_C1() [0x427e06]\n??:? void tmpgx0u1xcf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i%2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\todd = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptko2ec17.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmptko2ec17.__unittest_L34_C1() [0x427e56]\n??:? void tmptko2ec17.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\t\n\tforeach(long elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\t\n\tforeach(long elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4l5vthgk.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmp4l5vthgk.__unittest_L38_C1() [0x427e56]\n??:? void tmp4l5vthgk.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong i = 0;\n\tforeach (elem; list1)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach (elem; list1)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2plw1cf3.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmp2plw1cf3.__unittest_L34_C1() [0x427e66]\n??:? void tmp2plw1cf3.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42862c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\teven = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = num;\n\t\t\t}\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoc0sin56.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpoc0sin56.__unittest_L41_C1() [0x427e2a]\n??:? void tmpoc0sin56.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9ktwpqc0.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp9ktwpqc0.__unittest_L27_C1() [0x427df6]\n??:? void tmp9ktwpqc0.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmojrh5l.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpgmojrh5l.__unittest_L34_C1() [0x427e56]\n??:? void tmpgmojrh5l.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach(long item; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = item;\n\t\t}\n\t\ti++;\n\t}\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgv_ekv5.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpqgv_ekv5.__unittest_L29_C1() [0x427dfe]\n??:? void tmpqgv_ekv5.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i;list1)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i;list1)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7fe200gk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmp7fe200gk.__unittest_L30_C1() [0x427e4a]\n??:? void tmp7fe200gk.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = x;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd7f_46dv.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpd7f_46dv.__unittest_L34_C1() [0x427e56]\n??:? void tmpd7f_46dv.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3szjlip2.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp3szjlip2.__unittest_L28_C1() [0x427df6]\n??:? void tmp3szjlip2.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long num; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\teven = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd = num;\n\t\t\t}\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoc0sin56.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpoc0sin56.__unittest_L41_C1() [0x427e2a]\n??:? void tmpoc0sin56.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c187]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430139]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff1]\n??:? runModuleUnitTests [0x42bf5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i, elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq5ffghg3.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmpq5ffghg3.__unittest_L35_C1() [0x427e4a]\n??:? void tmpq5ffghg3.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tforeach (num; list1)\n\t{\n\t\tif (num % 2 == 0)\n\t\t{\n\t\t\teven = num;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\tforeach (num; list1)\n\t{\n\t\tif (num % 2 != 0)\n\t\t{\n\t\t\todd = num;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(e % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(e % 2 != 0)\n\t\t{\n\t\t\todd = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmul = even * odd;\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = elem;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmojrh5l.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpgmojrh5l.__unittest_L34_C1() [0x427e56]\n??:? void tmpgmojrh5l.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430169]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]\n??:? runModuleUnitTests [0x42bf8d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint count = 0;\n\t\n\tforeach(long i; list1)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tcount++;\n\t\t}\n\t\telse if(count == 1)\n\t\t{\n\t\t\todd = i;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1x579j2.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpg1x579j2.__unittest_L34_C1() [0x427df6]\n??:? void tmpg1x579j2.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong mul = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tforeach(long elem; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = elem;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 2)\n\t\t{\n\t\t\tmul = even * odd;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn mul;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvj9vqg27.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvj9vqg27.__unittest_L36_C1() [0x427e0a]\n??:? void tmpvj9vqg27.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c167]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43018d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43063c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430119]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd1]\n??:? runModuleUnitTests [0x42bf3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = e;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnu_dm38c.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpnu_dm38c.__unittest_L30_C1() [0x427df2]\n??:? void tmpnu_dm38c.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430175]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430624]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430101]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb9]\n??:? runModuleUnitTests [0x42bf25]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong product = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tproduct = even * odd;\n\treturn product;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = elem;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd = elem;\n\t\t}\n\t\ti++;\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzlw0ed3n.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpzlw0ed3n.__unittest_L27_C1() [0x427dfa]\n??:? void tmpzlw0ed3n.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c157]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43017d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43062c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430109]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]\n??:? runModuleUnitTests [0x42bf2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i;list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\treturn list1.filter!(x => x % 2 == 0).front * list1.filter!(x => x % 2 == 1).front;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmps8j_o966.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmps8j_o966.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8j_o966.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(i; list1)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0, odd = 0;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0fwu25xc.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmp0fwu25xc.__unittest_L29_C1() [0x427e4a]\n??:? void tmp0fwu25xc.__modtest() [0x427f40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c21b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430241]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b085]\n??:? runModuleUnitTests [0x42bff1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428680]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\n*/\nlong mul_even_odd(long[] list1) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong result = 0;\n\tint i = 0;\n\tforeach(long l; list1)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\teven = l;\n\t\t\ti++;\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\todd = l;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tresult = even * odd;\n\treturn result;\n}\nunittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp28hzrs60.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp28hzrs60.__unittest_L34_C1() [0x427dfe]\n??:? void tmp28hzrs60.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430185]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430634]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430111]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc9]\n??:? runModuleUnitTests [0x42bf35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}