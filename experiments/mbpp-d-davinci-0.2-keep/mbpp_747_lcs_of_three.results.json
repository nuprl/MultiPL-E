{
  "name": "mbpp_747_lcs_of_three",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpwrsam0xx.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpwrsam0xx.d(10): Error: no property `length` for type `string`\n/tmp/tmpwrsam0xx.d(11): Error: no property `length` for type `string`\n/tmp/tmpwrsam0xx.d(12): Error: no property `length` for type `string`\n/tmp/tmpwrsam0xx.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrsam0xx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp6d25erm9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp6d25erm9.d(10): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(11): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(12): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d25erm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n        Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp5n8xaljs.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5n8xaljs.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5n8xaljs.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5n8xaljs.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp5n8xaljs.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5n8xaljs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    // declaring 2D array \n    int L[m + 1][n + 1][o + 1]; \n  \n    // looping through the string \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpz06871k5.d(15): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpz06871k5.d(10): Error: no property `length` for type `string`\n/tmp/tmpz06871k5.d(11): Error: no property `length` for type `string`\n/tmp/tmpz06871k5.d(12): Error: no property `length` for type `string`\n/tmp/tmpz06871k5.d(15): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz06871k5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdbqeiynr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdbqeiynr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbqeiynr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp9fer06m3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp9fer06m3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp9fer06m3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp9fer06m3.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp9fer06m3.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fer06m3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpvb3lc343.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpvb3lc343.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb3lc343.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpigj5oeck.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpigj5oeck.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpigj5oeck.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpigj5oeck.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpigj5oeck.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigj5oeck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp8u4y05rw.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp8u4y05rw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8u4y05rw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8u4y05rw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8u4y05rw.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8u4y05rw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpl5b7i7z5.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpl5b7i7z5.d(10): Error: no property `length` for type `string`\n/tmp/tmpl5b7i7z5.d(11): Error: no property `length` for type `string`\n/tmp/tmpl5b7i7z5.d(12): Error: no property `length` for type `string`\n/tmp/tmpl5b7i7z5.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5b7i7z5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n      Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpwzbndmrv.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpwzbndmrv.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpwzbndmrv.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpwzbndmrv.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpwzbndmrv.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzbndmrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpxyim3tlk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxyim3tlk.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyim3tlk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpc8vtsdu1.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpc8vtsdu1.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpc8vtsdu1.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpc8vtsdu1.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpc8vtsdu1.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8vtsdu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3zmqgzuu.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3zmqgzuu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zmqgzuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpg03_407a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpg03_407a.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg03_407a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpkzqon4_q.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpkzqon4_q.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzqon4_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpt6givy51.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpt6givy51.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6givy51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpcmr20t04.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpcmr20t04.d(10): Error: no property `length` for type `string`\n/tmp/tmpcmr20t04.d(11): Error: no property `length` for type `string`\n/tmp/tmpcmr20t04.d(12): Error: no property `length` for type `string`\n/tmp/tmpcmr20t04.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmr20t04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp6d25erm9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp6d25erm9.d(10): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(11): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(12): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d25erm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m + 1][n + 1][o + 1]; \n\t\n\tfor (long i = 0; i <= m; i++) \n\t{ \n\t\tfor (long j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (long k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp3z9hodiq.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmp3z9hodiq.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z9hodiq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpwu_r_rq5.d(10): Error: no property `length` for type `string`\n/tmp/tmpwu_r_rq5.d(11): Error: no property `length` for type `string`\n/tmp/tmpwu_r_rq5.d(12): Error: no property `length` for type `string`\n/tmp/tmpwu_r_rq5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpwu_r_rq5.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu_r_rq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1])); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpahbai353.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpahbai353.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpahbai353.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpahbai353.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpahbai353.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahbai353.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp26c33nxd.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp26c33nxd.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26c33nxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpu6x50yhr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpu6x50yhr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6x50yhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    // declaring the array for storing the dp values \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpvylyzovt.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvylyzovt.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvylyzovt.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvylyzovt.d(15): Error: variable `m` cannot be read at compile time\n/tmp/tmpvylyzovt.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvylyzovt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmps1c68lvk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmps1c68lvk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmps1c68lvk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmps1c68lvk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmps1c68lvk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1c68lvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpbvlx2nfm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpbvlx2nfm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpbvlx2nfm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpbvlx2nfm.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpbvlx2nfm.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvlx2nfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3zmqgzuu.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3zmqgzuu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3zmqgzuu.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zmqgzuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpq02av__d.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpq02av__d.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq02av__d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpk7_1mae5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpk7_1mae5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7_1mae5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpcpvwp7hn.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpcpvwp7hn.d(10): Error: no property `length` for type `string`\n/tmp/tmpcpvwp7hn.d(11): Error: no property `length` for type `string`\n/tmp/tmpcpvwp7hn.d(12): Error: no property `length` for type `string`\n/tmp/tmpcpvwp7hn.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpvwp7hn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpprtx0p04.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpprtx0p04.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprtx0p04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\t/* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n\tthat L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n\tand Z[0..k-1]*/\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\t/* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmprg08qpr4.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmprg08qpr4.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmprg08qpr4.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmprg08qpr4.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmprg08qpr4.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprg08qpr4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpk7_1mae5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpk7_1mae5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7_1mae5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpn8lqjejn.d(10): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(11): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(12): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpn8lqjejn.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8lqjejn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpt49jnb7t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt49jnb7t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt49jnb7t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt49jnb7t.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpt49jnb7t.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt49jnb7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpd2tdypg6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpd2tdypg6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2tdypg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length(); \n\tint n = Y.length(); \n\tint o = Z.length(); \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp1segshx5.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1segshx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp7_6an4hk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp7_6an4hk.d(10): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(11): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(12): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_6an4hk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length(); \n\tint n = Y.length(); \n\tint o = Z.length(); \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp9s2iegac.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s2iegac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpe67l_syj.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpe67l_syj.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe67l_syj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpxw75lpx5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxw75lpx5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxw75lpx5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxw75lpx5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxw75lpx5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxw75lpx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2m4u20p_.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2m4u20p_.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2m4u20p_.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2m4u20p_.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2m4u20p_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2m4u20p_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmps9f30pse.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmps9f30pse.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmps9f30pse.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmps9f30pse.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmps9f30pse.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9f30pse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpcikujte6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpcikujte6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpcikujte6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpcikujte6.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpcikujte6.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcikujte6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpj8onc6l8.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpj8onc6l8.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8onc6l8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpp2ra26di.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpp2ra26di.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpp2ra26di.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpp2ra26di.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpp2ra26di.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2ra26di.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpzewb8gws.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpzewb8gws.d(10): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(11): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(12): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzewb8gws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpgeugrwux.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpgeugrwux.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgeugrwux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpprtx0p04.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpprtx0p04.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprtx0p04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpjtlcg3ys.d(10): Error: no property `length` for type `string`\n/tmp/tmpjtlcg3ys.d(11): Error: no property `length` for type `string`\n/tmp/tmpjtlcg3ys.d(12): Error: no property `length` for type `string`\n/tmp/tmpjtlcg3ys.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjtlcg3ys.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjtlcg3ys.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpn8lqjejn.d(10): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(11): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(12): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpn8lqjejn.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8lqjejn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpdcj943bw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdcj943bw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdcj943bw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdcj943bw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdcj943bw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcj943bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpn8lqjejn.d(10): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(11): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(12): Error: no property `length` for type `string`\n/tmp/tmpn8lqjejn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpn8lqjejn.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8lqjejn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m + 1][n + 1][o + 1]; \n\t\n\tfor (long i = 0; i <= m; i++) \n\t{ \n\t\tfor (long j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (long k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp60zjnd2o.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmp60zjnd2o.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60zjnd2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length(); \n\tint n = Y.length(); \n\tint o = Z.length(); \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) { \n\t\tfor (int j = 0; j <= n; j++) { \n\t\t\tfor (int k = 0; k <= o; k++) { \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpu9fzbrs_.d(10): Error: no property `length` for type `string`\n/tmp/tmpu9fzbrs_.d(11): Error: no property `length` for type `string`\n/tmp/tmpu9fzbrs_.d(12): Error: no property `length` for type `string`\n/tmp/tmpu9fzbrs_.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpu9fzbrs_.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9fzbrs_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max( \n                        max(L[i - 1][j][k], L[i][j - 1][k]), \n                        L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp8fuh0zvi.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8fuh0zvi.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8fuh0zvi.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8fuh0zvi.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp8fuh0zvi.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fuh0zvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp34dutpaf.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp34dutpaf.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp34dutpaf.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp34dutpaf.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp34dutpaf.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34dutpaf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpd2tdypg6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpd2tdypg6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2tdypg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp68hoh5yn.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp68hoh5yn.d(10): Error: no property `length` for type `string`\n/tmp/tmp68hoh5yn.d(11): Error: no property `length` for type `string`\n/tmp/tmp68hoh5yn.d(12): Error: no property `length` for type `string`\n/tmp/tmp68hoh5yn.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68hoh5yn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb2n5bxqp.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpb2n5bxqp.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpb2n5bxqp.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpb2n5bxqp.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpb2n5bxqp.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2n5bxqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpkzqon4_q.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpkzqon4_q.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpkzqon4_q.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzqon4_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpe67l_syj.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpe67l_syj.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpe67l_syj.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe67l_syj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m+1][n+1][o+1]; \n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp38pshe9j.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp38pshe9j.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp38pshe9j.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp38pshe9j.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp38pshe9j.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38pshe9j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m+1][n+1][o+1]; \n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpj4b76q06.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpj4b76q06.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpj4b76q06.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpj4b76q06.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpj4b76q06.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4b76q06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpzewb8gws.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpzewb8gws.d(10): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(11): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(12): Error: no property `length` for type `string`\n/tmp/tmpzewb8gws.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzewb8gws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    // declaring 2D array to store the dp values \n    long L[m + 1][n + 1][o + 1]; \n  \n    // looping through the string and filling the dp array \n    for (size_t i = 0; i <= m; i++) { \n        for (size_t j = 0; j <= n; j++) { \n            for (size_t k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    // L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1] \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp7iwj9owk.d(15): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmp7iwj9owk.d(10): Error: no property `length` for type `string`\n/tmp/tmp7iwj9owk.d(11): Error: no property `length` for type `string`\n/tmp/tmp7iwj9owk.d(12): Error: no property `length` for type `string`\n/tmp/tmp7iwj9owk.d(15): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7iwj9owk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp3xktgvj3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3xktgvj3.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3xktgvj3.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xktgvj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmppdta7b9a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmppdta7b9a.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdta7b9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw5z49e1q.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpw5z49e1q.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5z49e1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmp6d25erm9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp6d25erm9.d(10): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(11): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(12): Error: no property `length` for type `string`\n/tmp/tmp6d25erm9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d25erm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpqdcke8x6.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmpqdcke8x6.d(10): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(11): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(12): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdcke8x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb06615xa.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpb06615xa.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb06615xa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpk25jty_m.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpk25jty_m.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpk25jty_m.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpk25jty_m.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpk25jty_m.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk25jty_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length;\n\tint n = Y.length;\n\tint o = Z.length;\n\tint L[m+1][n+1][o+1]; \n\tint i, j, k; \n\t\n\t/* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n\t\tthat L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n\t\tand Z[0..k-1]*/\n\tfor (i=0; i<=m; i++) \n\t{ \n\t\tfor (j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\t/* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp8ky1qbeu.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp8ky1qbeu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8ky1qbeu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8ky1qbeu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8ky1qbeu.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ky1qbeu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2dzdh5x9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp2dzdh5x9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2dzdh5x9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2dzdh5x9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2dzdh5x9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dzdh5x9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp91e72k06.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp91e72k06.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp91e72k06.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp91e72k06.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp91e72k06.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91e72k06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpk7_1mae5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpk7_1mae5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7_1mae5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpq02av__d.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpq02av__d.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpq02av__d.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq02av__d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpg03_407a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpg03_407a.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg03_407a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpmdneesdc.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmdneesdc.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmdneesdc.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmdneesdc.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmdneesdc.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdneesdc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m+1][n+1][o+1]; \n    for (int i=0; i<=m; i++) \n    { \n        for (int j=0; j<=n; j++) \n        { \n            for (int k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], \n                                         L[i][j-1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmped_inm5g.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmped_inm5g.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmped_inm5g.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmped_inm5g.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmped_inm5g.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmped_inm5g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp26c33nxd.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp26c33nxd.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp26c33nxd.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26c33nxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpt88brvf4.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpt88brvf4.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt88brvf4.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt88brvf4.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt88brvf4.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt88brvf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpnhcn6gns.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpnhcn6gns.d(10): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(11): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(12): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhcn6gns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmppdta7b9a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmppdta7b9a.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdta7b9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdbqeiynr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdbqeiynr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbqeiynr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp7_6an4hk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp7_6an4hk.d(10): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(11): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(12): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_6an4hk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpp0o2twq2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpp0o2twq2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpp0o2twq2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpp0o2twq2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpp0o2twq2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0o2twq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                        L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp5eebdfa4.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5eebdfa4.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5eebdfa4.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5eebdfa4.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5eebdfa4.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5eebdfa4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpg03_407a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpg03_407a.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg03_407a.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg03_407a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length(); \n\tint n = Y.length(); \n\tint o = Z.length(); \n\t\n\tint L[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptvrwl22c.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmptvrwl22c.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvrwl22c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp186z7znh.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp186z7znh.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp186z7znh.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp186z7znh.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp186z7znh.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp186z7znh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2fm_sqeb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2fm_sqeb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fm_sqeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpitmgkt84.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpitmgkt84.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitmgkt84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpbt69t2pa.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpbt69t2pa.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpbt69t2pa.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpbt69t2pa.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpbt69t2pa.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbt69t2pa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpgeugrwux.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpgeugrwux.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpgeugrwux.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgeugrwux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length, n = Y.length, o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpg2yjbw01.d(11): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpg2yjbw01.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg2yjbw01.d(10): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg2yjbw01.d(10): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg2yjbw01.d(11): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2yjbw01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n      Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpfof122bf.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpfof122bf.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpfof122bf.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpfof122bf.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpfof122bf.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfof122bf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpyf31s7vi.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpyf31s7vi.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpyf31s7vi.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpyf31s7vi.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpyf31s7vi.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf31s7vi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdbqeiynr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdbqeiynr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbqeiynr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpg3a5hz1f.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg3a5hz1f.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg3a5hz1f.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg3a5hz1f.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpg3a5hz1f.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3a5hz1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp7c8qgu4o.d(10): Error: no property `length` for type `string`\n/tmp/tmp7c8qgu4o.d(11): Error: no property `length` for type `string`\n/tmp/tmp7c8qgu4o.d(12): Error: no property `length` for type `string`\n/tmp/tmp7c8qgu4o.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7c8qgu4o.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7c8qgu4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[][][] = new long[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                               max(L[i][j - 1][k], \n                               L[i][j][k - 1])); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpstoaqg6e.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpstoaqg6e.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpstoaqg6e.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstoaqg6e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpt6givy51.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt6givy51.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpt6givy51.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6givy51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdbqeiynr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdbqeiynr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbqeiynr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp0e27ci8o.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp0e27ci8o.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp0e27ci8o.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp0e27ci8o.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp0e27ci8o.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e27ci8o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length;\n\tint n = Y.length;\n\tint o = Z.length;\n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_8eltgo_.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp_8eltgo_.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp_8eltgo_.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp_8eltgo_.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp_8eltgo_.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8eltgo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n      Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpn1iqnp3l.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpn1iqnp3l.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpn1iqnp3l.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpn1iqnp3l.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpn1iqnp3l.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1iqnp3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmphhjjul0i.d(10): Error: no property `length` for type `string`\n/tmp/tmphhjjul0i.d(11): Error: no property `length` for type `string`\n/tmp/tmphhjjul0i.d(12): Error: no property `length` for type `string`\n/tmp/tmphhjjul0i.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmphhjjul0i.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhjjul0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2fm_sqeb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2fm_sqeb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fm_sqeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpd2tdypg6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpd2tdypg6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2tdypg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                               L[i][j - 1][k], \n                               L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n        Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpu0pd_gqp.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpu0pd_gqp.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpu0pd_gqp.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpu0pd_gqp.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpu0pd_gqp.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0pd_gqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpprtx0p04.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpprtx0p04.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprtx0p04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpvb3lc343.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpvb3lc343.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb3lc343.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2fm_sqeb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2fm_sqeb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fm_sqeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpd2tdypg6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpd2tdypg6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpd2tdypg6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2tdypg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpxyim3tlk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxyim3tlk.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyim3tlk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n    int L[m + 1][n + 1][o + 1]; \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptyld3sho.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmptyld3sho.d(10): Error: no property `length` for type `string`\n/tmp/tmptyld3sho.d(11): Error: no property `length` for type `string`\n/tmp/tmptyld3sho.d(12): Error: no property `length` for type `string`\n/tmp/tmptyld3sho.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyld3sho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppxn5urm9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmppxn5urm9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmppxn5urm9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmppxn5urm9.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmppxn5urm9.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppxn5urm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m+1][n+1][o+1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i=0; i<=m; i++) \n    { \n        for (int j=0; j<=n; j++) \n        { \n            for (int k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmplzob5wb0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmplzob5wb0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmplzob5wb0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmplzob5wb0.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmplzob5wb0.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzob5wb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpprtx0p04.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpprtx0p04.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpprtx0p04.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprtx0p04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1]*/\n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmphlexr1lr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmphlexr1lr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlexr1lr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpshdnxhgl.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpshdnxhgl.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpshdnxhgl.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpshdnxhgl.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpshdnxhgl.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshdnxhgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp6keuovu9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp6keuovu9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp6keuovu9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp6keuovu9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp6keuovu9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6keuovu9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp7_6an4hk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp7_6an4hk.d(10): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(11): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(12): Error: no property `length` for type `string`\n/tmp/tmp7_6an4hk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_6an4hk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m+1][n+1][o+1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1]*/\n    for (int i=0; i<=m; i++) \n    { \n        for (int j=0; j<=n; j++) \n        { \n            for (int k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpid8qbdk9.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpid8qbdk9.d(10): Error: no property `length` for type `string`\n/tmp/tmpid8qbdk9.d(11): Error: no property `length` for type `string`\n/tmp/tmpid8qbdk9.d(12): Error: no property `length` for type `string`\n/tmp/tmpid8qbdk9.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid8qbdk9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpu6x50yhr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpu6x50yhr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpu6x50yhr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6x50yhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp0ene6jq8.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp0ene6jq8.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp0ene6jq8.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp0ene6jq8.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp0ene6jq8.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ene6jq8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpvu6ojhnw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvu6ojhnw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvu6ojhnw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvu6ojhnw.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpvu6ojhnw.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvu6ojhnw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpqdcke8x6.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmpqdcke8x6.d(10): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(11): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(12): Error: no property `length` for type `string`\n/tmp/tmpqdcke8x6.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdcke8x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2fm_sqeb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2fm_sqeb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fm_sqeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw5z49e1q.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpw5z49e1q.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5z49e1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw5z49e1q.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpw5z49e1q.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpw5z49e1q.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5z49e1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpxyim3tlk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxyim3tlk.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxyim3tlk.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyim3tlk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \n  \n// Driver Code \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpquclogxv.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpquclogxv.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpquclogxv.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpquclogxv.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpquclogxv.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquclogxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpvb3lc343.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvb3lc343.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpvb3lc343.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb3lc343.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp2fm_sqeb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2fm_sqeb.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp2fm_sqeb.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fm_sqeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     max(L[i][j - 1][k], \n                                         L[i][j][k - 1])); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp_4jocq8i.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp_4jocq8i.d(10): Error: no property `length` for type `string`\n/tmp/tmp_4jocq8i.d(11): Error: no property `length` for type `string`\n/tmp/tmp_4jocq8i.d(12): Error: no property `length` for type `string`\n/tmp/tmp_4jocq8i.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4jocq8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1])); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpxjt9d8mq.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxjt9d8mq.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxjt9d8mq.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxjt9d8mq.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxjt9d8mq.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjt9d8mq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpw59yqkiz.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpw59yqkiz.d(10): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(11): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(12): Error: no property `length` for type `string`\n/tmp/tmpw59yqkiz.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw59yqkiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpdbqeiynr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpdbqeiynr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdbqeiynr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbqeiynr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                               max(L[i][j - 1][k], L[i][j][k - 1])); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpbf1ca5de.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpbf1ca5de.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpbf1ca5de.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpbf1ca5de.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpbf1ca5de.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf1ca5de.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpnhcn6gns.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpnhcn6gns.d(10): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(11): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(12): Error: no property `length` for type `string`\n/tmp/tmpnhcn6gns.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhcn6gns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m+1][n+1][o+1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppqnkkw40.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmppqnkkw40.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmppqnkkw40.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmppqnkkw40.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmppqnkkw40.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqnkkw40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppwy3p85k.d(10): Error: no property `length` for type `string`\n/tmp/tmppwy3p85k.d(11): Error: no property `length` for type `string`\n/tmp/tmppwy3p85k.d(12): Error: no property `length` for type `string`\n/tmp/tmppwy3p85k.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmppwy3p85k.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwy3p85k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \n  \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp9ycyzu7p.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp9ycyzu7p.d(10): Error: no property `length` for type `string`\n/tmp/tmp9ycyzu7p.d(11): Error: no property `length` for type `string`\n/tmp/tmp9ycyzu7p.d(12): Error: no property `length` for type `string`\n/tmp/tmp9ycyzu7p.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ycyzu7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpuvy9xc4u.d(10): Error: no property `length` for type `string`\n/tmp/tmpuvy9xc4u.d(11): Error: no property `length` for type `string`\n/tmp/tmpuvy9xc4u.d(12): Error: no property `length` for type `string`\n/tmp/tmpuvy9xc4u.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpuvy9xc4u.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvy9xc4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m+1][n+1][o+1]; \n\t\n\tfor (long i=0; i<=m; i++) \n\t{ \n\t\tfor (long j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (long k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmprxsn8x5v.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmprxsn8x5v.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprxsn8x5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length(); \n    int n = Y.length(); \n    int o = Z.length(); \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpcli2npzd.d(10): Error: no property `length` for type `string`\n/tmp/tmpcli2npzd.d(11): Error: no property `length` for type `string`\n/tmp/tmpcli2npzd.d(12): Error: no property `length` for type `string`\n/tmp/tmpcli2npzd.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpcli2npzd.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcli2npzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmplysju_4k.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmplysju_4k.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmplysju_4k.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmplysju_4k.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmplysju_4k.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplysju_4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m+1][n+1][o+1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1] */\n    for (long i=0; i<=m; i++) \n    { \n        for (long j=0; j<=n; j++) \n        { \n            for (long k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmprtnuthlo.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmprtnuthlo.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtnuthlo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpmhop717n.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmhop717n.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmhop717n.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhop717n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpgbiqo293.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpgbiqo293.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpgbiqo293.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpgbiqo293.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpgbiqo293.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbiqo293.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "/tmp/tmpf3ufb4zk.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpf3ufb4zk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpf3ufb4zk.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ufb4zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n      Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp96ez468f.d(14): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp96ez468f.d(10): Error: no property `length` for type `string`\n/tmp/tmp96ez468f.d(11): Error: no property `length` for type `string`\n/tmp/tmp96ez468f.d(12): Error: no property `length` for type `string`\n/tmp/tmp96ez468f.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96ez468f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpitmgkt84.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpitmgkt84.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpitmgkt84.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitmgkt84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m+1][n+1][o+1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpvgx4snh0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpvgx4snh0.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgx4snh0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpk7_1mae5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpk7_1mae5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpk7_1mae5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7_1mae5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}