{
  "name": "mbpp_641_is_nonagonal",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth nonagonal number.\n\t\n*/\nlong is_nonagonal(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_nonagonal;\n\n    assert(candidate(10L) == 325L);\n    assert(candidate(15L) == 750L);\n    assert(candidate(18L) == 1089L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn n * (3 * n - 2);\n}",
    "{\n\t// n = (3*n*n - n)/2\n\t// n = (3*n^2 - n)/2\n\t// 2*n = 3*n^2 - n\n\t// 2*n + n = 3*n^2\n\t// n^2 + 2*n + 1 = 3*n^2\n\t// n^2 - n^2 = 2*n + 1\n\t// 0 = 2*n + 1\n\t// -1 = 2*n\n\t// n = -1/2\n\t// n = -0.5\n\t// n is not an integer\n\t// n is not a nonagonal number\n\treturn false;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_prev = 0;\n\tlong nth_prev_prev = 0;\n\tlong nth_prev_prev_prev = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tnth_prev_prev_prev = nth_prev_prev;\n\t\tnth_prev_prev = nth_prev;\n\t\tnth_prev = nth;\n\t\tnth = i + nth_prev_prev_prev;\n\t}\n\t\n\treturn nth;\n}",
    "{\n\tlong x = (sqrt(8 * n + 1) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\treturn isqrt(8*n + 1) == (8*n + 1) % 2;\n}",
    "{\n\tlong nth_nonagonal = n * (3 * n - 2);\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth = (sqrt(1 + 8*n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile (nth < n) {\n\t\ti++;\n\t\tnth = i * (3 * i - 1) / 2;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (long) (sqrt(8.0 * n + 1.0) - 1.0) / 2.0;\n\tlong sum = (nth * (nth + 1)) / 2;\n\treturn (n == sum);\n}",
    "{\n\tauto a = cast(long) sqrt(8*n + 1);\n\treturn a*a == 8*n + 1;\n}",
    "{\n\treturn is_square(8*n + 1);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\treturn n * (3 * n - 1) / 2;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_test = 0;\n\tlong nth_nonagonal_test_2 = 0;\n\tlong nth_nonagonal_test_3 = 0;\n\tlong nth_nonagonal_test_4 = 0;\n\tlong nth_nonagonal_test_5 = 0;\n\tlong nth_nonagonal_test_6 = 0;\n\tlong nth_nonagonal_test_7 = 0;\n\tlong nth_nonagonal_test_8 = 0;\n\tlong nth_nonagonal_test_9 = 0;\n\tlong nth_nonagonal_test_10 = 0;\n\tlong nth_nonagonal_test_11 = 0;\n\tlong nth_nonagonal_test_12 = 0;\n\tlong nth_nonagonal_test_13 = 0;\n\tlong nth_nonagonal_test_14 = 0;\n\tlong nth_nonagonal_test_15 = 0;\n\tlong nth_nonagonal_test_16 = 0;\n\tlong nth_nonagonal_test_17 = 0;\n\tlong nth_nonagonal_test_18 = 0;\n\tlong nth_nonagonal_test_19 = 0;\n\tlong nth_nonagonal_test_20 = 0;\n\tlong nth_nonagonal_test_21 = 0;\n\tlong nth_nonagonal_test_22 = 0;\n\tlong nth_nonagonal_test_23 = 0;\n\tlong nth_nonagonal_test_24 = 0;\n\tlong nth_nonagonal_test_25 = 0;\n\tlong nth_nonagonal_test_26 = 0;\n\tlong nth_nonagonal_test_27 = 0;\n\tlong nth_nonagonal_test_28 = 0;\n\tlong nth_nonagonal_test_29 = 0;\n\tlong nth_nonagonal_test_30 = 0;\n\tlong nth_nonagonal_test_31 = 0;\n\tlong nth_nonagonal_test_32 = 0;\n\tlong nth_nonagonal_test_33 = 0;\n\tlong nth_"
  ]
}