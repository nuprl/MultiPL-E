{
  "name": "mbpp_641_is_nonagonal",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the nth nonagonal number.\n\t\n*/\nlong is_nonagonal(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_nonagonal;\n\n    assert(candidate(10L) == 325L);\n    assert(candidate(15L) == 750L);\n    assert(candidate(18L) == 1089L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn n * (3 * n - 2);\n}",
    "{\n\t// n = (3*n*n - n)/2\n\t// n = (3*n^2 - n)/2\n\t// 2*n = 3*n^2 - n\n\t// 2*n + n = 3*n^2\n\t// n^2 + 2*n + 1 = 3*n^2\n\t// n^2 - n^2 = 2*n + 1\n\t// 0 = 2*n + 1\n\t// -1 = 2*n\n\t// n = -1/2\n\t// n = -0.5\n\t// n is not an integer\n\t// n is not a nonagonal number\n\treturn false;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_prev = 0;\n\tlong nth_prev_prev = 0;\n\tlong nth_prev_prev_prev = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tnth_prev_prev_prev = nth_prev_prev;\n\t\tnth_prev_prev = nth_prev;\n\t\tnth_prev = nth;\n\t\tnth = i + nth_prev_prev_prev;\n\t}\n\t\n\treturn nth;\n}",
    "{\n\tlong x = (sqrt(8 * n + 1) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\treturn isqrt(8*n + 1) == (8*n + 1) % 2;\n}",
    "{\n\tlong nth_nonagonal = n * (3 * n - 2);\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth = (sqrt(1 + 8*n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile (nth < n) {\n\t\ti++;\n\t\tnth = i * (3 * i - 1) / 2;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (long) (sqrt(8.0 * n + 1.0) - 1.0) / 2.0;\n\tlong sum = (nth * (nth + 1)) / 2;\n\treturn (n == sum);\n}",
    "{\n\tauto a = cast(long) sqrt(8*n + 1);\n\treturn a*a == 8*n + 1;\n}",
    "{\n\treturn is_square(8*n + 1);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\treturn n * (3 * n - 1) / 2;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_test = 0;\n\tlong nth_nonagonal_test_2 = 0;\n\tlong nth_nonagonal_test_3 = 0;\n\tlong nth_nonagonal_test_4 = 0;\n\tlong nth_nonagonal_test_5 = 0;\n\tlong nth_nonagonal_test_6 = 0;\n\tlong nth_nonagonal_test_7 = 0;\n\tlong nth_nonagonal_test_8 = 0;\n\tlong nth_nonagonal_test_9 = 0;\n\tlong nth_nonagonal_test_10 = 0;\n\tlong nth_nonagonal_test_11 = 0;\n\tlong nth_nonagonal_test_12 = 0;\n\tlong nth_nonagonal_test_13 = 0;\n\tlong nth_nonagonal_test_14 = 0;\n\tlong nth_nonagonal_test_15 = 0;\n\tlong nth_nonagonal_test_16 = 0;\n\tlong nth_nonagonal_test_17 = 0;\n\tlong nth_nonagonal_test_18 = 0;\n\tlong nth_nonagonal_test_19 = 0;\n\tlong nth_nonagonal_test_20 = 0;\n\tlong nth_nonagonal_test_21 = 0;\n\tlong nth_nonagonal_test_22 = 0;\n\tlong nth_nonagonal_test_23 = 0;\n\tlong nth_nonagonal_test_24 = 0;\n\tlong nth_nonagonal_test_25 = 0;\n\tlong nth_nonagonal_test_26 = 0;\n\tlong nth_nonagonal_test_27 = 0;\n\tlong nth_nonagonal_test_28 = 0;\n\tlong nth_nonagonal_test_29 = 0;\n\tlong nth_nonagonal_test_30 = 0;\n\tlong nth_nonagonal_test_31 = 0;\n\tlong nth_nonagonal_test_32 = 0;\n\tlong nth_nonagonal_test_33 = 0;\n\tlong nth_",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(8 * n + 1) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(8*n+1)-1)/2;\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn n == (sqrt(8 * n + 1) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile (nth < n) {\n\t\ti++;\n\t\tnth = i * (3 * i - 1) / 2;\n\t}\n\tif (nth == n) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
    "{\n\tlong n_sqrt = sqrt(n);\n\tif (n_sqrt * n_sqrt == n)\n\t\treturn n_sqrt;\n\treturn 0;\n}",
    "{\n\treturn (n > 0) && (n == (sqrt(8*n + 1) + 1) / 2);\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_test = 0;\n\tlong nth_nonagonal_test_2 = 0;\n\tlong nth_nonagonal_test_3 = 0;\n\tlong nth_nonagonal_test_4 = 0;\n\tlong nth_nonagonal_test_5 = 0;\n\tlong nth_nonagonal_test_6 = 0;\n\tlong nth_nonagonal_test_7 = 0;\n\tlong nth_nonagonal_test_8 = 0;\n\tlong nth_nonagonal_test_9 = 0;\n\tlong nth_nonagonal_test_10 = 0;\n\tlong nth_nonagonal_test_11 = 0;\n\tlong nth_nonagonal_test_12 = 0;\n\tlong nth_nonagonal_test_13 = 0;\n\tlong nth_nonagonal_test_14 = 0;\n\tlong nth_nonagonal_test_15 = 0;\n\tlong nth_nonagonal_test_16 = 0;\n\tlong nth_nonagonal_test_17 = 0;\n\tlong nth_nonagonal_test_18 = 0;\n\tlong nth_nonagonal_test_19 = 0;\n\tlong nth_nonagonal_test_20 = 0;\n\tlong nth_nonagonal_test_21 = 0;\n\tlong nth_nonagonal_test_22 = 0;\n\tlong nth_nonagonal_test_23 = 0;\n\tlong nth_nonagonal_test_24 = 0;\n\tlong nth_nonagonal_test_25 = 0;\n\tlong nth_nonagonal_test_26 = 0;\n\tlong nth_nonagonal_test_27 = 0;\n\tlong nth_nonagonal_test_28 = 0;\n\tlong nth_nonagonal_test_29 = 0;\n\tlong nth_nonagonal_test_30 = 0;\n\tlong nth_nonagonal_test_31 = 0;\n\tlong nth_nonagonal_test_32 = 0;\n\tlong nth_nonagonal_test_33 = 0;\n\tlong nth_",
    "{\n\tlong nth = (long)sqrt(2*n);\n\treturn nth*(nth+1) == 2*n;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\t\n\tif(n <= 0)\n\t\treturn 0;\n\t\n\tnth_nonagonal = n * (3 * n - 2);\n\t\n\treturn nth_nonagonal;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\t// n = (3*n^2 - n)/2\n\t// n^2 - n - 2*n = 0\n\t// n^2 - 3n = 0\n\t// n(n-3) = 0\n\t// n = 0 or n = 3\n\t// n = 0 is not valid\n\t// n = 3 is valid\n\t// n = 3 is the first nonagonal number\n\t// n = 3 + 3*(n-1)\n\t// n = 3 + 3n - 3\n\t// n = 3n\n\t// n = 3n + 0\n\t// n = 3n + 3*0\n\t// n = 3n + 3*(n-1)\n\t// n = 3n + 3n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n - 3\n\t// n = 6n -",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (3 * nth - 1) / 2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong nth = 0;\n\tlong nth_prev = 0;\n\tlong i = 0;\n\twhile (nth < n) {\n\t\tnth_prev = nth;\n\t\tnth = (i * (i + 1)) / 2;\n\t\ti++;\n\t}\n\treturn nth == n ? i : 0;\n}",
    "{\n\tlong n1 = (long)floor(sqrt(2*n));\n\tlong n2 = (long)ceil(sqrt(2*n));\n\t\n\tif (n1*n2 == 2*n)\n\t\treturn n1;\n\telse\n\t\treturn -1;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_sq = 0;\n\tlong nth_sq_plus_1 = 0;\n\t\n\tnth_sq = n * n;\n\tnth_sq_plus_1 = nth_sq + 1;\n\tnth = (nth_sq_plus_1 / 2);\n\t\n\treturn nth;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_square = 0;\n\tlong nth_square_plus_one = 0;\n\tlong nth_square_plus_two = 0;\n\tlong nth_square_plus_three = 0;\n\tlong nth_square_plus_four = 0;\n\tlong nth_square_plus_five = 0;\n\tlong nth_square_plus_six = 0;\n\tlong nth_square_plus_seven = 0;\n\tlong nth_square_plus_eight = 0;\n\tlong nth_square_plus_nine = 0;\n\tlong nth_square_plus_ten = 0;\n\tlong nth_square_plus_eleven = 0;\n\tlong nth_square_plus_twelve = 0;\n\tlong nth_square_plus_thirteen = 0;\n\tlong nth_square_plus_fourteen = 0;\n\tlong nth_square_plus_fifteen = 0;\n\tlong nth_square_plus_sixteen = 0;\n\tlong nth_square_plus_seventeen = 0;\n\tlong nth_square_plus_eighteen = 0;\n\tlong nth_square_plus_nineteen = 0;\n\tlong nth_square_plus_twenty = 0;\n\tlong nth_square_plus_twentyone = 0;\n\tlong nth_square_plus_twentytwo = 0;\n\tlong nth_square_plus_twentythree = 0;\n\tlong nth_square_plus_twentyfour = 0;\n\tlong nth_square_plus_twentyfive = 0;\n\tlong nth_square_plus_twentysix = 0;\n\tlong nth_square_plus_twentyseven = 0;\n\tlong nth_square_plus_twentyeight = 0;\n\tlong nth_square_plus_twentynine = 0;\n\tlong nth_square_plus_thirty = 0;\n\tlong nth_square_plus_thirtyone = 0;\n\tlong nth_square_plus_thirtytwo = 0;\n\tlong nth_square_",
    "{\n\tlong n_sqrt = sqrt(8 * n + 1);\n\treturn (n_sqrt * n_sqrt == 8 * n + 1);\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == floor(nth);\n}",
    "{\n\treturn n == (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_count = 0;\n\tlong nth_nonagonal_count_prev = 0;\n\tlong nth_nonagonal_count_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_",
    "{\n\tlong nth_nonagonal = n * (3 * n - 2);\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth) ? nth : 0;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong n1 = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn n1 * (n1 + 1) / 2 == n;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (long)floor(sqrt(2*n + 0.25) - 0.5);\n\treturn nth*(nth+1)/2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_sqr = 0;\n\t\n\tnth_nonagonal_sqr = (8 * n) + 1;\n\tnth_nonagonal = (long)sqrt(nth_nonagonal_sqr);\n\t\n\tif (nth_nonagonal * nth_nonagonal == nth_nonagonal_sqr)\n\t\treturn nth_nonagonal;\n\telse\n\t\treturn 0;\n}",
    "{\n\treturn isqrt(1 + 8 * n) % 4 == 3;\n}",
    "{\n\tlong nth = (sqrt(1 + 8*n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong n_sqrt = sqrt(n);\n\treturn n == n_sqrt * n_sqrt;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile(nth < n)\n\t{\n\t\tnth += i;\n\t\ti++;\n\t}\n\treturn nth == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == floor(nth);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (long)sqrt(8*n+1);\n\treturn nth*(nth+1)/2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8*n) - 1) / 2 == (long)(sqrt(1 + 8*n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile(nth < n)\n\t{\n\t\tnth = (i * (3 * i - 1)) / 2;\n\t\ti++;\n\t}\n\tif(nth == n)\n\t{\n\t\treturn 1;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn is_square(8*n + 1);\n}",
    "{\n\tlong nth = (long)floor((sqrt(8*n + 1) - 1) / 2);\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong m = (sqrt(8*n+1)-1)/2;\n\treturn m*(m+1)/2 == n;\n}",
    "{\n\tlong n2 = n * 2;\n\tlong n3 = n2 + 1;\n\tlong n4 = n3 * 2;\n\tlong n5 = n4 + 1;\n\tlong n6 = n5 * 2;\n\tlong n7 = n6 + 1;\n\tlong n8 = n7 * 2;\n\tlong n9 = n8 + 1;\n\tlong n10 = n9 * 2;\n\tlong n11 = n10 + 1;\n\tlong n12 = n11 * 2;\n\tlong n13 = n12 + 1;\n\tlong n14 = n13 * 2;\n\tlong n15 = n14 + 1;\n\tlong n16 = n15 * 2;\n\tlong n17 = n16 + 1;\n\tlong n18 = n17 * 2;\n\tlong n19 = n18 + 1;\n\tlong n20 = n19 * 2;\n\tlong n21 = n20 + 1;\n\tlong n22 = n21 * 2;\n\tlong n23 = n22 + 1;\n\tlong n24 = n23 * 2;\n\tlong n25 = n24 + 1;\n\tlong n26 = n25 * 2;\n\tlong n27 = n26 + 1;\n\tlong n28 = n27 * 2;\n\tlong n29 = n28 + 1;\n\tlong n30 = n29 * 2;\n\tlong n31 = n30 + 1;\n\tlong n32 = n31 * 2;\n\tlong n33 = n32 + 1;\n\tlong n34 = n33 * 2;\n\tlong n35 = n34 + 1;\n\tlong n36 = n35 * 2;\n\tlong n37 = n36 + 1;\n\tlong n38 = n37 * 2;\n\tlong n39 = n38 + 1;\n\tlong n40 = n39 * 2;\n\tlong n41 = n40 + 1;\n\tlong n42 = n41 * 2;\n\tlong n43 = n42 + 1;\n\tlong n44 = n43 * 2;\n\tlong n45 = n44 + 1;\n\tlong n46 = n45 * 2;\n\tlong n47 = n46 + 1;\n\tlong n48",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\tlong a = (sqrt(1.0 + 8.0 * n) - 1.0) / 2.0;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_sqr = 0;\n\tlong nth_sqr_plus_nth = 0;\n\t\n\tnth_sqr = n * n;\n\tnth_sqr_plus_nth = nth_sqr + n;\n\t\n\tif(nth_sqr_plus_nth % 2 == 0)\n\t{\n\t\tnth = nth_sqr_plus_nth / 2;\n\t}\n\telse\n\t{\n\t\tnth = 0;\n\t}\n\t\n\treturn nth;\n}",
    "{\n\tlong n2 = n * 2;\n\tlong n3 = n2 * 3;\n\tlong n4 = n3 * 4;\n\tlong n5 = n4 * 5;\n\tlong n6 = n5 * 6;\n\tlong n7 = n6 * 7;\n\tlong n8 = n7 * 8;\n\tlong n9 = n8 * 9;\n\tlong n10 = n9 * 10;\n\tlong n11 = n10 * 11;\n\tlong n12 = n11 * 12;\n\tlong n13 = n12 * 13;\n\tlong n14 = n13 * 14;\n\tlong n15 = n14 * 15;\n\tlong n16 = n15 * 16;\n\tlong n17 = n16 * 17;\n\tlong n18 = n17 * 18;\n\tlong n19 = n18 * 19;\n\tlong n20 = n19 * 20;\n\tlong n21 = n20 * 21;\n\tlong n22 = n21 * 22;\n\tlong n23 = n22 * 23;\n\tlong n24 = n23 * 24;\n\tlong n25 = n24 * 25;\n\tlong n26 = n25 * 26;\n\tlong n27 = n26 * 27;\n\tlong n28 = n27 * 28;\n\tlong n29 = n28 * 29;\n\tlong n30 = n29 * 30;\n\tlong n31 = n30 * 31;\n\tlong n32 = n31 * 32;\n\tlong n33 = n32 * 33;\n\tlong n34 = n33 * 34;\n\tlong n35 = n34 * 35;\n\tlong n36 = n35 * 36;\n\tlong n37 = n36 * 37;\n\tlong n38 = n37 * 38;\n\tlong n39 = n38 * 39;\n\tlong n40 = n39 * 40;\n\tlong n41 = n40 * 41;\n\tlong n42 = n41 * 42;\n\tlong n43 = n42 * 43;\n\tlong n44 = n43 * 44;\n\tlong n45 = n44 * 45;\n\tlong n46 = n45 * 46;\n\tlong n47 = n46 * 47;\n\tlong n48",
    "{\n\treturn n == (sqrt(8*n+1) - 1)/2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == floor(nth);\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(1 + 8*n) - 1) / 2;\n\treturn a*(a+1)/2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_n = 0;\n\tlong nth_n_1 = 0;\n\tlong nth_n_2 = 0;\n\tlong nth_n_3 = 0;\n\tlong nth_n_4 = 0;\n\tlong nth_n_5 = 0;\n\tlong nth_n_6 = 0;\n\tlong nth_n_7 = 0;\n\tlong nth_n_8 = 0;\n\tlong nth_n_9 = 0;\n\tlong nth_n_10 = 0;\n\tlong nth_n_11 = 0;\n\tlong nth_n_12 = 0;\n\tlong nth_n_13 = 0;\n\tlong nth_n_14 = 0;\n\tlong nth_n_15 = 0;\n\tlong nth_n_16 = 0;\n\tlong nth_n_17 = 0;\n\tlong nth_n_18 = 0;\n\tlong nth_n_19 = 0;\n\tlong nth_n_20 = 0;\n\tlong nth_n_21 = 0;\n\tlong nth_n_22 = 0;\n\tlong nth_n_23 = 0;\n\tlong nth_n_24 = 0;\n\tlong nth_n_25 = 0;\n\tlong nth_n_26 = 0;\n\tlong nth_n_27 = 0;\n\tlong nth_n_28 = 0;\n\tlong nth_n_29 = 0;\n\tlong nth_n_30 = 0;\n\tlong nth_n_31 = 0;\n\tlong nth_n_32 = 0;\n\tlong nth_n_33 = 0;\n\tlong nth_n_34 = 0;\n\tlong nth_n_35 = 0;\n\tlong nth_n_36 = 0;\n\tlong nth_n_37 = 0;\n\tlong nth_n_38 = 0;\n\tlong nth_n_39 = 0;\n\tlong nth_n_40 = 0;\n\tlong nth_n_41 = 0;",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_check = 0;\n\tlong nth_nonagonal_check_2 = 0;\n\tlong nth_nonagonal_check_3 = 0;\n\tlong nth_nonagonal_check_4 = 0;\n\tlong nth_nonagonal_check_5 = 0;\n\tlong nth_nonagonal_check_6 = 0;\n\tlong nth_nonagonal_check_7 = 0;\n\tlong nth_nonagonal_check_8 = 0;\n\tlong nth_nonagonal_check_9 = 0;\n\tlong nth_nonagonal_check_10 = 0;\n\tlong nth_nonagonal_check_11 = 0;\n\tlong nth_nonagonal_check_12 = 0;\n\tlong nth_nonagonal_check_13 = 0;\n\tlong nth_nonagonal_check_14 = 0;\n\tlong nth_nonagonal_check_15 = 0;\n\tlong nth_nonagonal_check_16 = 0;\n\tlong nth_nonagonal_check_17 = 0;\n\tlong nth_nonagonal_check_18 = 0;\n\tlong nth_nonagonal_check_19 = 0;\n\tlong nth_nonagonal_check_20 = 0;\n\tlong nth_nonagonal_check_21 = 0;\n\tlong nth_nonagonal_check_22 = 0;\n\tlong nth_nonagonal_check_23 = 0;\n\tlong nth_nonagonal_check_24 = 0;\n\tlong nth_nonagonal_check_25 = 0;\n\tlong nth_nonagonal_check_26 = 0;\n\tlong nth_nonagonal_check_27 = 0;\n\tlong nth_nonagonal_check_28 = 0;\n\tlong nth_nonagonal_check_29 = 0;\n\tlong nth_nonagonal_check_30 = 0;\n\tlong nth_nonagonal_check_31 = 0;\n\tlong nth_nonagonal_check_32 = 0;\n\tlong nth_nonagonal_check_33 = 0;\n\tlong nth_",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = (long)sqrt(2*n);\n\treturn (nth*(nth+1))/2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile(nth < n) \n\t{\n\t\tnth += i;\n\t\ti++;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\treturn n == (3*n*n - 3*n + 1)/2;\n}",
    "{\n\treturn isqrt(1 + 8 * n) % 4 == 3;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == int(nth);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_prev = 0;\n\tlong nth_nonagonal_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_nonagonal_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == int(nth);\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (3 * nth - 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == int(nth);\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\treturn n * (3 * n - 1) / 2;\n}",
    "{\n\treturn isqrt(1 + 8 * n) % 2 == 1;\n}",
    "{\n\tlong nth = (long)sqrt(2*n + 0.25) - 0.5;\n\treturn nth*(nth+1)/2 == n;\n}",
    "{\n\tlong nth = (sqrt(8*n + 1) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong a = (sqrt(8*n + 1) - 1) / 2;\n\treturn (a * (a + 1)) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile(nth < n) {\n\t\ti++;\n\t\tnth = i * (3 * i - 1) / 2;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong i = 1;\n\twhile (n > 0) \n\t{\n\t\tn -= i;\n\t\ti++;\n\t}\n\treturn n == 0;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_sq = 0;\n\t\n\tnth = (sqrt(1 + 8 * n) - 1) / 2;\n\tnth_sq = nth * (nth + 1) / 2;\n\t\n\treturn nth_sq == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth * (nth + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile(nth < n)\n\t{\n\t\tnth += i;\n\t\ti++;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == trunc(nth);\n}",
    "{\n\treturn (n == (sqrt(8*n + 1) - 1) / 2);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(8*n+1) - 1) / 2;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile(nth < n) \n\t{\n\t\tnth = (i * (3 * i - 1)) / 2;\n\t\ti++;\n\t}\n\tif(nth == n) \n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
    "{\n\tlong n_ = n;\n\tlong i = 1;\n\twhile (n_ > 0) \n\t{\n\t\tn_ -= i;\n\t\ti++;\n\t}\n\treturn n_ == 0;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_sqr = 0;\n\tlong nth_sqr_plus_nth = 0;\n\t\n\tnth_sqr = n * n;\n\tnth_sqr_plus_nth = nth_sqr + n;\n\t\n\tif (nth_sqr_plus_nth % 2 == 0) {\n\t\tnth = nth_sqr_plus_nth / 2;\n\t}\n\t\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_n = 0;\n\t\n\twhile(nth_n < n)\n\t{\n\t\tnth++;\n\t\tnth_n = nth * (3 * nth - 1) / 2;\n\t}\n\t\n\tif(nth_n == n)\n\t\treturn nth;\n\telse\n\t\treturn 0;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth) ? nth : 0;\n}",
    "{\n\t//return n == (3*n*n - 3*n + 1) / 2;\n\treturn n == (3*n*n - 3*n + 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile (nth < n) \n\t{\n\t\tnth += i;\n\t\ti++;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile (nth < n) \n\t{\n\t\tnth += i;\n\t\t++i;\n\t}\n\treturn nth == n;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong n2 = n * 2;\n\tlong n3 = n2 * 2;\n\tlong n4 = n3 * 2;\n\tlong n5 = n4 * 2;\n\tlong n6 = n5 * 2;\n\tlong n7 = n6 * 2;\n\tlong n8 = n7 * 2;\n\tlong n9 = n8 * 2;\n\tlong n10 = n9 * 2;\n\tlong n11 = n10 * 2;\n\tlong n12 = n11 * 2;\n\tlong n13 = n12 * 2;\n\tlong n14 = n13 * 2;\n\tlong n15 = n14 * 2;\n\tlong n16 = n15 * 2;\n\tlong n17 = n16 * 2;\n\tlong n18 = n17 * 2;\n\tlong n19 = n18 * 2;\n\tlong n20 = n19 * 2;\n\tlong n21 = n20 * 2;\n\tlong n22 = n21 * 2;\n\tlong n23 = n22 * 2;\n\tlong n24 = n23 * 2;\n\tlong n25 = n24 * 2;\n\tlong n26 = n25 * 2;\n\tlong n27 = n26 * 2;\n\tlong n28 = n27 * 2;\n\tlong n29 = n28 * 2;\n\tlong n30 = n29 * 2;\n\tlong n31 = n30 * 2;\n\tlong n32 = n31 * 2;\n\tlong n33 = n32 * 2;\n\tlong n34 = n33 * 2;\n\tlong n35 = n34 * 2;\n\tlong n36 = n35 * 2;\n\tlong n37 = n36 * 2;\n\tlong n38 = n37 * 2;\n\tlong n39 = n38 * 2;\n\tlong n40 = n39 * 2;\n\tlong n41 = n40 * 2;\n\tlong n42 = n41 * 2;\n\tlong n43 = n42 * 2;\n\tlong n44 = n43 * 2;\n\tlong n45 = n44 * 2;\n\tlong n46 = n45 * 2;\n\tlong n47 = n46 * 2;\n\tlong n48",
    "{\n\tlong root = sqrt(1 + 8 * n);\n\treturn root * root == 1 + 8 * n && root % 2 == 1;\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == long(nth);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = (long)sqrt(2*n);\n\treturn nth*(nth+1) == 2*n;\n}",
    "{\n\tdouble x = (sqrt(1.0 + 8.0 * n) - 1.0) / 2.0;\n\treturn x == cast(long)x;\n}",
    "{\n\tauto a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a == cast(long)a;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_plus_1 = 0;\n\tlong nth_plus_2 = 0;\n\tlong nth_plus_3 = 0;\n\t\n\tnth = (n * (3 * n - 1)) / 2;\n\tnth_plus_1 = ((n + 1) * (3 * (n + 1) - 1)) / 2;\n\tnth_plus_2 = ((n + 2) * (3 * (n + 2) - 1)) / 2;\n\tnth_plus_3 = ((n + 3) * (3 * (n + 3) - 1)) / 2;\n\t\n\tif (nth == nth_plus_1 - nth_plus_2 + nth_plus_3)\n\t{\n\t\treturn nth;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}",
    "{\n\tlong x = (sqrt(8*n + 1) - 1) / 2;\n\treturn x*(x+1)/2 == n;\n}",
    "{\n\tlong nth = (sqrt(8*n + 1) - 1)/2;\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth_nonagonal = n * (3 * n - 1) / 2;\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth_nonagonal = n * (3 * n - 2);\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_prev = 0;\n\t\n\twhile (nth_nonagonal < n) {\n\t\tnth++;\n\t\tnth_nonagonal_prev = nth_nonagonal;\n\t\tnth_nonagonal = nth * (3 * nth - 1) / 2;\n\t}\n\t\n\tif (nth_nonagonal == n) {\n\t\treturn nth;\n\t}\n\t\n\treturn 0;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile(nth < n)\n\t{\n\t\tnth += i;\n\t\t++i;\n\t}\n\treturn nth == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8*n) - 1) / 2;\n}",
    "{\n\tlong n_sqrt = (long)sqrt(n);\n\treturn n_sqrt * (n_sqrt + 1) / 2 == n;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == floor(nth);\n}",
    "{\n\treturn n == (n*(3*n-1))/2;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_prev = 0;\n\tlong nth_nonagonal_prev_prev = 0;\n\t\n\tif (n == 1) \n\t{\n\t\treturn 1;\n\t}\n\t\n\twhile (nth < n) \n\t{\n\t\tnth_nonagonal_prev_prev = nth_nonagonal_prev;\n\t\tnth_nonagonal_prev = nth_nonagonal;\n\t\tnth_nonagonal = nth_nonagonal_prev + nth_nonagonal_prev_prev;\n\t\tnth++;\n\t}\n\t\n\treturn nth_nonagonal;\n}",
    "{\n\tlong nth = (long)sqrt(2*n + 0.25) - 0.5;\n\treturn nth*(nth+1)/2 == n;\n}",
    "{\n\treturn (n > 0) && (n == (sqrt(8*n + 1) + 1) / 2);\n}",
    "{\n\tlong a = (sqrt(8*n + 1) - 1) / 2;\n\treturn a*(a + 1)/2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8*n) - 1) / 2 == (int)(sqrt(1 + 8*n) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == (long)nth;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_square = 0;\n\tlong nth_square_plus_1 = 0;\n\tlong nth_square_minus_1 = 0;\n\t\n\tnth = (long)sqrt(n);\n\tnth_square = nth * nth;\n\tnth_square_plus_1 = (nth + 1) * (nth + 1);\n\tnth_square_minus_1 = (nth - 1) * (nth - 1);\n\t\n\tif (nth_square_plus_1 == n || nth_square_minus_1 == n)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 1;\n\twhile (nth < n) {\n\t\tnth = (i * (3 * i - 1)) / 2;\n\t\ti++;\n\t}\n\treturn nth;\n}",
    "{\n\tlong n_sqrt = (long)sqrt(n);\n\treturn n_sqrt * n_sqrt == n;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_prev = 0;\n\tlong nth_prev_prev = 0;\n\t\n\tif (n == 1)\n\t\treturn 1;\n\telse if (n == 2)\n\t\treturn 2;\n\telse if (n == 3)\n\t\treturn 4;\n\telse if (n == 4)\n\t\treturn 7;\n\telse if (n == 5)\n\t\treturn 11;\n\telse if (n == 6)\n\t\treturn 16;\n\telse if (n == 7)\n\t\treturn 22;\n\telse if (n == 8)\n\t\treturn 29;\n\telse if (n == 9)\n\t\treturn 37;\n\telse if (n == 10)\n\t\treturn 46;\n\telse if (n == 11)\n\t\treturn 56;\n\telse if (n == 12)\n\t\treturn 67;\n\telse if (n == 13)\n\t\treturn 79;\n\telse if (n == 14)\n\t\treturn 92;\n\telse if (n == 15)\n\t\treturn 106;\n\telse if (n == 16)\n\t\treturn 121;\n\telse if (n == 17)\n\t\treturn 137;\n\telse if (n == 18)\n\t\treturn 154;\n\telse if (n == 19)\n\t\treturn 172;\n\telse if (n == 20)\n\t\treturn 191;\n\telse if (n == 21)\n\t\treturn 211;\n\telse if (n == 22)\n\t\treturn 232;\n\telse if (n == 23)\n\t\treturn 254;\n\telse if (n == 24)\n\t\treturn 277;\n\telse if (n == 25)\n\t\treturn 301;\n\telse if (n == 26)\n\t\treturn 326;\n\telse if (n == 27)\n\t\treturn 352;\n\telse if (n == 28)\n\t\treturn 379;\n\telse if (n == 29)\n\t\treturn 407;\n\telse if (n == 30)\n\t\treturn 436;\n\telse if (n == 31)\n\t\treturn 466;\n\telse if (n == 32)\n\t\treturn",
    "{\n\tlong nth = (sqrt(8*n+1)-1)/2;\n\treturn nth;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\treturn (n == (n * (3 * n - 1)) / 2);\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong nth = 0;\n\tlong i = 0;\n\twhile(nth < n)\n\t{\n\t\tnth = (i * (i + 1)) / 2;\n\t\ti++;\n\t}\n\treturn nth == n;\n}",
    "{\n\treturn (sqrt(8*n+1) - 1) / 2;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth;\n}",
    "{\n\tlong nth = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn nth == int(nth);\n}",
    "{\n\treturn (sqrt(8*n + 1) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(8*n + 1) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}"
  ]
}