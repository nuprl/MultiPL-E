{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n  \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod = prod * arr[k]; \n  \n            sum = sum + prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tlong prod = 1;\n\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            sum = sum + curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Find product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \n/*\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod_2(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \n/*\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod_3(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \n\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        long prod = 1; \n        for (int j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpmyzord8l.d(11): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyzord8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            curr_prod = curr_prod * arr[j]; \n            res = res + curr_prod; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long len = arr.length; \n    for (long i = 0; i < len; i++) { \n        for (long j = i; j < len; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (size_t i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (size_t j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long result = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long curr_prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            curr_prod = curr_prod * arr[j]; \n            result += curr_prod; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tforeach(j; i .. n) \n\t\t{\n\t\t\tlong prod = 1;\n\t\t\tforeach(k; i .. j + 1) \n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting from i \n        for (long j = i; j < n; j++) { \n  \n            // Calculate product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays \n        // starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Find product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product \n            // to the result \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            curr_prod = curr_prod * arr[j]; \n            sum += curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod *= arr[j]; \n            sum += curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong prod = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tprod = 1;\n\t\t\tforeach(k; i .. j + 1)\n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong prod = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tprod = 1;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnxa8wma5.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpnxa8wma5.__unittest_L26_C1() [0x427e20]\n??:? void tmpnxa8wma5.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430680]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43015d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b015]\n??:? runModuleUnitTests [0x42bf81]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            for (int k = i; k <= j; k++) \n                prod = prod * arr[k]; \n            sum = sum + prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpxmg6muv_.d(12): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmg6muv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long result = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            result += curr_prod; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // For each subarray arr[i..j], find \n    // maximum value in arr[i..j] and \n    // multiply with (j-i+1) \n    for (long i = 0; i < n; i++) { \n  \n        // Initialize current product and \n        // maximum value \n        long curr_prod = 1; \n        long max_ele = arr[i]; \n  \n        // Traverse after the ith element \n        for (long j = i; j < n; j++) { \n  \n            // Update current product \n            curr_prod = curr_prod * arr[j]; \n  \n            // Update maximum value \n            max_ele = max(max_ele, arr[j]); \n  \n            // Add current product * (j-i+1) \n            // to the result \n            sum += curr_prod * (j - i + 1); \n        } \n  \n        // Add maximum element * (n-i) to the \n        // result \n        sum += max_ele * (n - i); \n    } \n  \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpxxi0dt8x.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxi0dt8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            for (int k = i; k <= j; k++) \n                prod = prod * arr[k]; \n            sum = sum + prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Traverse through all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Pick starting point \n        for (long j = i; j < n; j++) \n        { \n            // Pick ending point \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Total product of current subarray \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n  \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong sum = 0; \n\tlong[] prod = new long[n]; \n\t\n\t// Initialize prod array with 1 \n\tfor (long i = 0; i < n; i++) \n\t\tprod[i] = 1; \n\t\n\t// Compute product of all elements \n\t// in a subarray and store it in \n\t// prod array \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tfor (long j = i; j < n; j++) \n\t\t{ \n\t\t\tprod[i] = prod[i] * arr[j]; \n\t\t} \n\t} \n\t\n\t// Compute sum of products of all \n\t// subarrays \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tsum = sum + prod[i]; \n\t} \n\t\n\treturn sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ttenri8.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp2ttenri8.__unittest_L38_C1() [0x427ee0]\n??:? void tmp2ttenri8.__modtest() [0x427f90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b15a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b131]\n??:? runModuleUnitTests [0x42c09d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays \n        for (long j = i; j < n; j++) \n        { \n            // Initialize product \n            long prod = 1; \n  \n            // Find product of current subarray \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to \n            // overall sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[cast(int)j]; \n            sum += curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod = prod * arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmp140hp8lh.d(11): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp140hp8lh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n\tlong sum = 0; \n\tlong n = arr.length; \n\t\n\t// Iterate over all subarrays \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\t// Iterate over all subarrays starting from i \n\t\tfor (long j = i; j < n; j++) \n\t\t{ \n\t\t\t// Calculate product of current subarray \n\t\t\tlong prod = 1; \n\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\tprod *= arr[k]; \n\t\t\n\t\t\t// Add current subarray product to sum \n\t\t\tsum += prod; \n\t\t} \n\t} \n\t\n\treturn sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[cast(int)j]; \n            sum = sum + curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n  \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[cast(int)k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Calculate product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod = prod * arr[k]; \n            } \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        long prod = 1; \n        for (int j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n\tlong sum = 0; \n\tlong prod = 1; \n\tfor (int i = 0; i < arr.length; i++) \n\t{ \n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{ \n\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\tprod = prod * arr[k]; \n\t\t\tsum = sum + prod; \n\t\t\tprod = 1; \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n  \n            // Find product of current subarray \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to result \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong prod = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tprod = 1;\n\t\t\tforeach(k; i .. j + 1)\n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long prod = 1; \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            sum += curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Calculate product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray's product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n  \n    // Compute sum of products of all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Compute product of current subarray \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n  \n            // Add current subarray product to the sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            sum += curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            // Compute product of current subarray \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to result \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong prod = 1;\n\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long res = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            res += curr_prod; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n\tlong sum = 0; \n\tlong n = arr.length; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tfor (long j = i; j < n; j++) \n\t\t{ \n\t\t\tlong prod = 1; \n\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\tprod = prod * arr[k]; \n\t\t\tsum = sum + prod; \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays \n        for (long j = i; j < n; j++) { \n  \n            // Initialize product \n            long prod = 1; \n  \n            // Find product of current subarray \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to \n            // overall sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tlong prod = 1;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t{\n\t\t\t\tprod *= arr[k];\n\t\t\t}\n\t\t\tsum += prod;\n\t\t\tprod = 1;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n\tlong sum = 0; \n\tlong n = arr.length; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tlong prod = 1; \n\t\tfor (long j = i; j < n; j++) \n\t\t{ \n\t\t\tprod *= arr[j]; \n\t\t\tsum += prod; \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long prod = 1; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            for (int k = i; k <= j; k++) { \n                prod *= arr[k]; \n            } \n            sum += prod; \n            prod = 1; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n  \n    // Iterate through all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate through all subarrays \n        // starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Find product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to \n            // overall sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (int i = 0; i < n; i++) \n    { \n        for (int j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long prod = 1; \n        for (int j = i; j < arr.length; j++) \n        { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate through all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate through all subarrays starting with i \n        for (long j = i; j < n; j++) \n        { \n            // Calculate product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_prod = 1; \n        for (long j = i; j < n; j++) { \n            curr_prod = curr_prod * arr[j]; \n            sum = sum + curr_prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long prod = 1; \n        for (long j = i; j < n; j++) { \n            prod = prod * arr[j]; \n            sum = sum + prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting from i \n        for (long j = i; j < n; j++) { \n  \n            // Calculate product of current subarray \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n  \n            // Add current subarray product to sum \n            sum += prod; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            long prod = 1; \n            for (int k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod *= arr[k]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long prod = 1; \n        for (long j = i; j < n; j++) \n        { \n            prod *= arr[j]; \n            sum += prod; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n{ \n    long result = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long prod = 1; \n            for (long k = i; k <= j; k++) \n                prod = prod * arr[k]; \n            result += prod; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}