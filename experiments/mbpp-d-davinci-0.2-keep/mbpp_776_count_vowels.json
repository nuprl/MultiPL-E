{
  "name": "mbpp_776_count_vowels",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tfor(long i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n\t\t\t\t\ttest_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i'",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == len-1) {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn"
  ]
}