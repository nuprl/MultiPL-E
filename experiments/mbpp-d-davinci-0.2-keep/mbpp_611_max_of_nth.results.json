{
  "name": "mbpp_611_max_of_nth",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; 0 .. test_list.length)\n\t{\n\t\tif(test_list[i][N] > max)\n\t\t{\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i.length > N)\n\t\t{\n\t\t\tif(i[N] > max)\n\t\t\t{\n\t\t\t\tmax = i[N];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max_val = 0;\n\tforeach(long[] list; test_list)\n\t{\n\t\tif(list.length > N)\n\t\t{\n\t\t\tif(list[N] > max_val)\n\t\t\t{\n\t\t\t\tmax_val = list[N];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_val;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i, ref elem; test_list)\n\t{\n\t\tif(elem[N] > max)\n\t\t\tmax = elem[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. test_list.length)\n\t{\n\t\tif(test_list[i][N] > max)\n\t\t\tmax = test_list[i][N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(ref row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] list; test_list)\n\t{\n\t\tif(list[N] > max)\n\t\t{\n\t\t\tmax = list[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row.length > N)\n\t\t{\n\t\t\tif(row[N] > max)\n\t\t\t{\n\t\t\t\tmax = row[N];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach (row; test_list)\n\t{\n\t\tif (row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list) \n\t{\n\t\tif(row[N] > max) \n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] sublist; test_list)\n\t{\n\t\tif(sublist[N] > max)\n\t\t{\n\t\t\tmax = sublist[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list) \n\t{\n\t\tif(i[N] > max) \n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row.length > N)\n\t\t{\n\t\t\tif(row[N] > max)\n\t\t\t{\n\t\t\t\tmax = row[N];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max_value = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max_value)\n\t\t{\n\t\t\tmax_value = row[N];\n\t\t}\n\t}\n\treturn max_value;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max_val = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max_val)\n\t\t\tmax_val = row[N];\n\t}\n\treturn max_val;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list) \n\t{\n\t\tif(i[N] > max) \n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] l; test_list)\n\t{\n\t\tif(l[N] > max)\n\t\t\tmax = l[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif (i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif (i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tmax = max(max, row[N]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp5uvl08cf.d(13): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uvl08cf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(ref row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list) \n\t{\n\t\tif (i[N] > max) \n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] list; test_list)\n\t{\n\t\tif(list[N] > max)\n\t\t{\n\t\t\tmax = list[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max_value = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max_value)\n\t\t{\n\t\t\tmax_value = row[N];\n\t\t}\n\t}\n\treturn max_value;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list) \n\t{\n\t\tif(row[N] > max) \n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif (row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif (i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list) \n\t{\n\t\tif(i[N] > max) \n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}