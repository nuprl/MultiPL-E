{
  "name": "mbpp_578_interleave_lists",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[list1.length * 3];\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i, elem; list1)\n\t{\n\t\tresult ~= elem;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i, item; list1)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, item; list1)\n\t{\n\t\tresult[i * 3] = item;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tforeach(i, e; list1)\n\t{\n\t\tresult[i * 3] = e;\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\t\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tresult[i * 3] = list1[i];\n\t\tresult[i * 3 + 1] = list2[i];\n\t\tresult[i * 3 + 2] = list3[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[list1.length * 3];\n\tint i = 0;\n\tforeach(long l1; list1)\n\t{\n\t\tresult[i] = l1;\n\t\tresult[i + 1] = list2[i];\n\t\tresult[i + 2] = list3[i];\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i, e; list1)\n\t{\n\t\tresult ~= e;\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tresult ~= list1[i];\n\t\tresult ~= list2[i];\n\t\tresult ~= list3[i];\n\t}\n\treturn result;\n}"
  ]
}