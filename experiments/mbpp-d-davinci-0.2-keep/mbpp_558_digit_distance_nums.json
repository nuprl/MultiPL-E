{
  "name": "mbpp_558_digit_distance_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\t\n\tfor (int i = 0; i < max_len; i++) {\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\tif (i < n1_len) {\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\tif (i < n2_len) {\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.toString().length;\n\tlong n2_digits = n2.toString().length;\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.toString()[i] : '0';\n\t\tlong n2_digit = n2_digits > i ? n2.toString()[i] : '0';\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.toString().length;\n\tlong n2_digits = n2.toString().length;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tforeach(i; 0..max_len)\n\t{\n\t\tif(i < n1_len && i < n2_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse if(i < n1_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += abs(n2_digits[i]);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length)) \n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; to!string(n1))\n\t{\n\t\tforeach(d2; to!string(n2))\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tauto digits1 = to!string(n1).map!(a => a.to!long).array;\n\tauto digits2 = to!string(n2).map!(a => a.to!long).array;\n\t\n\tlong sum = 0;\n\t\n\tforeach(i, digit1; digits1)\n\t{\n\t\tsum += abs(digit1 - digits2[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(digit1, digit2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(digit1 - digit2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_length = n1_digits.length;\n\tlong n2_length = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index;\n\tlong n2_digit_index;\n\tlong n1_digit_index_max = n1_length - 1;\n\tlong n2_digit_index_max = n2_length - 1;\n\tlong n1_digit_index_min = 0;\n\tlong n2_digit_index_min = 0;\n\tlong n1_digit_index_diff;\n\tlong n2_digit_index_diff;\n\tlong n1_digit_index_diff_abs;\n\tlong n2_digit_index_diff_abs;\n\tlong n1_digit_index_diff_abs_max;\n\tlong n2_digit_index_diff_abs_max;\n\tlong n1_digit_index_diff_abs_min;\n\tlong n2_digit_index_diff_abs_min;\n\tlong n1_digit_index_diff_abs_min_max;\n\tlong n2_digit_index_diff_abs_min_max;\n\tlong n1_digit_index_diff_abs_min_max_diff;\n\tlong n2_digit_index_diff_abs_min_max_diff;\n\tlong n1_digit_index_diff_abs_min_max_diff_abs;\n\tlong n2_digit_index_diff_abs_min_max_diff_abs;\n\tlong n1_digit_index_diff_abs_min_max_diff_abs_max;\n\tlong n2_digit_index_diff_abs_min_max_diff_abs_max;\n\tlong n1_digit_index_diff_abs_min_max_diff_abs_max_diff;\n\tlong n2_digit_index_diff_abs_min_max_diff_abs_max_diff;\n\tlong",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong distance = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\twhile (n1 != 0)\n\t{\n\t\tn1_digits++;\n\t\tn1 /= 10;\n\t}\n\t\n\twhile (n2 != 0)\n\t{\n\t\tn2_digits++;\n\t\tn2 /= 10;\n\t}\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tdistance = n1_digits - n2_digits;\n\t}\n\telse\n\t{\n\t\tdistance = n2_digits - n1_digits;\n\t}\n\t\n\treturn distance;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t\tsum += abs(i[0] - i[1]);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong n1_i = 0;\n\tlong n2_i = 0;\n\twhile (n1_i < n1_len && n2_i < n2_len) {\n\t\tsum += abs(n1_digits[n1_i] - n2_digits[n2_i]);\n\t\tn1_i++;\n\t\tn2_i++;\n\t}\n\twhile (n1_i < n1_len) {\n\t\tsum += n1_digits[n1_i];\n\t\tn1_i++;\n\t}\n\twhile (n2_i < n2_len) {\n\t\tsum += n2_digits[n2_i];\n\t\tn2_i++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1%10 - n2%10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tif (n1 < 0 || n2 < 0)\n\t\treturn -1;\n\telse\n\t{\n\t\twhile (n1 > 0 || n2 > 0)\n\t\t{\n\t\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.to!string, n2.to!string))\n\t\tsum += abs(i[0] - i[1]);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tauto n1_digits = to!(string)(n1);\n\tauto n2_digits = to!(string)(n2);\n\t\n\tif (n1_digits.length < n2_digits.length)\n\t{\n\t\tauto temp = n1_digits;\n\t\tn1_digits = n2_digits;\n\t\tn2_digits = temp;\n\t}\n\t\n\tfor (size_t i = 0; i < n1_digits.length; i++)\n\t{\n\t\tif (i < n2_digits.length)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0 .. max_digits)\n\t{\n\t\tlong n1_digit = n1.digits(i);\n\t\tlong n2_digit = n2.digits(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * (10 ^ diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * (10 ^ diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong min_len = min(n1_len, n2_len);\n\tlong max_len = max(n1_len, n2_len);\n\tlong i = 0;\n\twhile (i < min_len) {\n\t\tresult += abs(n1_digits[i] - n2_digits[i]);\n\t\ti++;\n\t}\n\twhile (i < max_len) {\n\t\tif (n1_len > n2_len) {\n\t\t\tresult += n1_digits[i];\n\t\t} else {\n\t\t\tresult += n2_digits[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1, d2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t\tsum += abs(i[0] - i[1]);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 && n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = n1 > n2 ? n1 : n2;\n\twhile(n > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\t\n\t\tsum += abs(d1 - d2);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong len = max(n1_len, n2_len);\n\t\n\tforeach(i; 0..len)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\tif(i < n1_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\tif(i < n2_len)\n\t\t{\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n1_digits < n2_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1 < 0)\n\t\tn1 = -n1;\n\tif (n2 < 0)\n\t\tn2 = -n2;\n\t\n\tn1_digits = log10(n1) + 1;\n\tn2_digits = log10(n2) + 1;\n\t\n\twhile (n1_digits > 0 || n2_digits > 0)\n\t{\n\t\tif (n1_digits > 0)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn1 /= 10;\n\t\t\tn1_digits--;\n\t\t}\n\t\telse\n\t\t\tn1_digit = 0;\n\t\t\n\t\tif (n2_digits > 0)\n\t\t{\n\t\t\tn2_digit = n2 % 10;\n\t\t\tn2 /= 10;\n\t\t\tn2_digits--;\n\t\t}\n\t\telse\n\t\t\tn2_digit = 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tforeach(i; 0..max_len) {\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\tif(i < n1_len) {\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\tif(i < n2_len) {\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\tfor (long i = 0; i < max_len; i++)\n\t{\n\t\tif (i < min_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (n1_len > n2_len)\n\t\t\t{\n\t\t\t\tsum += n1_digits[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n2_digits[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.to!string.split(\"\"))\n\t{\n\t\tforeach(d2; n2.to!string.split(\"\"))\n\t\t{\n\t\t\tsum += abs(d1.to!long - d2.to!long);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\t\n\t\tsum += abs(d1 - d2);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tif (n1 > n2)\n\t{\n\t\tn1_digits = n1;\n\t\tn2_digits = n2;\n\t}\n\telse\n\t{\n\t\tn1_digits = n2;\n\t\tn2_digits = n1;\n\t}\n\t\n\twhile (n1_digits > 0)\n\t{\n\t\tsum += abs(n1_digits % 10 - n2_digits % 10);\n\t\tn1_digits /= 10;\n\t\tn2_digits /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.to!string().length;\n\tlong n2_digits = n2.to!string().length;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\t\n\twhile (n1_digits_left > 0 || n2_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1_digits_left > 0 ? n1 % 10 : 0;\n\t\tlong n2_digit = n2_digits_left > 0 ? n2 % 10 : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\t\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 && n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif(n1 < 0)\n\t\tn1 = -n1;\n\tif(n2 < 0)\n\t\tn2 = -n2;\n\t\n\tn1_digits = log10(n1) + 1;\n\tn2_digits = log10(n2) + 1;\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tn2 = n2 * pow(10, n1_digits - n2_digits);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tn1 = n1 * pow(10, n2_digits - n1_digits);\n\t}\n\t\n\twhile(n1 != 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\tresult += abs(n1_digit - n2_digit);\n\t\tn1 = n1 / 10;\n\t\tn2 = n2 / 10;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_length = n1_digits.length;\n\tlong n2_length = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong diff;\n\t\n\tif (n1_length > n2_length)\n\t{\n\t\tfor (long i = 0; i < n1_length; i++)\n\t\t{\n\t\t\tn1_digit = n1_digits[i];\n\t\t\tif (i < n2_length)\n\t\t\t{\n\t\t\t\tn2_digit = n2_digits[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tdiff = abs(n1_digit - n2_digit);\n\t\t\tsum += diff;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_length; i++)\n\t\t{\n\t\t\tn2_digit = n2_digits[i];\n\t\t\tif (i < n1_length)\n\t\t\t{\n\t\t\t\tn1_digit = n1_digits[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tdiff = abs(n1_digit - n2_digit);\n\t\t\tsum += diff;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (int i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\treturn abs(n1 - n2);\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = n1;\n\tlong n2_digits = n2;\n\t\n\twhile (n1_digits != 0 && n2_digits != 0) {\n\t\tresult += abs((n1_digits % 10) - (n2_digits % 10));\n\t\tn1_digits /= 10;\n\t\tn2_digits /= 10;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_remaining = n1_digits;\n\tlong n2_digits_remaining = n2_digits;\n\twhile (n1_digits_remaining > 0 && n2_digits_remaining > 0) {\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_remaining--;\n\t\tn2_digits_remaining--;\n\t}\n\twhile (n1_digits_remaining > 0) {\n\t\tlong n1_digit = n1 % 10;\n\t\tsum += abs(n1_digit);\n\t\tn1 /= 10;\n\t\tn1_digits_remaining--;\n\t}\n\twhile (n2_digits_remaining > 0) {\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n2_digit);\n\t\tn2 /= 10;\n\t\tn2_digits_remaining--;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tint n1_len = n1.length;\n\tint n2_len = n2.length;\n\tint max_len = max(n1_len, n2_len);\n\tint min_len = min(n1_len, n2_len);\n\tint diff = max_len - min_len;\n\t\n\tif(n1_len > n2_len)\n\t{\n\t\tfor(int i = 0; i < diff; i++)\n\t\t{\n\t\t\tn2 = n2.insert(0, \"0\");\n\t\t}\n\t}\n\telse if(n2_len > n1_len)\n\t{\n\t\tfor(int i = 0; i < diff; i++)\n\t\t{\n\t\t\tn1 = n1.insert(0, \"0\");\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < max_len; i++)\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tauto n1_digits = to!string(n1);\n\tauto n2_digits = to!string(n2);\n\t\n\tif (n1_digits.length > n2_digits.length)\n\t{\n\t\tn2_digits = n2_digits.dup.insert(0, n1_digits.length - n2_digits.length, '0');\n\t}\n\telse if (n2_digits.length > n1_digits.length)\n\t{\n\t\tn1_digits = n1_digits.dup.insert(0, n2_digits.length - n1_digits.length, '0');\n\t}\n\t\n\tfor (int i = 0; i < n1_digits.length; i++)\n\t{\n\t\tresult += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tauto n1_digits = to!string(n1);\n\tauto n2_digits = to!string(n2);\n\tforeach(i, n1_digit; n1_digits)\n\t{\n\t\tsum += abs(n1_digit - n2_digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1 < 0)\n\t{\n\t\tn1 = -n1;\n\t}\n\t\n\tif (n2 < 0)\n\t{\n\t\tn2 = -n2;\n\t}\n\t\n\tif (n1 == 0)\n\t{\n\t\tn1_digits = 1;\n\t}\n\telse\n\t{\n\t\tn1_digits = floor(log10(n1)) + 1;\n\t}\n\t\n\tif (n2 == 0)\n\t{\n\t\tn2_digits = 1;\n\t}\n\telse\n\t{\n\t\tn2_digits = floor(log10(n2)) + 1;\n\t}\n\t\n\twhile (n1_digits > 0 || n2_digits > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits++;\n\t\tn1 /= 10;\n\t}\n\t\n\twhile (n2 > 0)\n\t{\n\t\tn2_digits++;\n\t\tn2 /= 10;\n\t}\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tn2 *= pow(10, n1_digits - n2_digits);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tn1 *= pow(10, n2_digits - n1_digits);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; to!string(n1))\n\t{\n\t\tforeach(d2; to!string(n2))\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\treturn abs(n1 - n2);\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile(n > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn /= 10;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs((n1_copy % 10) - (n2_copy % 10));\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\t\n\tfor (long i = 0; i < min_len; i++) \n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\tif (n1_len > n2_len) \n\t{\n\t\tfor (long i = min_len; i < max_len; i++) \n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t}\n\telse \n\t{\n\t\tfor (long i = min_len; i < max_len; i++) \n\t\t{\n\t\t\tsum += n2_digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\treturn -1;\n\t}\n\t\n\twhile (n1 != 0 && n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong diff = 0;\n\tif (n1_len == n2_len)\n\t{\n\t\tfor (long i = 0; i < n1_len; i++)\n\t\t{\n\t\t\tdiff += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tlong n1_digits_rev = n1_digits.reverse;\n\t\tlong n2_digits_rev = n2_digits.reverse;\n\t\tlong n1_digits_rev_len = n1_digits_rev.length;\n\t\tlong n2_digits_rev_len = n2_digits_rev.length;\n\t\tif (n1_len > n2_len)\n\t\t{\n\t\t\tfor (long i = 0; i < n2_len; i++)\n\t\t\t{\n\t\t\t\tdiff += abs(n1_digits_rev[i] - n2_digits_rev[i]);\n\t\t\t}\n\t\t\tfor (long i = n2_len; i < n1_len; i++)\n\t\t\t{\n\t\t\t\tdiff += n1_digits_rev[i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (long i = 0; i < n1_len; i++)\n\t\t\t{\n\t\t\t\tdiff += abs(n1_digits_rev[i] - n2_digits_rev[i]);\n\t\t\t}\n\t\t\tfor (long i = n1_len; i < n2_len; i++)\n\t\t\t{\n\t\t\t\tdiff += n2_digits_rev[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn diff;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs((n1_copy % 10) - (n2_copy % 10));\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tforeach(i; 0 .. max_len)\n\t{\n\t\tlong n1_digit = (i < n1_len) ? n1_digits[i] : 0;\n\t\tlong n2_digit = (i < n2_len) ? n2_digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.to!string().length;\n\tlong n2_digits = n2.to!string().length;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tlong n1_digit = n1 % 10;\n\t\t\tlong n2_digit = n2 % 10;\n\t\t\t\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\t\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tlong n1_digit = n1 % 10;\n\t\t\tlong n2_digit = n2 % 10;\n\t\t\t\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\t\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach (i; 0 .. max(n1.length, n2.length)) \n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1 < 0)\n\t\tn1 = -n1;\n\tif (n2 < 0)\n\t\tn2 = -n2;\n\t\n\tn1_digits = log10(n1) + 1;\n\tn2_digits = log10(n2) + 1;\n\t\n\twhile (n1_digits > 0 && n2_digits > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\twhile (n1_digits > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\t\n\t\tsum += n1_digit;\n\t\t\n\t\tn1 /= 10;\n\t\t\n\t\tn1_digits--;\n\t}\n\t\n\twhile (n2_digits > 0)\n\t{\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\tsum += n2_digit;\n\t\t\n\t\tn2 /= 10;\n\t\t\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tn2 = n2.padLeft(n1_digits);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tn1 = n1.padLeft(n2_digits);\n\t}\n\t\n\tforeach (i, digit; n1.digits)\n\t{\n\t\tsum += abs(digit - n2.digits[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach (i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\twhile (n1 != 0 || n2 != 0) {\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tlong n2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_temp = n1;\n\tlong n2_temp = n2;\n\t\n\twhile(n1_temp > 0)\n\t{\n\t\tn1_digits++;\n\t\tn1_temp /= 10;\n\t}\n\twhile(n2_temp > 0)\n\t{\n\t\tn2_digits++;\n\t\tn2_temp /= 10;\n\t}\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tn2_temp = n2;\n\t\tn2 = n1;\n\t\tn1 = n2_temp;\n\t}\n\t\n\twhile(n1 > 0)\n\t{\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\t\n\tfor (long i = 0; i < max_len; i++)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif (i < n1_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\t\n\t\tif (i < n2_len)\n\t\t{\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1, d2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tif(i < n1.length && i < n2.length)\n\t\t{\n\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t}\n\t\telse if(i < n1.length)\n\t\t{\n\t\t\tsum += n1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n2[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\tlong sum = 0;\n\tfor (long i = 0; i < max_digits; i++) \n\t{\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}"
  ]
}