{
  "name": "mbpp_558_digit_distance_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\t\n\tfor (int i = 0; i < max_len; i++) {\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\tif (i < n1_len) {\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\tif (i < n2_len) {\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.toString().length;\n\tlong n2_digits = n2.toString().length;\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.toString()[i] : '0';\n\t\tlong n2_digit = n2_digits > i ? n2.toString()[i] : '0';\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tresult += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.toString().length;\n\tlong n2_digits = n2.toString().length;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tforeach(i; 0..max_len)\n\t{\n\t\tif(i < n1_len && i < n2_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse if(i < n1_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += abs(n2_digits[i]);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tsum += abs(d1 - d2);\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length)) \n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; to!string(n1))\n\t{\n\t\tforeach(d2; to!string(n2))\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}"
  ]
}