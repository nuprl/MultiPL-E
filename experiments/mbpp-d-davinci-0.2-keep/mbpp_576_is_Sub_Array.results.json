{
  "name": "mbpp_576_is_Sub_Array",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tif (C == B) \n\t\treturn true;\n\t\n\treturn is_Sub_Array(A[1 .. $], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\twhile (j < A.length && A[j] == B[i + j])\n\t\t\t\tj++;\n\t\t\tif (j == A.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C.equal(D);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpjn2zzhix.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpjn2zzhix.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpjn2zzhix.d(16): Error: no property `equal` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn2zzhix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tlong j = 0;\n\t\tfor (; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount = 0;\n\t\t\tj = 0;\n\t\t}\n\t\tif (count == B.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tif (A[i .. i + B.length] == B) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= B.length - A.length; i++)\n\t{\n\t\tif (equal(A, B[i..i + A.length]))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmp6qu_jb7r.d(15): Error: undefined identifier `equal`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qu_jb7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i <= n - m; i++) \n\t{\n\t\tfor (j = 0; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == m) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpxuslz6ny.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpxuslz6ny.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuslz6ny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tif(C.length < D.length)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i < C.length; i++)\n\t\t{\n\t\t\tif(C[i] == D[0])\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < D.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(C[i+j] != D[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(j == D.length-1)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbcnwa1dv.d(25): Range violation\n----------------\n??:? _d_arrayboundsp [0x4294ea]\n??:? bool tmpbcnwa1dv.is_Sub_Array(long[], long[]) [0x427fe9]\n??:? void tmpbcnwa1dv.__unittest_L39_C1() [0x42820d]\n??:? void tmpbcnwa1dv.__modtest() [0x4283ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e01b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4290c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ada5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ad31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429099]\n??:? runModuleUnitTests [0x42ddf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tforeach (i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (A[i .. i + B.length] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tauto j = 0;\n\t\t\twhile (j < B.length) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpetj26vh3.d(24): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpetj26vh3.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpetj26vh3.__unittest_L39_C1() [0x427fe9]\n??:? void tmpetj26vh3.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpesa9m8s5.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpesa9m8s5.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesa9m8s5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0..B.length];\n\t\n\tif(C == B)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A[1..$], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tfor (k = i; k < n && j < m; k++, j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == m)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpwuet1iqf.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwuet1iqf.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuet1iqf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjhpa8611.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpjhpa8611.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpjhpa8611.__unittest_L35_C1() [0x427fe9]\n??:? void tmpjhpa8611.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfr6xujq5.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpfr6xujq5.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmpfr6xujq5.__unittest_L29_C1() [0x427fed]\n??:? void tmpfr6xujq5.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong n = A.length;\n\tlong m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (long i = 0; i < n - m + 1; i++) \n\t{\n\t\tlong j;\n\t\tfor (j = 0; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == m) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpks_hvhe9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpks_hvhe9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_hvhe9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tbool is_sub_array = true;\n\t\t\tfor (int j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i+j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tis_sub_array = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub_array)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq1sb7j5f.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpq1sb7j5f.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpq1sb7j5f.__unittest_L32_C1() [0x427ff1]\n??:? void tmpq1sb7j5f.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i+j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8t23ik_i.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmp8t23ik_i.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmp8t23ik_i.__unittest_L29_C1() [0x427fe9]\n??:? void tmp8t23ik_i.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpks_hvhe9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpks_hvhe9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_hvhe9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tbool is_sub_array = true;\n\t\tfor (int j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tis_sub_array = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_sub_array) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn j == m;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpv7yplurs.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpv7yplurs.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7yplurs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool flag = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmp6umix808.d(78): Error: no identifier for declarator `int`\n/tmp/tmp6umix808.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6umix808.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\t// if the size of A is less than B, then A cannot be a sublist of B\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\t// if the size of A is equal to B, then A can be a sublist of B only if all the elements of A are equal to the elements of B\n\tif(A.length == B.length)\n\t{\n\t\tfor(int i = 0; i < A.length; i++)\n\t\t{\n\t\t\tif(A[i] != B[i])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t// if the size of A is greater than B, then A can be a sublist of B only if all the elements of B are present in A\n\tif(A.length > B.length)\n\t{\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < A.length)\n\t\t{\n\t\t\tif(A[i] == B[j])\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif(j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpt36vuofz.d(8): Error: function `tmpt36vuofz.is_Sub_Array` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt36vuofz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{ \n    int m = A.length; \n    int n = B.length; \n  \n    for (int i = 0; i <= n - m; i++) { \n        int j; \n  \n        for (j = 0; j < m; j++) \n            if (B[i + j] != A[j]) \n                break; \n  \n        if (j == m) \n            return true; \n    } \n  \n    return false; \n} \nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmp9smr02hj.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp9smr02hj.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9smr02hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < m; i++) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == n) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpdyufku02.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpdyufku02.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyufku02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0) \n\t{\n\t\treturn true;\n\t}\n\tif (B.length == 0) \n\t{\n\t\treturn false;\n\t}\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < B.length && j < A.length) \n\t{\n\t\tif (A[j] == B[i]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn j == A.length;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpks_hvhe9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpks_hvhe9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_hvhe9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length > B.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < B.length; i++)\n\t{\n\t\tif(A[0] == B[i])\n\t\t{\n\t\t\tbool is_Sub = true;\n\t\t\tfor(int j = 1; j < A.length; j++)\n\t\t\t{\n\t\t\t\tif(A[j] != B[i+j])\n\t\t\t\t{\n\t\t\t\t\tis_Sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_Sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < B.length - A.length + 1; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tbool is_sub_array = true;\n\t\t\tfor (size_t j = 0; j < A.length; j++)\n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j])\n\t\t\t\t{\n\t\t\t\t\tis_sub_array = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub_array)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool is_Sub_Array = false;\n\tif(A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i < A.length; i++)\n\t\t{\n\t\t\tif(A[i] == B[0])\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < B.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(A[i + j] != B[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if(j == B.length - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tis_Sub_Array = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn is_Sub_Array;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp44o4n8pv.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x428356]\n??:? bool tmp44o4n8pv.is_Sub_Array(long[], long[]) [0x427dd8]\n??:? void tmp44o4n8pv.__unittest_L37_C1() [0x427f54]\n??:? void tmp44o4n8pv.__modtest() [0x428024]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c327]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43034d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b191]\n??:? runModuleUnitTests [0x42c0fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <= n - m; i++) \n\t{\n\t\tint j;\n\t\tfor (j = 0; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == m) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpg_mx09re.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpg_mx09re.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_mx09re.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif(m > n)\n\t\treturn false;\n\t\n\tfor(int i = 0; i <= n - m; i++)\n\t{\n\t\tint j;\n\t\tfor(j = 0; j < m; j++)\n\t\t{\n\t\t\tif(A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(j == m)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpoiitenn_.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpoiitenn_.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiitenn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++) \n\t{\n\t\tif (A[0] == B[i]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < A.length; j++) \n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == A.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < A.length; i++)\n\t\t{\n\t\t\tif (A[i] == B[0])\n\t\t\t{\n\t\t\t\tint j = 1;\n\t\t\t\tfor (; j < B.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (j == B.length)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmozpno9s.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpmozpno9s.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpmozpno9s.__unittest_L37_C1() [0x427fe9]\n??:? void tmpmozpno9s.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t\tj++;\n\t\t\t\n\t\t\tif (j == B.length) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmps_kyxwg2.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmps_kyxwg2.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmps_kyxwg2.__unittest_L27_C1() [0x427fe5]\n??:? void tmps_kyxwg2.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = B.length;\n\tint m = A.length;\n\t\n\tif (n > m)\n\t\treturn false;\n\t\n\tfor (int i = 0; i <= m - n; i++)\n\t{\n\t\tint j;\n\t\tfor (j = 0; j < n; j++)\n\t\t{\n\t\t\tif (A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpk7eben6y.d(10): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\n/tmp/tmpk7eben6y.d(11): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7eben6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tbool flag = true;\n\t\t\tfor(int j = 1; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif(A[i + j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpec6526cs.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpec6526cs.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpec6526cs.__unittest_L32_C1() [0x427ff1]\n??:? void tmpec6526cs.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tint j = 0;\n\t\tfor (; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i, a; A) \n\t{\n\t\tif (a == B[0]) \n\t\t{\n\t\t\tbool flag = true;\n\t\t\tforeach (j, b; B) \n\t\t\t{\n\t\t\t\tif (A[i + j] != b) \n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp05sck182.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmp05sck182.is_Sub_Array(long[], long[]) [0x427df5]\n??:? void tmp05sck182.__unittest_L36_C1() [0x427fed]\n??:? void tmp05sck182.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{ \n    int n = A.length; \n    int m = B.length; \n  \n    // Check if B is a subarray of A \n    for (int i = 0; i <= n - m; i++) { \n        int j; \n  \n        /* For current index i, check for pattern match */\n        for (j = 0; j < m; j++) \n            if (A[i + j] != B[j]) \n                break; \n  \n        if (j == m) \n            return true; \n    } \n  \n    return false; \n} \nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124072,
      "stdout": "",
      "stderr": "/tmp/tmpoiziknja.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpoiziknja.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiziknja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint lenA = A.length;\n\tint lenB = B.length;\n\tif (lenA < lenB)\n\t\treturn false;\n\tfor (int i = 0; i < lenA; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < lenB; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == lenB)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpmg8b8bt9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpmg8b8bt9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg8b8bt9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\t\n\t\tif(j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor(i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tfor(j = i, k = 0; j < A.length && k < B.length; j++, k++)\n\t\t\t{\n\t\t\t\tif(A[j] != B[k])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(k == B.length)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong n = A.length;\n\tlong m = B.length;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t\treturn false;\n\t\n\tint[] C = new int[n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tC[i] = A[i] - B[0];\n\t}\n\t\n\tfor (int i = 0; i < n - m + 1; i++) \n\t{\n\t\tif (C[i] == 0) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (j = 0; j < m; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == m) \n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpwmfznvum.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpwmfznvum.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\n/tmp/tmpwmfznvum.d(20): Error: cannot implicitly convert expression `A[cast(ulong)i] - B[0]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmfznvum.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\tif (B.length == 0)\n\t\treturn false;\n\t\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t\ti++;\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (C[i] > D[j])\n\t\t\treturn false;\n\t}\n\t\n\tif (j < D.length)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpsw3mgfz_.d(18): Error: no property `sort` for type `long[]`\n/tmp/tmpsw3mgfz_.d(19): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsw3mgfz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tlong j = 0;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1tl2xxl4.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmp1tl2xxl4.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmp1tl2xxl4.__unittest_L29_C1() [0x427fed]\n??:? void tmp1tl2xxl4.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong n = A.length;\n\tlong m = B.length;\n\t\n\tif (m > n) \n\t\treturn false;\n\t\n\tfor (long i = 0; i <= n - m; i++) \n\t{\n\t\tlong j;\n\t\tfor (j = 0; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == m) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdb4zx2g1.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x42835e]\n??:? bool tmpdb4zx2g1.is_Sub_Array(long[], long[]) [0x427dda]\n??:? void tmpdb4zx2g1.__unittest_L50_C1() [0x428005]\n??:? void tmpdb4zx2g1.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c32f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430355]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b199]\n??:? runModuleUnitTests [0x42c105]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif(A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < B.length)\n\t{\n\t\tif(A[j] == B[i])\n\t\t{\n\t\t\tj++;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\tif(j == A.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < A.length; ++i) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < B.length; ++j) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvm0tr_0w.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428366]\n??:? bool tmpvm0tr_0w.is_Sub_Array(long[], long[]) [0x427dde]\n??:? void tmpvm0tr_0w.__unittest_L36_C1() [0x42800d]\n??:? void tmpvm0tr_0w.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c337]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43035d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43080c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a1]\n??:? runModuleUnitTests [0x42c10d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1k7nymg1.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp1k7nymg1.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp1k7nymg1.__unittest_L36_C1() [0x427ff1]\n??:? void tmp1k7nymg1.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++) \n\t{\n\t\tif (A[0] == B[i]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < A.length; j++) \n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == A.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmp4y6cjy7l.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmp4y6cjy7l.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y6cjy7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tforeach(i; 0 .. B.length)\n\t{\n\t\tif(C.length == 0)\n\t\t\treturn true;\n\t\tif(C[0] == B[i])\n\t\t\tC = C[1 .. $];\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqjpnra3r.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4293d1]\n??:? void tmpqjpnra3r.__unittest_L20_C1() [0x428119]\n??:? void tmpqjpnra3r.__modtest() [0x428348]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dfb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42905a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ad3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42adcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42acc9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429031]\n??:? runModuleUnitTests [0x42dd89]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4298e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < A.length; j++)\n\t\t\t{\n\t\t\t\tif (A[j] != B[i+j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == A.length)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (A.length == B.length) \n\t{\n\t\treturn A == B;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length; i++) \n\t{\n\t\tif (A[i .. i + B.length] == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (size_t j = 0; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= A.length || A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i == A.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tauto n = A.length;\n\tauto m = B.length;\n\t\n\tif (n < m)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < n - m + 1; i++)\n\t{\n\t\tauto j = 0;\n\t\tfor (; j < m; j++)\n\t\t\tif (A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t\n\t\tif (j == m)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tint j;\n\t\tfor (j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == B.length) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < A.length; i++) \n\t{\n\t\tif(A[i] == B[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor(int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif(A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp51nn2evp.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp51nn2evp.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp51nn2evp.__unittest_L36_C1() [0x427ff1]\n??:? void tmp51nn2evp.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong n = A.length;\n\tlong m = B.length;\n\tlong i, j;\n\tfor (i = 0; i <= n - m; i++) \n\t{\n\t\tfor (j = 0; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == m) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\twhile (j < B.length && A[i + j] == B[j])\n\t\t\t\tj++;\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4bon2gag.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmp4bon2gag.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmp4bon2gag.__unittest_L26_C1() [0x427fed]\n??:? void tmp4bon2gag.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t\tcount = 0;\n\t\t}\n\t\t\n\t\tif(count == B.length)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++)\n\t{\n\t\tif (A[i..i+B.length] == B)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint len_A = A.length;\n\tint len_B = B.length;\n\tif (len_A > len_B)\n\t\treturn false;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < len_A && j < len_B)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i == len_A)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpp0k82a78.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpp0k82a78.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0k82a78.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n) \n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == n) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpkbxvd6kq.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpkbxvd6kq.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbxvd6kq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (long i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tlong j = 1;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa6f0li6g.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpa6f0li6g.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmpa6f0li6g.__unittest_L29_C1() [0x427fed]\n??:? void tmpa6f0li6g.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\tif (B.length == 0)\n\t\treturn false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint n = A.length;\n\tint m = B.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmp_euy83uz.d(12): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp_euy83uz.d(13): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_euy83uz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tbool is_sub_array = true;\n\t\tfor (int j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tis_sub_array = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_sub_array) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpsceaxher.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpsceaxher.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsceaxher.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgk0mns0u.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpgk0mns0u.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpgk0mns0u.__unittest_L36_C1() [0x427ff1]\n??:? void tmpgk0mns0u.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j])\n\t\t\t\tj++;\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp946luy8c.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmp946luy8c.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmp946luy8c.__unittest_L26_C1() [0x427fe5]\n??:? void tmp946luy8c.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor (i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphon5f825.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmphon5f825.is_Sub_Array(long[], long[]) [0x427dcf]\n??:? void tmphon5f825.__unittest_L37_C1() [0x427ff1]\n??:? void tmphon5f825.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < A.length && j < B.length) \n\t{\n\t\tif(A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif(j == B.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\treturn C.equal(D);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpjn2zzhix.d(13): Error: no property `sort` for type `long[]`\n/tmp/tmpjn2zzhix.d(14): Error: no property `sort` for type `long[]`\n/tmp/tmpjn2zzhix.d(16): Error: no property `equal` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn2zzhix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjhpa8611.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpjhpa8611.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpjhpa8611.__unittest_L35_C1() [0x427fe9]\n??:? void tmpjhpa8611.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = new long[A.length + B.length];\n\tC = A ~ B;\n\t\n\tforeach(i; 0..C.length)\n\t{\n\t\tif(C[i] == B[0])\n\t\t{\n\t\t\tlong[] D = new long[B.length];\n\t\t\tforeach(j; 0..B.length)\n\t\t\t{\n\t\t\t\tD[j] = C[i+j];\n\t\t\t}\n\t\t\tif(D == B)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_1l4hbk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmpg_1l4hbk.__unittest_L30_C1() [0x428061]\n??:? void tmpg_1l4hbk.__modtest() [0x428244]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43064d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428988]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tif(A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(j == m)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmp5rn7yor_.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp5rn7yor_.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rn7yor_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) return false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) break;\n\t\t\t}\n\t\t\tif (j == B.length) return true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsulwrvch.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpsulwrvch.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpsulwrvch.__unittest_L26_C1() [0x427fe9]\n??:? void tmpsulwrvch.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool is_Sub = true;\n\t\t\tfor (int j = 0; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tis_Sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_Sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfqnb4mcn.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpfqnb4mcn.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpfqnb4mcn.__unittest_L36_C1() [0x427ff1]\n??:? void tmpfqnb4mcn.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\t// A is a subarray of B iff A is a subset of B and A is contiguous in B.\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous in B iff every element of A is adjacent to the next element of A in B.\n\t\n\t// A is a subset of B iff every element of A is in B.\n\t// A is contiguous\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmp8dm7_db3.d(43): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dm7_db3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjhpa8611.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpjhpa8611.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpjhpa8611.__unittest_L35_C1() [0x427fe9]\n??:? void tmpjhpa8611.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfr6xujq5.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpfr6xujq5.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmpfr6xujq5.__unittest_L29_C1() [0x427fed]\n??:? void tmpfr6xujq5.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tsize_t j = 1;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo6fyv4sv.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpo6fyv4sv.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmpo6fyv4sv.__unittest_L32_C1() [0x427fed]\n??:? void tmpo6fyv4sv.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n    if (A.length < B.length)\n        return false;\n    else\n    {\n        int i = 0;\n        int j = 0;\n        while (i < A.length && j < B.length)\n        {\n            if (A[i] == B[j])\n            {\n                i++;\n                j++;\n            }\n            else\n            {\n                i++;\n            }\n        }\n        if (j == B.length)\n            return true;\n        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpv67ajvnq.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpv67ajvnq.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv67ajvnq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tforeach(i; 0 .. A.length)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tforeach(j; 0 .. B.length)\n\t\t\t{\n\t\t\t\tif(A[i+j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(j == B.length-1)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpp_r6qynt.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428356]\n??:? bool tmpp_r6qynt.is_Sub_Array(long[], long[]) [0x427ddc]\n??:? void tmpp_r6qynt.__unittest_L29_C1() [0x427ffd]\n??:? void tmpp_r6qynt.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c327]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43034d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b191]\n??:? runModuleUnitTests [0x42c0fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length) \n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\treturn (j == B.length);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (i + j >= A.length || A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\twhile (i < m && j < n)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t\tif (j == n)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmp_u_yeo46.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp_u_yeo46.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_u_yeo46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint lenA = A.length;\n\tint lenB = B.length;\n\t\n\tfor(i = 0; i < lenA; i++) \n\t{\n\t\tif(A[i] == B[0]) \n\t\t{\n\t\t\tk = i;\n\t\t\tfor(j = 0; j < lenB; j++) \n\t\t\t{\n\t\t\t\tif(A[k] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(j == lenB) \n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(flag == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmpdym6vrjw.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpdym6vrjw.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdym6vrjw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < A.length - B.length + 1; i++)\n\t{\n\t\tif (A[i..i + B.length] == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0, j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "/tmp/tmplaqlajpu.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmplaqlajpu.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaqlajpu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor (i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tk = i;\n\t\t\tfor (j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (flag == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphon5f825.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmphon5f825.is_Sub_Array(long[], long[]) [0x427dcf]\n??:? void tmphon5f825.__unittest_L37_C1() [0x427ff1]\n??:? void tmphon5f825.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tauto len_A = A.length;\n\tauto len_B = B.length;\n\t\n\tif (len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < len_B - len_A + 1; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tauto j = 1;\n\t\t\twhile (j < len_A)\n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == len_A)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tauto len_A = A.length;\n\tauto len_B = B.length;\n\t\n\tfor (size_t i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\twhile (j < len_B && A[i + j] == B[j])\n\t\t\t\tj++;\n\t\t\t\n\t\t\tif (j == len_B)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaa04185m.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpaa04185m.is_Sub_Array(long[], long[]) [0x427dd9]\n??:? void tmpaa04185m.__unittest_L30_C1() [0x427ff1]\n??:? void tmpaa04185m.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tint j = 1;\n\t\t\twhile (j < A.length && A[j] == B[i+j])\n\t\t\t\tj++;\n\t\t\tif (j == A.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t{\n\t\treturn true;\n\t}\n\tif (B.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tC.sort;\n\tD.sort;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < C.length && j < D.length)\n\t{\n\t\tif (C[i] < D[j])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (C[i] == D[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (C[i] > D[j])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn (j != D.length);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmplva11tk6.d(22): Error: no property `sort` for type `long[]`\n/tmp/tmplva11tk6.d(23): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplva11tk6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tauto n = A.length;\n\tauto m = B.length;\n\t\n\tif (m > n)\n\t\treturn false;\n\t\n\tfor (auto i = 0; i <= n - m; i++) \n\t{\n\t\tauto j = 0;\n\t\tfor (; j < m; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == m)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmp8t1ljj8m.d(79): Error: no identifier for declarator `int`\n/tmp/tmp8t1ljj8m.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t1ljj8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0..B.length];\n\t\n\tif (C == B)\n\t\treturn true;\n\t\n\tfor (size_t i = 1; i < A.length - B.length + 1; i++)\n\t{\n\t\tC = A[i..i + B.length];\n\t\tif (C == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool is_sub = true;\n\t\t\tfor (int j = 0; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tis_sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1k7nymg1.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp1k7nymg1.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp1k7nymg1.__unittest_L36_C1() [0x427ff1]\n??:? void tmp1k7nymg1.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint count = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tflag = 1;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tflag = 0;\n\t\t}\n\t\tif(count == B.length)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tif (A[i .. i + B.length] == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i+j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpasw4yft9.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpasw4yft9.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpasw4yft9.__unittest_L32_C1() [0x427fe5]\n??:? void tmpasw4yft9.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif(m > n)\n\t\treturn false;\n\t\n\tfor(int i = 0; i <= n - m; i++)\n\t{\n\t\tint j;\n\t\tfor(j = 0; j < m; j++)\n\t\t{\n\t\t\tif(A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif(j == m)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmpapab6rra.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpapab6rra.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapab6rra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tif (A.length == 0)\n\t\treturn true;\n\t\n\tif (A[0] == B[0])\n\t{\n\t\treturn is_Sub_Array(A[1..$], B[1..$]);\n\t}\n\telse\n\t{\n\t\treturn is_Sub_Array(A, B[1..$]);\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A[0 .. A.length - B.length];\n\treturn C == B;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprglhi4lq.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmprglhi4lq.__unittest_L13_C1() [0x427fb1]\n??:? void tmprglhi4lq.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43042d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint len_A = A.length;\n\tint len_B = B.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\tif (len_A > len_B)\n\t\treturn false;\n\t\n\twhile (i < len_B)\n\t{\n\t\tif (A[j] == B[i])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == len_A)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmp07mgb3tr.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp07mgb3tr.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07mgb3tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tbool is_sub = true;\n\t\tfor (int j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tis_sub = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_sub) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tbool is_sub_array = true;\n\t\tfor (int j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tis_sub_array = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_sub_array) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tlong[] C = B[0 .. A.length];\n\t\n\tif (A == C)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A, B[1 .. $]);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tif (C == B) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_Sub_Array(A[1 .. $], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0..B.length];\n\t\n\tif(C == B)\n\t\treturn true;\n\t\n\tfor(long i = 1; i < A.length - B.length + 1; i++)\n\t{\n\t\tC = A[i..i+B.length];\n\t\tif(C == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length - A.length + 1; i++) \n\t{\n\t\tint j = 0;\n\t\tfor (; j < A.length; j++) \n\t\t{\n\t\t\tif (A[j] != B[i + j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == A.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\tC.sort;\n\tD.sort;\n\t\n\treturn C == D;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmpo9dzb2qi.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmpo9dzb2qi.d(13): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9dzb2qi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t\tk++;\n\t\t\ti = k;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tint j = 0;\n\t\tfor (j = 0; j < B.length; j++) \n\t\t{\n\t\t\tif (A[i + j] != B[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == B.length) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile (i < A.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j == B.length;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++) \n\t{\n\t\tif (A[0] == B[i]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (j = 0; j < A.length; j++) \n\t\t\t{\n\t\t\t\tif (A[j] != B[i + j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == A.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool found = true;\n\t\t\tfor (int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgk0mns0u.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpgk0mns0u.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpgk0mns0u.__unittest_L36_C1() [0x427ff1]\n??:? void tmpgk0mns0u.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tfor (k = i, j = 0; k < m && j < n; k++, j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (j == n)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmpz2nq3rfc.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpz2nq3rfc.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2nq3rfc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile (i < A.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tforeach(i; 0 .. A.length - B.length + 1)\n\t{\n\t\tif (C == B)\n\t\t\treturn true;\n\t\t\n\t\tC = A[i + 1 .. i + B.length + 1];\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7u9xamgm.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x4284ce]\n??:? bool tmp7u9xamgm.is_Sub_Array(long[], long[]) [0x427ef3]\n??:? void tmp7u9xamgm.__unittest_L25_C1() [0x427fa8]\n??:? void tmp7u9xamgm.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430451]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor(; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif(A[i+j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpymsghjy6.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpymsghjy6.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpymsghjy6.__unittest_L29_C1() [0x427fe9]\n??:? void tmpymsghjy6.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < n && j < m) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == m) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmp3u19uljy.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp3u19uljy.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u19uljy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length == 0)\n\t\treturn true;\n\tif (B.length == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool is_Sub_Array = true;\n\t\t\tfor (int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tis_Sub_Array = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_Sub_Array) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_q1_pkma.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp_q1_pkma.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp_q1_pkma.__unittest_L36_C1() [0x427ff1]\n??:? void tmp_q1_pkma.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < B.length; i++)\n\t{\n\t\tif (A[0] == B[i])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < A.length && A[j] == B[i + j])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == A.length)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 1;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpp4x960l9.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpp4x960l9.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpp4x960l9.__unittest_L32_C1() [0x427fe5]\n??:? void tmpp4x960l9.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i+j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8t23ik_i.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmp8t23ik_i.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmp8t23ik_i.__unittest_L29_C1() [0x427fe9]\n??:? void tmp8t23ik_i.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn i == A.length;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <= A.length - B.length; i++) \n\t{\n\t\tif (A[i .. i + B.length] == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool flag = true;\n\t\t\tfor (int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbc65292s.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmpbc65292s.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmpbc65292s.__unittest_L36_C1() [0x427ff1]\n??:? void tmpbc65292s.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tlong[] C = A[0..B.length];\n\t\n\tif (C == B)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn is_Sub_Array(A[1..$], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\tint i = 0;\n\tint j = 0;\n\tfor (; i < n && j < m; ++i) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t}\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517714,
      "stdout": "",
      "stderr": "/tmp/tmpks_hvhe9.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpks_hvhe9.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_hvhe9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (B.length > A.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpw8kssnhj.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpw8kssnhj.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpw8kssnhj.__unittest_L32_C1() [0x427fe5]\n??:? void tmpw8kssnhj.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tbool is_Sub = true;\n\t\t\tfor (int j = 0; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t{\n\t\t\t\t\tis_Sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_Sub)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp56h0c_b1.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp56h0c_b1.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp56h0c_b1.__unittest_L32_C1() [0x427ff1]\n??:? void tmp56h0c_b1.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpp06d5kdv.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpp06d5kdv.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpp06d5kdv.__unittest_L30_C1() [0x427fe5]\n??:? void tmpp06d5kdv.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && i + j < A.length && A[i + j] == B[j])\n\t\t\t\tj++;\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (size_t i = 0; i < A.length - B.length + 1; i++) \n\t{\n\t\tif (A[i .. i + B.length] == B) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length > B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn i == A.length;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = A.length;\n\tint n = B.length;\n\t\n\tif (m < n) \n\t{\n\t\tresult = false;\n\t}\n\telse \n\t{\n\t\twhile (i < m) \n\t\t{\n\t\t\tif (A[i] == B[j]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\tif (j == n) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmpo_87h00y.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpo_87h00y.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_87h00y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tlong[] C = A[0 .. B.length];\n\t\n\tif (C == B)\n\t\treturn true;\n\t\n\treturn is_Sub_Array(A[1 .. $], B);\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif(m > n)\n\t\treturn false;\n\t\n\tfor(int i = 0; i <= n - m; i++)\n\t{\n\t\tint j;\n\t\tfor(j = 0; j < m; j++)\n\t\t\tif(A[i + j] != B[j])\n\t\t\t\tbreak;\n\t\t\n\t\tif(j == m)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124074,
      "stdout": "",
      "stderr": "/tmp/tmpv5yz4iqu.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpv5yz4iqu.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5yz4iqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjhpa8611.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpjhpa8611.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpjhpa8611.__unittest_L35_C1() [0x427fe9]\n??:? void tmpjhpa8611.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tfor(i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tfor(j = i, k = 0; j < A.length && k < B.length; j++, k++)\n\t\t\t{\n\t\t\t\tif(A[j] != B[k])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(k == B.length)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < B.length; i++)\n\t{\n\t\tif (A[j] == B[i])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == A.length)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpopxtjl__.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpopxtjl__.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpopxtjl__.__unittest_L29_C1() [0x427fe9]\n??:? void tmpopxtjl__.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tfor (; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjhpa8611.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpjhpa8611.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpjhpa8611.__unittest_L35_C1() [0x427fe9]\n??:? void tmpjhpa8611.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tsize_t j = 0;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517715,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfr6xujq5.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpfr6xujq5.is_Sub_Array(long[], long[]) [0x427dd2]\n??:? void tmpfr6xujq5.__unittest_L29_C1() [0x427fed]\n??:? void tmpfr6xujq5.__modtest() [0x428018]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++)\n\t{\n\t\tif (A[i..i+B.length] == B)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint m = A.length;\n\tint n = B.length;\n\tif (m < n) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\twhile (i < m) \n\t\t{\n\t\t\tif (A[i] == B[j]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\tif (j == n) \n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 1) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmpuokev9_e.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpuokev9_e.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuokev9_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif(len_A > len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < len_B)\n\t{\n\t\tif(A[j] == B[i])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif(j == len_A)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmp54vr5crc.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp54vr5crc.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54vr5crc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tfor (k = i, j = 0; k < n && j < m; k++, j++)\n\t\t\t{\n\t\t\t\tif (A[k] != B[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == m)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmpa1s23zoa.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpa1s23zoa.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1s23zoa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == B.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong[] C = A.dup;\n\tlong[] D = B.dup;\n\t\n\tif (C.length < D.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < C.length; i++)\n\t{\n\t\tif (C[i] == D[0])\n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < D.length && C[i + j] == D[j])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\n\t\t\tif (j == D.length)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxkjc7cr4.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x4294da]\n??:? bool tmpxkjc7cr4.is_Sub_Array(long[], long[]) [0x427fe5]\n??:? void tmpxkjc7cr4.__unittest_L37_C1() [0x4281fd]\n??:? void tmpxkjc7cr4.__modtest() [0x42839c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e00b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4290b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ad95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ad21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429089]\n??:? runModuleUnitTests [0x42dde1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length - B.length + 1; i++)\n\t{\n\t\tif (A[i .. i + B.length] == B)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\tint k = i;\n\t\t\twhile (j < B.length && k < A.length) \n\t\t\t{\n\t\t\t\tif (A[k] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tbool is_Sub = true;\n\t\t\tfor (int j = 1; j < B.length; j++) \n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j]) \n\t\t\t\t{\n\t\t\t\t\tis_Sub = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_Sub) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3bykefy9.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x42834e]\n??:? bool tmp3bykefy9.is_Sub_Array(long[], long[]) [0x427dd4]\n??:? void tmp3bykefy9.__unittest_L36_C1() [0x427ff1]\n??:? void tmp3bykefy9.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c31f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]\n??:? runModuleUnitTests [0x42c0f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < A.length; i++)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\twhile(j < B.length && A[i+j] == B[j])\n\t\t\t\tj++;\n\t\t\tif(j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbxvuy25f.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpbxvuy25f.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpbxvuy25f.__unittest_L26_C1() [0x427fe5]\n??:? void tmpbxvuy25f.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n    if (A.length < B.length) \n    {\n        return false;\n    }\n    else \n    {\n        for (int i = 0; i <= A.length - B.length; i++) \n        {\n            if (A[i .. i + B.length] == B) \n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\tint flag = 0;\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < len_A; i++)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\tfor (k = i; k < len_A; k++)\n\t\t\t{\n\t\t\t\tif (A[k] == B[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == len_B)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tj = 0;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmp3ynw10yb.d(15): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp3ynw10yb.d(16): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ynw10yb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < A.length; i++)\n\t{\n\t\tif (A[i] == B[0])\n\t\t{\n\t\t\tint j = 1;\n\t\t\tfor (; j < B.length; j++)\n\t\t\t{\n\t\t\t\tif (A[i + j] != B[j])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j == B.length)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpopxtjl__.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428346]\n??:? bool tmpopxtjl__.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpopxtjl__.__unittest_L29_C1() [0x427fe9]\n??:? void tmpopxtjl__.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tfor (int i = 0; i < A.length; i++) \n\t\t{\n\t\t\tif (A[i] == B[0]) \n\t\t\t{\n\t\t\t\tint j = 0;\n\t\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tif (j == B.length) \n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpow95f1il.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpow95f1il.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpow95f1il.__unittest_L34_C1() [0x427fe5]\n??:? void tmpow95f1il.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint len_A = A.length;\n\tint len_B = B.length;\n\t\n\tif (len_A < len_B)\n\t\treturn false;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < len_A && j < len_B)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == len_B)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmpqp8zl7of.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpqp8zl7of.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp8zl7of.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif(A.length < B.length)\n\t\treturn false;\n\t\n\tauto i = 0;\n\tauto j = 0;\n\t\n\twhile(i < A.length && j < B.length)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(j == B.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < n && j < m)\n\t{\n\t\tif(A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif(j == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmp13j8sg1v.d(10): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmp13j8sg1v.d(11): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13j8sg1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length > B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (i = 0; i < B.length; i++)\n\t{\n\t\tif (A[j] == B[i])\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (j == A.length)\n\t\t{\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\tif (A.length < B.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (i < A.length && j < B.length)\n\t{\n\t\tif (A[i] == B[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\t\n\tif (j == B.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < A.length && j < B.length) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == B.length) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\t\n\twhile(i < A.length)\n\t{\n\t\tif(A[i] == B[0])\n\t\t{\n\t\t\tj = i;\n\t\t\tk = 0;\n\t\t\twhile(k < B.length && j < A.length && A[j] == B[k])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(k == B.length)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(flag == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tif (A.length < B.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] == B[0]) \n\t\t{\n\t\t\tint j = 0;\n\t\t\twhile (j < B.length && A[i + j] == B[j]) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == B.length) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuhj0uf46.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x42833e]\n??:? bool tmpuhj0uf46.is_Sub_Array(long[], long[]) [0x427dd0]\n??:? void tmpuhj0uf46.__unittest_L32_C1() [0x427fe5]\n??:? void tmpuhj0uf46.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\n*/\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint flag = 0;\n\tint n = A.length;\n\tint m = B.length;\n\t\n\tif (m > n)\n\t\treturn false;\n\t\n\twhile (i < n) \n\t{\n\t\tif (A[i] == B[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = i - j + 1;\n\t\t\tj = 0;\n\t\t}\n\t\t\n\t\tif (j == m)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "/tmp/tmpcl917tj1.d(14): Error: cannot implicitly convert expression `A.length` of type `ulong` to `int`\n/tmp/tmpcl917tj1.d(15): Error: cannot implicitly convert expression `B.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcl917tj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}