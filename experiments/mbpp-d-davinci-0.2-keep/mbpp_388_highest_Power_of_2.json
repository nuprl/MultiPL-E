{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\n*/\nlong highest_Power_of_2(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = highest_Power_of_2;\n\n    assert(candidate(10L) == 8L);\n    assert(candidate(19L) == 16L);\n    assert(candidate(32L) == 32L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong p = 1;\n\twhile (p <= n) \n\t{\n\t\tp *= 2;\n\t}\n\treturn p / 2;\n}",
    "{\n\treturn pow(2, floor(log(n) / log(2)));\n}",
    "{\n\treturn pow(2, floor(log(n) / log(2)));\n}",
    "{\n\tlong res = 1;\n\twhile (res <= n) \n\t{\n\t\tres *= 2;\n\t}\n\treturn res / 2;\n}",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n\t// Initialize result \n\tlong p = (long)log2(n); \n\treturn (long)pow(2, p); \n} ",
    "{ \n\t// Initialize the result \n\tlong res = 1; \n\t\n\t// Keep multiplying res with 2 while it is smaller \n\t// than or equal to x \n\twhile (res <= n) \n\t\tres = res << 1; \n\t\n\treturn res>>1; \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{\n\tlong p = (long)log2(n);\n\treturn (long)pow(2, p);\n}",
    "{\n\tlong p = 1;\n\twhile (p <= n) \n\t{\n\t\tp *= 2;\n\t}\n\treturn p / 2;\n}",
    "{\n\treturn cast(long)pow(2, cast(long)log2(n));\n}",
    "{\n\tlong result = 0;\n\twhile (n > 1) \n\t{\n\t\tn = n >> 1;\n\t\tresult++;\n\t}\n\treturn result;\n}",
    "{\n\tlong p = 0;\n\twhile (pow(2,p) <= n) \n\t{\n\t\tp++;\n\t}\n\treturn pow(2,p-1);\n}",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{\n\tlong res = 1;\n\twhile (res <= n) \n\t{\n\t\tres *= 2;\n\t}\n\treturn res / 2;\n}",
    "{\n\tlong p = 1;\n\twhile (p <= n) \n\t{\n\t\tp *= 2;\n\t}\n\treturn p / 2;\n}",
    "{\n\tlong p = 1;\n\twhile (p <= n) \n\t{\n\t\tp *= 2;\n\t}\n\treturn p / 2;\n}",
    "{\n\tlong res = 0;\n\twhile (n > 0) \n\t{\n\t\tn >>= 1;\n\t\tres += 1;\n\t}\n\treturn res;\n}",
    "{\n\tlong res = 1;\n\twhile (res < n) \n\t{\n\t\tres *= 2;\n\t}\n\treturn res / 2;\n}"
  ]
}