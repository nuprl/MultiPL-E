{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn found;\n}",
    "{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}",
    "{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\twhile(j > i)\n\t{\n\t\tif(text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn found;\n}",
    "{\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(word; text.split())\n\t{\n\t\tif(word.length > 2 && word[1 .. $-1].canFind(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tif(i > 0 && i < text.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn text.find(\"z\") && text.find(\"z\") != text.length - 1;\n}",
    "{\n\treturn text.match(\"/z/\");\n}",
    "{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1..$-1].canFind(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn text.length > 1 && text.length < text.length - 1 && text.find(\"z\") != -1;\n}",
    "{\n\treturn text.find(\"z\") != -1;\n}",
    "{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t\tfound_z = true;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found_z && found_z_middle;\n}",
    "{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}",
    "{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i > 0 && i < j - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}"
  ]
}