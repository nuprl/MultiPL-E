{
  "name": "mbpp_58_opposite_Signs",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\n*/\nbool opposite_Signs(long x, long y) \n{ \n    return ((x ^ y) < 0); \n} \nunittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}