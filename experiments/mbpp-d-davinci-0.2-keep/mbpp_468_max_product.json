{
  "name": "mbpp_468_max_product",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong max_num = 0;\n\tforeach(num; arr)\n\t{\n\t\tif(num > max_num)\n\t\t{\n\t\t\tmax_num = num;\n\t\t\tcurr_product *= num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr_product = 1;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong[] max_product_reverse = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[arr.length-1] = arr.length-1;\n\tmax_product_reverse[arr.length-1] = arr[arr.length-1];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length-2; i >= 0; i--) \n\t{\n\t\tmax_product_reverse[i] = arr[i];\n\t\tmax_product_index_reverse[i] = i;\n\t\t\n\t\tfor (int j = arr.length-1; j > i; j--) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tif (max_product_reverse[i] < max_product_reverse[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_reverse[i] = max_product_reverse[j] * arr[i];\n\t\t\t\t\tmax_product",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tlong current_min = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max * arr[i], arr[i]);\n\t\t\tcurrent_min = min(current_min * arr[i], arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = current_max;\n\t\t\tcurrent_max = max(current_min * arr[i], arr[i]);\n\t\t\tcurrent_min = min(temp * arr[i], arr[i]);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, current_max);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] res = new long[arr.length];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tres[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i-1], arr[i] * min[i-1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i-1], arr[i] * min[i-1]));\n\t\tres[i] = max(res[i-1], max[i]);\n\t}\n\treturn res[arr.length-1];\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, dp[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_so_far = 0;\n\tlong min_so_far = 0;\n\tlong max_ending_here = 0;\n\tlong min_ending_here = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax_ending_here = max(i, max(i * max_so_far, i * min_so_far));\n\t\tmin_ending_here = min(i, min(i * max_so_far, i * min_so_far));\n\t\t\n\t\tmax_so_far = max_ending_here;\n\t\tmin_so_far = min_ending_here;\n\t\t\n\t\tmax_product = max(max_product, max_so_far);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tmax_product_so_far = max(max_product_so_far * i, i);\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_so_far = 0;\n\tlong max_product_index_so_far = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_so_far < max_product[i])\n\t\t{\n\t\t\tmax_product_so_far = max_product[i];\n\t\t\tmax_product_index_so_far = i;\n\t\t}\n\t}\n\t\n\treturn max_product_so_far;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max(max_product);\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t\tif (arr[i] == 0) \n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tdp[i] = 1;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(dp[i] == max)\n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max = 0;\n\t\tlong max_index = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i] && max_product[j] > max) \n\t\t\t{\n\t\t\t\tmax = max_product[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max * arr[i];\n\t\tmax_product_index[i] = max_index;\n\t}\n\t\n\tlong max = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product[i] > max) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_rev = new long[arr.length];\n\tlong[] max_product_rev = new long[arr.length];\n\tlong max_product_final = 0;\n\tlong max_product_index_final = 0;\n\tlong max_product_index_rev_final = 0;\n\tlong max_product_rev_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_rev[arr.length-1] = arr.length-1;\n\tmax_product_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > max_product[i-1]*arr[i])\n\t\t{\n\t\t\tmax_product[i] = arr[i];\n\t\t\tmax_product_index[i] = i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product[i] = max_product[i-1]*arr[i];\n\t\t\tmax_product_index[i] = max_product_index[i-1];\n\t\t}\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tif(arr[i] > max_product_rev[i+1]*arr[i])\n\t\t{\n\t\t\tmax_product_rev[i] = arr[i];\n\t\t\tmax_product_index_rev[i] = i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_rev[i] = max_product_rev[i+1]*arr[i];\n\t\t\tmax_product_index_rev[i] = max_product_index_rev[i+1];\n\t\t}\n\t}\n\t\n\tfor(int i =",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurrent_product *= i;\n\t\tif(current_product > max_product)\n\t\t\tmax_product = current_product;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\t\n\t\tforeach(j, v2; arr[0 .. i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * v);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tlong max_val = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_val = max(max_val, dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_val;\n\t\tmax = max(max, max_val);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t\tmax_product_value = max_product[i];\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(max_prod[i - 1] * arr[i], min_prod[i - 1] * arr[i]));\n\t\tmin_prod[i] = min(arr[i], min(max_prod[i - 1] * arr[i], min_prod[i - 1] * arr[i]));\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_rev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_rev[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_rev[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_rev = max_product[arr.length - 1];\n\tmax_product_index_rev[arr.length - 1] = arr.length - 1;\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--)\n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_rev < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_rev = max_product[j] * arr[i];\n\t\t\t\tmax_product_index_rev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_final = max_product[arr.length - 1];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_final",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong max_prod = 0;\n\tlong prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tprod *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_prod = max(max_prod, prod);\n\t\t\tprod = 1;\n\t\t\tmax = i;\n\t\t\tprod *= i;\n\t\t}\n\t}\n\tmax_prod = max(max_prod, prod);\n\treturn max_prod;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] result = new long[arr.length];\n\t\n\tmax[0] = min[0] = result[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = min[i] = result[i] = arr[i];\n\t\t\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax[i] = max(max[i], max[i - 1] * arr[i]);\n\t\t\tmin[i] = min(min[i], min[i - 1] * arr[i]);\n\t\t}\n\t\telse if(arr[i] < 0)\n\t\t{\n\t\t\tmax[i] = max(max[i], min[i - 1] * arr[i]);\n\t\t\tmin[i] = min(min[i], max[i - 1] * arr[i]);\n\t\t}\n\t\t\n\t\tresult[i] = max(result[i], max[i]);\n\t}\n\t\n\treturn result[arr.length - 1];\n}",
    "{\n\tlong max = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = 1;\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_prev_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_index_prev_value = 0;\n\t\t\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[j] > max_product_value) \n\t\t\t{\n\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\tmax_product_index_value = j;\n\t\t\t\tmax_product_index_prev_value = max_product_index_prev[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = max_product_index_value;\n\t}\n\t\n\tlong max_product_value_final = 0;\n\tlong max_product_index_value_final = 0;\n\t\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product[i] > max_product_value_final) \n\t\t{\n\t\t\tmax_product_value_final = max_product[i];\n\t\t\tmax_product_index_value_final = i;\n\t\t}\n\t}\n\t\n\treturn max_product_",
    "{\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = product * arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < max_arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tforeach(e; arr)\n\t{\n\t\tif(e > max)\n\t\t\tmax = e;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_prod = 1;\n\tlong[] max_prod_arr = new long[arr.length];\n\tlong[] min_prod_arr = new long[arr.length];\n\tmax_prod_arr[0] = arr[0];\n\tmin_prod_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod_arr[i] = max(max_prod_arr[i - 1] * arr[i], min_prod_arr[i - 1] * arr[i], arr[i]);\n\t\tmin_prod_arr[i] = min(max_prod_arr[i - 1] * arr[i], min_prod_arr[i - 1] * arr[i], arr[i]);\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurr_product *= i;\n\t\tmax_product = max(max_product, curr_product);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproduct = max(product, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = product * arr[i];\n\t\tmax = max(max, products[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong last_max = 1;\n\tlong last_min = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t\tmax_product = max(max_product, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = product;\n\t\t\tproduct = max(last_max * i, last_min * i);\n\t\t\tmax_product = max(max_product, product);\n\t\t\tlast_max = temp;\n\t\t\tlast_min = product;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = i;\n\t\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++) \n\t{\n\t\tif (max < max_product[i]) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong max_product_so_far = arr[0];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong[] max_product_reverse = new long[arr.length];\n\tlong max_product_final = 0;\n\tlong max_product_index_final = 0;\n\tlong max_product_index_reverse_final = 0;\n\tlong max_product_reverse_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[0] = 0;\n\tmax_product_reverse[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax_product_index[i] = max(i, max_product_index[i-1] * arr[i]);\n\t\tmax_product_reverse[i] = max(arr[i], max_product_reverse[i-1] * arr[i]);\n\t\tmax_product_index_reverse[i] = max(i, max_product_index_reverse[i-1] * arr[i]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(max_product[i] > max_product_final)\n\t\t{\n\t\t\tmax_product_final = max_product[i];\n\t\t\tmax_product_index_final = max_product_index[i];\n\t\t}\n\t\tif(max_product_reverse[i] > max_product_reverse_final)\n\t\t{\n\t\t\tmax_product_reverse_final = max_product_reverse[i];\n\t\t\tmax_product_index_reverse_final = max_product_index_reverse[i];\n\t\t}\n\t}\n\t\n\treturn max(max_product_final, max_product_reverse",
    "{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong max_element = 0;\n\tforeach(element; arr)\n\t{\n\t\tif(element > max_element)\n\t\t{\n\t\t\tmax_element = element;\n\t\t\tproduct *= element;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(product > max_product)\n\t\t\t\tmax_product = product;\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max(max_product, product);\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = 1;\n\tlong current_min = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max * i, i);\n\t\t\tcurrent_min = min(current_min * i, i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_max = max(current_min * i, i);\n\t\t\tcurrent_min = min(current_max * i, i);\n\t\t}\n\t\tmax_product = max(max_product, current_max);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong product = 1;\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = 1;\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (dp[i] == max) \n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_prod = 0;\n\tlong[] max_prod_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_prod_arr[i] = v;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(w < v)\n\t\t\t\tmax_prod_arr[i] = max(max_prod_arr[i], w * v);\n\t\t}\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product /= current_max;\n\t\t\tcurrent_product *= i;\n\t\t\tcurrent_max = i;\n\t\t}\n\t\tmax_product = max(max_product, current_product);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\twhile (max_index != -1)\n\t{\n\t\twriteln(arr[max_index]);\n\t\tmax_index = max_product_index_prev[max_index];\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong last_num = arr[0];\n\tforeach(num; arr)\n\t{\n\t\tif(num > last_num)\n\t\t{\n\t\t\tcurr_product *= num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr_product = num;\n\t\t\tmax_product = max(max_product, curr_product);\n\t\t}\n\t\tlast_num = num;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_ = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_ = max(max_, dp[j]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_ * arr[i];\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong curr_product = 1;\n\tlong prev_product = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tcurr_product = max(elem, elem * prev_product);\n\t\tmax_product = max(max_product, curr_product);\n\t\tprev_product = curr_product;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax = max(max, product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t\tmax_product_arr[i] = arr[i];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tlong temp = max;\n\t\t\tmax = min;\n\t\t\tmin = temp;\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tforeach(i; arr)\n\t{\n\t\tcurr_prod *= i;\n\t\tmax_prod = max(max_prod, curr_prod);\n\t}\n\treturn max_prod;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_num = arr[0];\n\tlong min_num = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * i, i);\n\t\t\tmin_num = min(min_num * i, i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_num = max(min_num * i, i);\n\t\t\tmin_num = min(max_num * i, i);\n\t\t}\n\t\tmax_product = max(max_product, max_num);\n\t}\n\treturn max_product;\n}",
    "{\n\tint n = arr.length;\n\tlong[] max_product = new long[n];\n\tmax_product[0] = arr[0];\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product[n-1];\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_so_far = 0;\n\tlong max_product_index_so_far = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\tif (max_product_so_far < max_product[i]) \n\t\t{\n\t\t\tmax_product_so_far = max_product[i];\n\t\t\tmax_product_index_so_far = i;\n\t\t}\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_prod_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1]*arr[i], min_prod[i-1]*arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1]*arr[i], min_prod[i-1]*arr[i]), arr[i]);\n\t\tmax_prod_so_far = max(max_prod_so_far, max_prod[i]);\n\t}\n\treturn max_prod_so_far;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n    long max_product = 1;\n    long max_product_so_far = 1;\n    long min_product_so_far = 1;\n    foreach(i; arr)\n    {\n        if (i > 0)\n        {\n            max_product_so_far *= i;\n            min_product_so_far *= i;\n        }\n        else if (i == 0)\n        {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        }\n        else\n        {\n            long temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * i, 1);\n            min_product_so_far = temp * i;\n        }\n        if (max_product_so_far > max_product)\n        {\n            max_product = max_product_so_far;\n        }\n    }\n    return max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_index_prev[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(max(max[i - 1] * arr[i], min[i - 1] * arr[i]), arr[i]);\n\t\tmin[i] = min(min(max[i - 1] * arr[i], min[i - 1] * arr[i]), arr[i]);\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_arr[i] = max(arr[i], max_arr[i - 1] * arr[i]);\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t\tif (product == 0) \n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[i] == dp[j] + 1) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i, v; arr)\n\t{\n\t\tif(v > dp[i])\n\t\t{\n\t\t\tdp[i] = v;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdp[i] = dp[i-1];\n\t\t}\n\t\tmax = max(max, dp[i] * v);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[i] < dp[j] * arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = dp[j] * arr[i];\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tlong prev_prod = 1;\n\tlong prev_max_prod = 1;\n\tlong prev_min_prod = 1;\n\tlong curr_max_prod = 1;\n\tlong curr_min_prod = 1;\n\t\n\tforeach(num; arr)\n\t{\n\t\tcurr_prod = num;\n\t\tcurr_max_prod = max(curr_prod, max(prev_max_prod * curr_prod, prev_min_prod * curr_prod));\n\t\tcurr_min_prod = min(curr_prod, min(prev_max_prod * curr_prod, prev_min_prod * curr_prod));\n\t\t\n\t\tprev_max_prod = curr_max_prod;\n\t\tprev_min_prod = curr_min_prod;\n\t\t\n\t\tmax_prod = max(max_prod, curr_max_prod);\n\t}\n\t\n\treturn max_prod;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, dp[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;i..arr.length)\n\t\t{\n\t\t\tlong product = 1;\n\t\t\tforeach(k;i..j)\n\t\t\t{\n\t\t\t\tproduct *= arr[k];\n\t\t\t}\n\t\t\tmax = max(max,product);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], max_product_arr_rev[i+1] * arr[i]);\n\t}\n\t\n\tlong max_product = max_product_arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\tfor(int i = 1; i < arr.length-1; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i-1] * max_product_arr_rev[i+1]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, e; arr)\n\t{\n\t\tmax_product_arr[i] = e;\n\t\tforeach(j, f; arr[0..i])\n\t\t{\n\t\t\tif(e > f)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], e * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_product = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\t\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max_product)\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > max_element)\n\t\t\tmax_element = elem;\n\t\t\n\t\tproduct *= elem;\n\t\t\n\t\tif(product > max_product)\n\t\t\tmax_product = product;\n\t\telse if(product == 0)\n\t\t\tproduct = 1;\n\t}\n\t\n\tif(max_product == 1)\n\t\treturn max_element;\n\telse\n\t\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\tlong max_product = 0;\n\tlong max_product_index = 0;\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product_arr[i] < max_product_arr[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product < max_product_arr[i]) \n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t\tmax_product_index = i;\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\tlong m = 0;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(w < v)\n\t\t\t\tm = max(m, dp[j]);\n\t\t}\n\t\tdp[i] = m * v;\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tmax_prod[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_prod[i] = max(max_prod[i], max_prod[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_prod[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_so_far *= arr[i];\n\t\t\tmin_so_far = min(min_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * arr[i], 1);\n\t\t\tmin_so_far = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong maxProduct = 1;\n\tlong max = arr[0];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > max) \n\t\t{\n\t\t\tmax = arr[i];\n\t\t\tmaxProduct *= arr[i];\n\t\t}\n\t}\n\treturn maxProduct;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_prev_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_prev_value = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product_value < max_product[j]) \n\t\t\t\t{\n\t\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\t\tmax_product_index_value = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = max_product_index_value;\n\t\tmax_product_prev[i] = i;\n\t}\n\t\n\tmax_product_value = 0;\n\tmax_product_index_value = 0;\n\tmax_product_prev_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (max_product_value < max_product[i]) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\tmax_product_prev_value = max_product_index[max_product_index_value",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = 1;\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = product * arr[i];\n\t\tmax = max(max, product * dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = 1;\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, products[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_back = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_back[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_back[i] = i;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_back[i] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = 0;\n\tint max_index = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\treturn max_so_far;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_num = 0;\n\tlong min_num = 0;\n\t\n\tforeach(num; arr)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * num, num);\n\t\t\tmin_num = min(min_num * num, num);\n\t\t}\n\t\telse if(num == 0)\n\t\t{\n\t\t\tmax_num = 0;\n\t\t\tmin_num = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_num;\n\t\t\tmax_num = max(min_num * num, num);\n\t\t\tmin_num = min(temp * num, num);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_num);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_products[i] = v;\n\t\tforeach(j, w; arr[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tint current_length = 1;\n\tint max_length = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcurrent_product *= i;\n\t\t\tcurrent_length++;\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t\tmax_product = current_product;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product = 1;\n\t\t\tcurrent_length = 1;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1]*arr[i]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], max_product_arr_rev[i+1]*arr[i]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]*max_product_arr_rev[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] dp = new long[arr.length];\n\tlong max = arr[0];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong result = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tresult = max(result, max[i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max(max_product);\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[j] < arr[i]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tproduct = products[j] * arr[i];\n\t\t\t\tif (product > products[i])\n\t\t\t\t{\n\t\t\t\t\tproducts[i] = product;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (arr[i] > products[i])\n\t\t{\n\t\t\tproducts[i] = arr[i];\n\t\t}\n\t\tif (products[i] > max)\n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t\tproduct = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_element;\n\t\t\tmax_element = max(min_element * elem, elem);\n\t\t\tmin_element = min(temp * elem, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_arr[i] < max_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_arr[i] > max)\n\t\t{\n\t\t\tmax = max_arr[i];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = arr[0];\n\tlong min_so_far = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_so_far = max(max_so_far * arr[i], arr[i]);\n\t\t\tmin_so_far = min(min_so_far * arr[i], arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * arr[i], arr[i]);\n\t\t\tmin_so_far = min(temp * arr[i], arr[i]);\n\t\t}\n\t\tmax_product = max(max_product, max_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_index_value = 0;\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_index[i] = i;\n\t}\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tfor(long j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif(max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_index[i] = max_product_index_index[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = max_product_index[i];\n\t\t\tmax_product_index_index_value = max_product_index_index[i];\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 0;\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\t\n\t\tdp[i] = v;\n\t\t\n\t\tforeach(j, w; dp[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t\tdp[i] = max(dp[i], v*w);\n\t\t}\n\t\t\n\t\tmax = max(max, dp[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong prev = arr[0];\n\tforeach(i; 1 .. arr.length) \n\t{\n\t\tif(arr[i] > prev) \n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_product = max(max_product, product);\n\t\t\tproduct = arr[i];\n\t\t}\n\t\tprev = arr[i];\n\t}\n\treturn max(max_product, product);\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far = min(min_product_so_far * i, 1);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_so_far = 0;\n\tlong max_ending_here = 0;\n\tlong min_ending_here = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_ending_here = 0;\n\t\t\tmin_ending_here = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_so_far < max_ending_here)\n\t\t{\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\t\n\treturn max_so_far;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max(max_product);\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tlong current_min = arr[0];\n\t\n\tforeach(i,v;arr)\n\t{\n\t\tif(v > 0)\n\t\t{\n\t\t\tcurrent_max = max(current_max*v,v);\n\t\t\tcurrent_min = min(current_min*v,v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = current_max;\n\t\t\tcurrent_max = max(current_min*v,v);\n\t\t\tcurrent_min = min(temp*v,v);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product,current_max);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max_product_so_far = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tmax_prod[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max_prod[i - 1] * arr[i]);\n\t\tmax = max(max, max_prod[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tmax_products[i] = max(arr[i], max_products[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i-1], arr[i] * min_prod[i-1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(arr[i], max_arr[i-1]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct *= max_arr[i];\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[j] == dp[i] - 1)\n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax = max(max, product * arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tif (arr[i] < 0)\n\t\t{\n\t\t\tlong temp = max;\n\t\t\tmax = min;\n\t\t\tmin = temp;\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_count = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_count_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_count[i] = 1;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t\tmax_product_index_count[i] = max_product_index_count[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value) \n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t\tmax_product_index_count_value = max_product_index_count[i];\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], max_product_arr[i-1] * arr[i]);\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong[] result = new long[arr.length];\n\t\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tresult[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tresult[i] = max(result[i - 1], max[i]);\n\t}\n\t\n\treturn result[arr.length - 1];\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[j] > arr[i]) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t\tproducts[i] = product;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < products.length; i++) \n\t{\n\t\tif (products[i] > max) \n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong result = 0;\n\tlong[] max_product = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tresult = max(result, max_product[i]);\n\t}\n\treturn result;\n}"
  ]
}