{
  "name": "mbpp_460_Extract",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to get the first element of each sublist.\n\t\n*/\nlong[] Extract(long[][] lst) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = Extract;\n\n    assert(candidate([[1L, 2L], [3L, 4L, 5L], [6L, 7L, 8L, 9L]]) == [1L, 3L, 6L]);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L]]) == [1L, 4L]);\n    assert(candidate([[9L, 8L, 1L], [1L, 2L]]) == [9L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] res = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tres[i] = item[0];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tresult ~= lst[i][0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[lst.length];\n\tforeach (i, item; lst)\n\t{\n\t\tret[i] = item[0];\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] res = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tres[i] = item[0];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tresult ~= lst[i][0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tresult ~= lst[i][0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tresult[i] = lst[i][0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[lst.length];\n\tforeach(i, e; lst)\n\t{\n\t\tres[i] = e[0];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tresult[i] = lst[i][0];\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to get the last element of each sublist.\n*/\nlong[] ExtractLast(long[][] lst) \n{\n\tlong[] result = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tresult[i] = lst[i][lst[i].length - 1];\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to get the sum of all elements of each sublist.\n*/\nlong[] Sum(long[][] lst) \n{\n\tlong[] result = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tresult[i] = 0;\n\t\tfor (int j = 0; j < lst[i].length; j++)\n\t\t{\n\t\t\tresult[i] += lst[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to get the maximum element of each sublist.\n*/\nlong[] Max(long[][] lst) \n{\n\tlong[] result = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tresult[i] = lst[i][0];\n\t\tfor (int j = 1; j < lst[i].length; j++)\n\t\t{\n\t\t\tif (result[i] < lst[i][j])\n\t\t\t{\n\t\t\t\tresult[i] = lst[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\n\tWrite a python function to get the minimum element of each sublist.\n*/\nlong[] Min(long[][] lst) \n{\n\tlong[] result =",
    "{\n\tlong[] ret = new long[lst.length];\n\tforeach(i, v; lst)\n\t{\n\t\tret[i] = v[0];\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tres[i] = item[0];\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[lst.length];\n\tforeach(i, item; lst)\n\t{\n\t\tresult[i] = item[0];\n\t}\n\treturn result;\n}"
  ]
}