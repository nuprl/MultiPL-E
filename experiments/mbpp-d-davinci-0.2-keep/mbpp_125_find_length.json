{
  "name": "mbpp_125_find_length",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\n*/\nlong find_length(string string) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_length;\n\n    assert(candidate(\"11000010001\") == 6L);\n    assert(candidate(\"10111\") == 1L);\n    assert(candidate(\"11011101100101\") == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong length = 0;\n\tforeach(char c; string) \n\t{\n\t\tif(c == '1') \n\t\t{\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1' || c == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{ \n\tlong len = 0;\n\tforeach(c; string)\n\t\tlen++;\n\treturn len;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string) \n\t{\n\t\tif (c == '1') \n\t\t{\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t{\n\t\tif(c == '1' || c == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong max_length = 0;\n\tlong count_0 = 0;\n\tlong count_1 = 0;\n\t\n\tforeach(ch; string)\n\t{\n\t\tif(ch == '0')\n\t\t\tcount_0++;\n\t\telse\n\t\t\tcount_1++;\n\t\t\n\t\tif(count_0 == count_1)\n\t\t\tmax_length = max(max_length, count_0 + count_1);\n\t\telse if(count_0 > count_1)\n\t\t{\n\t\t\tcount_0 = 0;\n\t\t\tcount_1 = 0;\n\t\t}\n\t}\n\t\n\tcount_0 = 0;\n\tcount_1 = 0;\n\t\n\tforeach(ch; string)\n\t{\n\t\tif(ch == '0')\n\t\t\tcount_0++;\n\t\telse\n\t\t\tcount_1++;\n\t\t\n\t\tif(count_1 == count_0)\n\t\t\tmax_length = max(max_length, count_0 + count_1);\n\t\telse if(count_1 > count_0)\n\t\t{\n\t\t\tcount_0 = 0;\n\t\t\tcount_1 = 0;\n\t\t}\n\t}\n\t\n\treturn max_length;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t{\n\t\tif(c == '0' || c == '1')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; string)\n\t{\n\t\tif (c == '1')\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t{\n\t\tif(c == '1' || c == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t\tlength++;\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong len = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1')\n\t\t\tlen++;\n\t}\n\treturn len;\n}",
    "{\n\tlong length = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c == '1' || c == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string) \n\t{\n\t\tif(c == '0' || c == '1') \n\t\t{\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t{\n\t\tif(c == '0' || c == '1')\n\t\t{\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(character; string)\n\t{\n\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(c; string)\n\t{\n\t\tif(c == '1' || c == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}",
    "{\n\tlong length = 0;\n\tforeach(ch; string)\n\t{\n\t\tif(ch == '1' || ch == '0')\n\t\t\tlength++;\n\t}\n\treturn length;\n}"
  ]
}