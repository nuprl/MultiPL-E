{
  "name": "mbpp_591_swap_List",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList.dup;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0..$-1] = newList[1..$];\n\tnewList[1..$] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "object.Error@(0): Overlapping arrays in copy: 24 byte(s) overlap of 32\n----------------\n??:? nothrow @safe void rt.util.array._enforceNoOverlap(const(char[]), core.stdc.config.__c_ulong, core.stdc.config.__c_ulong, const(ulong)) [0x42a686]\n??:? _d_arraycopy [0x428522]\n??:? long[] tmp63vtvf76.swap_List(long[]) [0x427e9b]\n??:? void tmp63vtvf76.__unittest_L15_C1() [0x427f3e]\n??:? void tmp63vtvf76.__modtest() [0x428184]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c74f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(sco",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[result.length-1];\n\tresult[result.length-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph2p75c1k.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmph2p75c1k.__unittest_L15_C1() [0x427f99]\n??:? void tmph2p75c1k.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\ttemp[0] = temp2[$-1];\n\ttemp[$-1] = temp2[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1t97b0yw.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp1t97b0yw.__unittest_L16_C1() [0x427f85]\n??:? void tmp1t97b0yw.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430461]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430910]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a5]\n??:? runModuleUnitTests [0x42c211]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa7anueoe.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpa7anueoe.__unittest_L15_C1() [0x427f89]\n??:? void tmpa7anueoe.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr93jyxev.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpr93jyxev.__unittest_L15_C1() [0x427f89]\n??:? void tmpr93jyxev.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length-1];\n\ttempList[tempList.length-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] swapList = newList;\n\tlong temp = swapList[0];\n\tswapList[0] = swapList[swapList.length - 1];\n\tswapList[swapList.length - 1] = temp;\n\treturn swapList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong temp = newList[0];\n\tnewList[0] = newList[newList.length - 1];\n\tnewList[newList.length - 1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp_w1rqw_4.d(10): Error: variable `newList` is shadowing variable `tmp_w1rqw_4.swap_List.newList`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_w1rqw_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList.dup;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length - 1];\n\tnewList2[newList2.length - 1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzj5x9u4j.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpzj5x9u4j.__unittest_L15_C1() [0x427f7d]\n??:? void tmpzj5x9u4j.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6ne6mwzh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmp6ne6mwzh.__unittest_L16_C1() [0x427fd9]\n??:? void tmp6ne6mwzh.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b466]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430960]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43043d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]\n??:? runModuleUnitTests [0x42c3a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6ne6mwzh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmp6ne6mwzh.__unittest_L16_C1() [0x427fd9]\n??:? void tmp6ne6mwzh.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b466]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430960]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43043d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]\n??:? runModuleUnitTests [0x42c3a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6ne6mwzh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmp6ne6mwzh.__unittest_L16_C1() [0x427fd9]\n??:? void tmp6ne6mwzh.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b466]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430960]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43043d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]\n??:? runModuleUnitTests [0x42c3a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw8ib7ofo.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpw8ib7ofo.__unittest_L15_C1() [0x427f89]\n??:? void tmpw8ib7ofo.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprx_1_rn2.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmprx_1_rn2.__unittest_L15_C1() [0x427f95]\n??:? void tmprx_1_rn2.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3seu_kvf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp3seu_kvf.__unittest_L15_C1() [0x427f7d]\n??:? void tmp3seu_kvf.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[newList2.length-1] = temp[0];\n\tfor(int i = 1; i < newList2.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tlong temp = newList[0];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = temp;\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph2p75c1k.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmph2p75c1k.__unittest_L15_C1() [0x427f99]\n??:? void tmph2p75c1k.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong[] newList2 = [newList[4], newList[1], newList[2], newList[3], newList[0]];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmpwzjl090p.d(10): Error: variable `newList` is shadowing variable `tmpwzjl090p.swap_List.newList`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzjl090p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1, 2, 3, 4, 5, 6];\n\tlong[] newList = [6, 2, 3, 4, 5, 1];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmprcd6xetl.d(10): Error: variable `newList` is shadowing variable `tmprcd6xetl.swap_List.newList`\n/tmp/tmprcd6xetl.d(11): Error: declaration `tmprcd6xetl.swap_List.newList` is already defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcd6xetl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong temp = newList[0];\n\tnewList[0] = newList[newList.length - 1];\n\tnewList[newList.length - 1] = temp;\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph2p75c1k.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmph2p75c1k.__unittest_L15_C1() [0x427f99]\n??:? void tmph2p75c1k.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph2p75c1k.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmph2p75c1k.__unittest_L15_C1() [0x427f99]\n??:? void tmph2p75c1k.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList.dup;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3seu_kvf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp3seu_kvf.__unittest_L15_C1() [0x427f7d]\n??:? void tmp3seu_kvf.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp_first = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_first;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6ne6mwzh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmp6ne6mwzh.__unittest_L16_C1() [0x427fd9]\n??:? void tmp6ne6mwzh.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b466]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430960]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43043d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]\n??:? runModuleUnitTests [0x42c3a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong first = temp[0];\n\tlong last = temp[$-1];\n\ttemp[0] = last;\n\ttemp[$-1] = first;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tforeach(i, item; newList[1 .. $ - 1])\n\t{\n\t\tresult[i + 1] = item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3seu_kvf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp3seu_kvf.__unittest_L15_C1() [0x427f7d]\n??:? void tmp3seu_kvf.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph2p75c1k.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmph2p75c1k.__unittest_L15_C1() [0x427f99]\n??:? void tmph2p75c1k.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList[1..$-1];\n\tnewList2 = newList2 ~ newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m7vjhy2.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp3m7vjhy2.__unittest_L14_C1() [0x427f4d]\n??:? void tmp3m7vjhy2.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430429]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprx_1_rn2.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmprx_1_rn2.__unittest_L15_C1() [0x427f95]\n??:? void tmprx_1_rn2.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprx_1_rn2.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmprx_1_rn2.__unittest_L15_C1() [0x427f95]\n??:? void tmprx_1_rn2.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprx_1_rn2.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmprx_1_rn2.__unittest_L15_C1() [0x427f95]\n??:? void tmprx_1_rn2.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430920]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b5]\n??:? runModuleUnitTests [0x42c221]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = temp[temp.length-1];\n\tnewList2[temp.length-1] = temp[0];\n\tfor(int i = 1; i < temp.length-1; i++)\n\t{\n\t\tnewList2[i] = temp[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{ \n\tlong temp = newList[0]; \n\tnewList[0] = newList[newList.length - 1]; \n\tnewList[newList.length - 1] = temp; \n\treturn newList; \n} \nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length - 1];\n\tnewList2[newList2.length - 1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tforeach(int i, long e; newList)\n\t{\n\t\tif(i != 0 && i != newList.length - 1)\n\t\t{\n\t\t\tresult[i] = e;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw8ib7ofo.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpw8ib7ofo.__unittest_L15_C1() [0x427f89]\n??:? void tmpw8ib7ofo.__modtest() [0x428160]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}\n/*\n\tWrite a python function to remove the nth index character from a nonempty string.\n*/\nstring remove_char(string str, int n)\n{\n\tstring temp = str;\n\ttemp = temp.remove(n, 1);\n\treturn temp;\n}\n/*\n\tWrite a python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2).\n*/\nstring four_copies(string str)\n{\n\tstring temp = str;\n\ttemp = temp.dup.dup.dup.dup;\n\treturn temp;\n}\n/*\n\tWrite a python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string.\n*/\nstring first_three(string str)\n{\n\tstring temp = str;\n\tif (temp.length < 3)\n\t\treturn temp;\n\telse\n\t\treturn temp.substr(0, 3);\n}\n/*\n\tWrite a python function to get a string from two given strings, separated by a space and swap the first two characters of each string.\n*/\nstring swap_first_two(string str1, string str2)\n{\n\tstring temp1 = str1;\n\tstring temp2 = str2;\n\tstring temp3 = temp1.substr(0, 2) ~ temp2.substr(2, temp2.length - 2) ~ \" \" ~ temp2.substr(0, 2) ~ temp1.substr(2, temp1.length - 2);\n\treturn temp3;\n}\n/*\n\tWrite a python function to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\n*/\nstring add_ing(string str)\n{\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmpjy3lfe9t.d(60): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy3lfe9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList = [1, 2, 3, 4, 5];\n\tlong[] newList = [5, 2, 3, 4, 1];\n\treturn newList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmpqjzhfenv.d(10): Error: variable `newList` is shadowing variable `tmpqjzhfenv.swap_List.newList`\n/tmp/tmpqjzhfenv.d(11): Error: declaration `tmpqjzhfenv.swap_List.newList` is already defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjzhfenv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0zyqh4u0.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp0zyqh4u0.__unittest_L15_C1() [0x427f85]\n??:? void tmp0zyqh4u0.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430461]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430910]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a5]\n??:? runModuleUnitTests [0x42c211]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3seu_kvf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp3seu_kvf.__unittest_L15_C1() [0x427f7d]\n??:? void tmp3seu_kvf.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3seu_kvf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp3seu_kvf.__unittest_L15_C1() [0x427f7d]\n??:? void tmp3seu_kvf.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$ - 1];\n\ttempList[$ - 1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] swappedList = newList;\n\tlong temp = swappedList[0];\n\tswappedList[0] = swappedList[$-1];\n\tswappedList[$-1] = temp;\n\treturn swappedList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\t\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1665517673,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] result = new long[newList.length];\n\tlong temp;\n\ttemp = newList[0];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = temp;\n\treturn result;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp84dvcccm.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmp84dvcccm.__unittest_L17_C1() [0x427f85]\n??:? void tmp84dvcccm.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c497]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b32a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430541]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]\n??:? runModuleUnitTests [0x42c26d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\t\n\tforeach(i, item; newList)\n\t{\n\t\tif(i != 0 && i != newList.length - 1)\n\t\t{\n\t\t\ttempList[i] = item;\n\t\t}\n\t}\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to interchange the first and last elements in a list.\n\t\n*/\nlong[] swap_List(long[] newList) \n{\n\tlong[] tempList;\n\ttempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}\nunittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5vnghcdh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp5vnghcdh.__unittest_L16_C1() [0x427f8d]\n??:? void tmp5vnghcdh.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c443]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430918]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2ad]\n??:? runModuleUnitTests [0x42c219]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}