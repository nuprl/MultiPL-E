{
  "name": "mbpp_141_pancake_sort",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort a list of elements.\n\t\n*/\nlong[] pancake_sort(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. i + 1].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0..nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0..nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index..$] ~ result[0..max_index];\n\t\tresult = result[$-i..$] ~ result[0..$-i];\n\t}\n\treturn result;\n}",
    "{\n\tint[] a = nums.dup;\n\tint n = a.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(a[0 .. n - i]);\n\t\ta = a[max_idx .. $] ~ a[0 .. max_idx];\n\t\ta = a[n - i .. $] ~ a[0 .. n - i];\n\t}\n\treturn a;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index] ~ nums[n - i .. $];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. i + 1];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. $];\n\t\tresult = result[0 .. result.length - i].reverse ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] sorted = nums.dup;\n\tsorted.sort;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong index = result.indexOf(sorted[i]);\n\t\t\n\t\tif(index != i)\n\t\t{\n\t\t\tif(index != 0)\n\t\t\t{\n\t\t\t\tresult[0 .. index + 1] = result[0 .. index + 1].reverse;\n\t\t\t}\n\t\t\t\n\t\t\tresult[0 .. i + 1] = result[0 .. i + 1].reverse;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong max_index = result[0 .. i].indexOf(max);\n\t\tresult = result[max_index .. i].reverse ~ result[i .. $];\n\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\t\n\t\tif(max_index != $ - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[$ - i - 1 .. $] ~ result[0 .. $ - i - 1];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}"
  ]
}