{
  "name": "mbpp_141_pancake_sort",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort a list of elements.\n\t\n*/\nlong[] pancake_sort(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. i + 1].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0..nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0..nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index..$] ~ result[0..max_index];\n\t\tresult = result[$-i..$] ~ result[0..$-i];\n\t}\n\treturn result;\n}",
    "{\n\tint[] a = nums.dup;\n\tint n = a.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(a[0 .. n - i]);\n\t\ta = a[max_idx .. $] ~ a[0 .. max_idx];\n\t\ta = a[n - i .. $] ~ a[0 .. n - i];\n\t}\n\treturn a;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index] ~ nums[n - i .. $];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. i + 1];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. $];\n\t\tresult = result[0 .. result.length - i].reverse ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] sorted = nums.dup;\n\tsorted.sort;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong index = result.indexOf(sorted[i]);\n\t\t\n\t\tif(index != i)\n\t\t{\n\t\t\tif(index != 0)\n\t\t\t{\n\t\t\t\tresult[0 .. index + 1] = result[0 .. index + 1].reverse;\n\t\t\t}\n\t\t\t\n\t\t\tresult[0 .. i + 1] = result[0 .. i + 1].reverse;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong max_index = result[0 .. i].indexOf(max);\n\t\tresult = result[max_index .. i].reverse ~ result[i .. $];\n\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\t\n\t\tif(max_index != $ - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[$ - i - 1 .. $] ~ result[0 .. $ - i - 1];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult[0 .. max_index + 1] = result[0 .. max_index + 1].reverse;\n\t\t\tresult[0 .. i + 1] = result[0 .. i + 1].reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. nums.length - i].reverse ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0..n) \n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\treverse(nums[0..max_idx]);\n\t\treverse(nums[0..n-i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. $ - i] ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index == result.length - i - 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t}\n\t\t\n\t\tresult = result[result.length - i - 1 .. $] ~ result[0 .. result.length - i - 1];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = result[0 .. i].maxIndex;\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\t\n\t\tif(max_index != nums.length - i - 1) \n\t\t{\n\t\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\t\tsorted = sorted[0 .. nums.length - i] ~ sorted[nums.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong[] temp = result[0 .. i + 1];\n\t\tlong max_index = temp.indexOf(temp.max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. $];\n\t\tresult = result[0 .. $ - i].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tfor (long i = 0; i < result.length; i++) \n\t{\n\t\tlong max_index = maxIndex(result[i .. $]);\n\t\tresult = result[max_index .. $] + result[0 .. max_index].reverse + result[$ - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif(max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. $].reverse ~ result[result.length - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tif(max_index != 0)\n\t\t\t{\n\t\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\t}\n\t\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0..result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0..result.length)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index..$].reverse ~ result[0..max_index].reverse;\n\t\tresult = result[0..$-i].reverse;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = temp[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tif(temp[j] > max)\n\t\t\t{\n\t\t\t\tmax = temp[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tlong[] temp2 = temp[0 .. max_index].reverse;\n\t\t\ttemp = temp2 ~ temp[max_index .. temp.length];\n\t\t}\n\t\t\n\t\tlong[] temp2 = temp[0 .. temp.length - i - 1].reverse;\n\t\ttemp = temp2 ~ temp[temp.length - i .. temp.length];\n\t}\n\t\n\treturn temp;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. i + 1];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index == nums.length - i - 1)\n\t\t\tcontinue;\n\t\t\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tresult[0 .. max_index + 1] = result[0 .. max_index + 1].reverse;\n\t\t}\n\t\t\n\t\tresult[0 .. nums.length - i] = result[0 .. nums.length - i].reverse;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max])\n\t\t\t{\n\t\t\t\tmax = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult = result[0 .. max].reverse ~ result[max .. $];\n\t\tresult = result[0 .. $ - i].reverse ~ result[$ - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max = maxElement(nums[0 .. n - i]);\n\t\tauto max_index = max.index;\n\t\t\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tif(max_index != 0)\n\t\t\t{\n\t\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index];\n\t\t\t}\n\t\t\tnums = nums[n - i - 1 .. $] ~ nums[0 .. n - i - 1];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\t// Find index of the maximum element\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\t// Flip the subarray from 0 to max_idx\n\t\treverse(nums[0 .. max_idx]);\n\t\t// Flip the whole array\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. $];\n\t\tresult = result[0 .. $ - i].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp;\n\tlong max_index;\n\tlong max_value;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong temp_value;\n\tlong temp_index;\n\tlong temp_value2;\n\tlong temp_index2;\n\tlong temp_value3;\n\tlong temp_index3;\n\t\n\tfor (i = 0; i < nums.length; i++)\n\t{\n\t\tmax_value = result[0];\n\t\tmax_index = 0;\n\t\tfor (j = 0; j < result.length - i; j++)\n\t\t{\n\t\t\tif (result[j] > max_value)\n\t\t\t{\n\t\t\t\tmax_value = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_index != result.length - i - 1)\n\t\t{\n\t\t\tif (max_index != 0)\n\t\t\t{\n\t\t\t\ttemp = result[0 .. max_index + 1].dup;\n\t\t\t\tfor (k = 0; k < temp.length; k++)\n\t\t\t\t{\n\t\t\t\t\tresult[k] = temp[temp.length - k - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ttemp = result[0 .. result.length - i].dup;\n\t\t\tfor (k = 0; k < temp.length; k++)\n\t\t\t{\n\t\t\t\tresult[k] = temp[temp.length - k - 1];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tauto max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. $ - 1] ~ result[$ .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach (i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\t\n\tlong[] temp = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\ttemp[i] = nums[nums.length - 1 - i];\n\t}\n\t\n\tresult = temp;\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\tif (max_idx != n-i-1)\n\t\t{\n\t\t\tnums = nums[max_idx..$] ~ nums[0..max_idx] ~ nums[n-i..$];\n\t\t\tnums = nums[0..n-i] ~ nums[n-i..$];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tif(max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. nums.length - i].reverse ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. i].reverse ~ result[i .. $];\n\t\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i-1..$] ~ result[0..n-i-1];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = nums;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\t\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tif(temp[j] > temp[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != temp.length - 1)\n\t\t{\n\t\t\ttemp = temp[max_index .. temp.length] ~ temp[0 .. max_index];\n\t\t\tresult = temp ~ result;\n\t\t}\n\t\t\n\t\ttemp = temp[0 .. temp.length - 1];\n\t\tresult = temp ~ result;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..$-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[$-1..0] ~ result[$];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n - 1) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] ans = nums.dup;\n\tforeach(i; 0 .. ans.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. ans.length - i)\n\t\t{\n\t\t\tif(ans[j] > ans[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tif(max_index == ans.length - i - 1)\n\t\t\tcontinue;\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tans[0 .. max_index + 1] = ans[0 .. max_index + 1].reverse;\n\t\t}\n\t\tans[0 .. ans.length - i] = ans[0 .. ans.length - i].reverse;\n\t}\n\treturn ans;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. result.length];\n\t\t\tresult = result[0 .. result.length - i].reverse ~ result[result.length - i .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\tlong[] sorted_nums = [];\n\t\n\twhile (nums_copy.length > 0)\n\t{\n\t\tlong max_index = 0;\n\t\tlong max_value = nums_copy[0];\n\t\t\n\t\tfor (long i = 0; i < nums_copy.length; i++)\n\t\t{\n\t\t\tif (nums_copy[i] > max_value)\n\t\t\t{\n\t\t\t\tmax_value = nums_copy[i];\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_index != 0)\n\t\t{\n\t\t\tnums_copy = nums_copy[max_index..$].reverse.cat(nums_copy[0..max_index].reverse);\n\t\t}\n\t\t\n\t\tnums_copy = nums_copy[1..$].reverse;\n\t\tsorted_nums ~= max_value;\n\t}\n\t\n\treturn sorted_nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult[0 .. max_index + 1] = result[0 .. max_index + 1].reverse;\n\t\t\tresult[0 .. i + 1] = result[0 .. i + 1].reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = flip(nums, max_idx);\n\t\t\tnums = flip(nums, n - i - 1);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[] temp31 = new long[nums.length];\n\tlong[] temp32 = new long[nums.length];\n\tlong[] temp33 = new long[nums.length];\n\tlong[] temp34 =",
    "{\n\tint n = nums.length;\n\twhile (n > 1) \n\t{\n\t\tint k = maxIndex(nums[0..n]);\n\t\tif (k != n - 1) \n\t\t{\n\t\t\treverse(nums[0..k + 1]);\n\t\t\treverse(nums[0..n]);\n\t\t}\n\t\tn--;\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max])\n\t\t\t\tmax = j;\n\t\t}\n\t\tresult = result[0 .. max].reverse ~ result[max .. $].reverse;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = nums;\n\tlong[] temp2 = nums;\n\tlong[] temp3 = nums;\n\tlong[] temp4 = nums;\n\tlong[] temp5 = nums;\n\tlong[] temp6 = nums;\n\tlong[] temp7 = nums;\n\tlong[] temp8 = nums;\n\tlong[] temp9 = nums;\n\tlong[] temp10 = nums;\n\tlong[] temp11 = nums;\n\tlong[] temp12 = nums;\n\tlong[] temp13 = nums;\n\tlong[] temp14 = nums;\n\tlong[] temp15 = nums;\n\tlong[] temp16 = nums;\n\tlong[] temp17 = nums;\n\tlong[] temp18 = nums;\n\tlong[] temp19 = nums;\n\tlong[] temp20 = nums;\n\tlong[] temp21 = nums;\n\tlong[] temp22 = nums;\n\tlong[] temp23 = nums;\n\tlong[] temp24 = nums;\n\tlong[] temp25 = nums;\n\tlong[] temp26 = nums;\n\tlong[] temp27 = nums;\n\tlong[] temp28 = nums;\n\tlong[] temp29 = nums;\n\tlong[] temp30 = nums;\n\tlong[] temp31 = nums;\n\tlong[] temp32 = nums;\n\tlong[] temp33 = nums;\n\tlong[] temp34 = nums;\n\tlong[] temp35 = nums;\n\tlong[] temp36 = nums;\n\tlong[] temp37 = nums;\n\tlong[] temp38 = nums;\n\tlong[] temp39 = nums;\n\tlong[] temp40 = nums;\n\tlong[] temp41 = nums;\n\tlong[] temp42 = nums;\n\tlong[] temp43 = nums;\n\tlong[] temp44 = nums;\n\tlong[] temp45 = nums;\n\tlong[] temp46 = nums;\n\tlong[] temp47 = nums;\n\tlong[] temp48 = nums;\n\tlong[] temp49 = nums;\n\tlong[] temp50 = nums;\n\t",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tlong max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[0 .. n - i] ~ result[n - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = new long[result.length];\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\t\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\ttemp = result[0 .. max_index].dup;\n\t\t\tresult[0 .. max_index] = result[max_index .. result.length].dup;\n\t\t\tresult[max_index .. result.length] = temp.dup;\n\t\t\t\n\t\t\ttemp = result[0 .. result.length - i - 1].dup;\n\t\t\tresult[0 .. result.length - i - 1] = result[result.length - i .. result.length].dup;\n\t\t\tresult[result.length - i .. result.length] = temp.dup;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\treverse(nums[0 .. max_index + 1]);\n\t\t\treverse(nums[0 .. i + 1]);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tif(max_index == nums.length - i - 1)\n\t\t\tcontinue;\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t}\n\t\tresult = result[nums.length - i - 1 .. $] ~ result[0 .. nums.length - i - 1];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = nums.dup;\n\tforeach(i; 0 .. res.length)\n\t{\n\t\tlong max_index = res[0 .. i].maxIndex;\n\t\tif(max_index != i)\n\t\t{\n\t\t\tres = res[max_index .. $].reverse ~ res[0 .. max_index].reverse ~ res[i .. $];\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[] temp31 = new long[nums.length];\n\tlong[] temp32 = new long[nums.length];\n\tlong[] temp33 = new long[nums.length];\n\tlong[] temp34 =",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tauto max = maxElement(result[0 .. i]);\n\t\tif(max != i)\n\t\t{\n\t\t\tresult = result[0 .. max].reverse ~ result[max .. i] ~ result[i .. $];\n\t\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tfor (long i = nums.length; i > 1; i--) \n\t{\n\t\tlong max_index = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0..max_index].reverse ~ result[max_index..$];\n\t\tresult = result[0..i].reverse ~ result[i..$];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\t\n\treturn nums;\n}",
    "{\n\tlong[] result = nums;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n - i]);\n\t\tresult = flip(result, max_idx + 1);\n\t\tresult = flip(result, n - i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index - 1 .. 0];\n\t\t\tresult = result[i .. $] ~ result[i - 1 .. 0];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong max_idx = maxIndex(nums[0 .. n - i]);\n\t\tnums = reverse(nums[0 .. max_idx + 1]);\n\t\tnums = reverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n - i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n - i..$] ~ result[0..n - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n - 1) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[max_idx + 1 .. $];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length - 1)\n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - 1 .. 0] ~ result[$ .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(nums[j] > nums[max])\n\t\t\t{\n\t\t\t\tmax = j;\n\t\t\t}\n\t\t}\n\t\tif(max != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max .. $] ~ result[0 .. max];\n\t\t\tresult = result[nums.length - i - 1 .. $] ~ result[0 .. nums.length - i - 1];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tlong[] result = new long[n];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[n-i-1] = num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\treverse(nums[0 .. max_index + 1]);\n\t\t\treverse(nums[0 .. n - i]);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = nums;\n\tlong[] temp2 = nums;\n\tlong[] temp3 = nums;\n\tlong[] temp4 = nums;\n\tlong[] temp5 = nums;\n\tlong[] temp6 = nums;\n\tlong[] temp7 = nums;\n\tlong[] temp8 = nums;\n\tlong[] temp9 = nums;\n\tlong[] temp10 = nums;\n\tlong[] temp11 = nums;\n\tlong[] temp12 = nums;\n\tlong[] temp13 = nums;\n\tlong[] temp14 = nums;\n\tlong[] temp15 = nums;\n\tlong[] temp16 = nums;\n\tlong[] temp17 = nums;\n\tlong[] temp18 = nums;\n\tlong[] temp19 = nums;\n\tlong[] temp20 = nums;\n\tlong[] temp21 = nums;\n\tlong[] temp22 = nums;\n\tlong[] temp23 = nums;\n\tlong[] temp24 = nums;\n\tlong[] temp25 = nums;\n\tlong[] temp26 = nums;\n\tlong[] temp27 = nums;\n\tlong[] temp28 = nums;\n\tlong[] temp29 = nums;\n\tlong[] temp30 = nums;\n\tlong[] temp31 = nums;\n\tlong[] temp32 = nums;\n\tlong[] temp33 = nums;\n\tlong[] temp34 = nums;\n\tlong[] temp35 = nums;\n\tlong[] temp36 = nums;\n\tlong[] temp37 = nums;\n\tlong[] temp38 = nums;\n\tlong[] temp39 = nums;\n\tlong[] temp40 = nums;\n\tlong[] temp41 = nums;\n\tlong[] temp42 = nums;\n\tlong[] temp43 = nums;\n\tlong[] temp44 = nums;\n\tlong[] temp45 = nums;\n\tlong[] temp46 = nums;\n\tlong[] temp47 = nums;\n\tlong[] temp48 = nums;\n\tlong[] temp49 = nums;\n\tlong[] temp50 = nums;\n\t",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[] temp31 = new long[nums.length];\n\tlong[] temp32 = new long[nums.length];\n\tlong[] temp33 = new long[nums.length];\n\t",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0..result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0..result.length-i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index..$] ~ result[0..max_index];\n\t\tresult = result[result.length-i..$] ~ result[0..result.length-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = result[0 .. i].maxIndex;\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif (nums.length <= 1)\n\t\treturn nums;\n\t\n\tlong[] result = nums.dup;\n\t\n\tfor (int i = result.length - 1; i > 0; i--) \n\t{\n\t\tint max_index = 0;\n\t\tfor (int j = 1; j <= i; j++)\n\t\t\tif (result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t\n\t\tif (max_index == i)\n\t\t\tcontinue;\n\t\t\n\t\tif (max_index != 0) \n\t\t{\n\t\t\tresult[0..max_index+1] = result[0..max_index+1].reverse;\n\t\t}\n\t\t\n\t\tresult[0..i+1] = result[0..i+1].reverse;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tint n = nums.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = flip(result, max_idx);\n\t\tresult = flip(result, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index == result.length - i - 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tresult[0 .. max_index + 1] = result[0 .. max_index + 1].reverse;\n\t\t}\n\t\t\n\t\tresult[0 .. result.length - i] = result[0 .. result.length - i].reverse;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif(max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\ttemp = temp[0 .. temp.length - i];\n\t\tlong max_index = temp.length - 1;\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tif(temp[j] > temp[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\ttemp = temp[max_index .. max_index + 1] ~ temp[0 .. max_index] ~ temp[max_index + 1 .. temp.length];\n\t\ttemp = temp[0 .. temp.length - i];\n\t\tresult = temp ~ result[temp.length .. result.length];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. $ - i] ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tauto max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. i].reverse ~ result[i .. $];\n\t\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tlong[] nums_copy = nums.dup;\n\tlong[] nums_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = nums.dup;\n\tlong[] nums_copy_copy_copy_copy_copy",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tfor (long i = 0; i < result.length; i++) \n\t{\n\t\tlong max_index = result.length - i - 1;\n\t\tfor (long j = 0; j < result.length - i; j++) \n\t\t{\n\t\t\tif (result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tif (max_index != result.length - i - 1) \n\t\t{\n\t\t\tresult = result[0 .. max_index].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. result.length - i - 1].reverse ~ result[result.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong n = result.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong max_idx = 0;\n\t\tfor (long j = 0; j < n - i; j++) \n\t\t{\n\t\t\tif (result[j] > result[max_idx]) \n\t\t\t{\n\t\t\t\tmax_idx = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[0 .. max_idx].reverse ~ result[max_idx .. $];\n\t\tresult = result[0 .. n - i - 1].reverse ~ result[n - i - 1 .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n - 1) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = flip(result, max_index);\n\t\t\tresult = flip(result, nums.length - i - 1);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = [];\n\tlong[] temp2 = [];\n\tlong[] temp3 = [];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\ttemp = result[0 .. i];\n\t\ttemp2 = result[i .. $];\n\t\ttemp3 = temp2[0 .. temp2.length - 1];\n\t\ttemp2 = temp2[temp2.length - 1 .. $];\n\t\ttemp2 ~= temp;\n\t\tresult = temp2 ~ temp3;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = max(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. $ - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[$ - i .. $] ~ result[0 .. $ - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = n; i > 1; i--) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. i]);\n\t\tif (max_idx != i - 1) \n\t\t{\n\t\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\t\tresult = result[i - 1 .. $] ~ result[0 .. i - 1];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tif(max_index != 0)\n\t\t\t{\n\t\t\t\tresult[0 .. max_index + 1] = result[0 .. max_index + 1].reverse;\n\t\t\t}\n\t\t\tresult[0 .. result.length - i] = result[0 .. result.length - i].reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t\tresult = result[i .. $] ~ result[0 .. i].reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif(max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\tnums = nums[n - i .. $] ~ nums[0 .. n - i];\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max = maxElement(result[0 .. i + 1]);\n\t\tlong maxIndex = result[0 .. i + 1].indexOf(max);\n\t\tif(maxIndex != 0) \n\t\t{\n\t\t\tresult = result[maxIndex .. i + 1].reverse ~ result[0 .. maxIndex];\n\t\t}\n\t\tresult = result[0 .. i + 1].reverse ~ result[i + 1 .. result.length];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tint n = nums.length;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tint max_index = 0;\n\t\tfor(int j = 0; j < n-i; j++)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index..$].reverse.cat(result[0..max_index].reverse).cat(result[$-i..$]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\ttemp[i] = i;\n\t}\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\ttemp[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach(j; 0 .. temp[i] / 2)\n\t\t{\n\t\t\tlong temp_num = result[j];\n\t\t\tresult[j] = result[temp[i] - j];\n\t\t\tresult[temp[i] - j] = temp_num;\n\t\t}\n\t\t\n\t\tforeach(j; 0 .. nums.length - i - 1 / 2)\n\t\t{\n\t\t\tlong temp_num = result[j];\n\t\t\tresult[j] = result[nums.length - i - j - 1];\n\t\t\tresult[nums.length - i - j - 1] = temp_num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = max_index_of(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..$-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[$-i..$] ~ result[0..$-i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\t\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tforeach(i; 0..n) \n\t{\n\t\tlong max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif (max_index == n - i - 1)\n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}"
  ]
}