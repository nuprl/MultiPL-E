{
  "name": "mbpp_608_bell_Number",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpj9oiaf7f.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9oiaf7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpiew8bv46.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiew8bv46.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdgog671i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpdgog671i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgog671i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpo94rgspm.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo94rgspm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpjb38tl55.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjb38tl55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpwvvvn8he.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvvvn8he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmplgihzzcr.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgihzzcr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i - j - 1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpjlbfshoh.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlbfshoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpnx6eh9ah.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpnx6eh9ah.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx6eh9ah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpxas8xsoe.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpxas8xsoe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxas8xsoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8dmlxb62.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dmlxb62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]]();\n\tbell[0][0] = 1;\n\tforeach (i; 1 .. n + 1) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tforeach (j; 1 .. i + 1) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmprotpygrm.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprotpygrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long][long] bell = new long[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpxu_l8gbv.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu_l8gbv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long][long] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpemk0u8ni.d(16): Error: found `unittest` instead of statement\n/tmp/tmpemk0u8ni.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemk0u8ni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpp3aaa_do.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpp3aaa_do.d(16): Error: found `unittest` instead of statement\n/tmp/tmpp3aaa_do.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3aaa_do.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmptwcvmyb9.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwcvmyb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp5cw4dfoz.d(16): Error: found `unittest` instead of statement\n/tmp/tmp5cw4dfoz.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cw4dfoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8dmlxb62.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dmlxb62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long[long]] bell = new long[long[long]](); \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp35nthn17.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35nthn17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long[long]] bell = new long[long[long]]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpzvtjryd8.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvtjryd8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvvvwizar.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvvwizar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpxas8xsoe.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpxas8xsoe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxas8xsoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long][long] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvc2ney4w.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvc2ney4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long[long]] bell = new long[long[long]](n+1); \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp2js876yx.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2js876yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long[long]] bell = new long[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmptwz2gb5u.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmptwz2gb5u.d(11): Error: cannot implicitly convert expression `0` of type `int` to `const(long)[long]`\n/tmp/tmptwz2gb5u.d(15): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmptwz2gb5u.d(18): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmptwz2gb5u.d(20): Error: cannot implicitly convert expression `n` of type `long` to `const(long)[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwz2gb5u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvvvwizar.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvvwizar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpza6dzg_o.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpza6dzg_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdgog671i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpdgog671i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgog671i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp5cw4dfoz.d(16): Error: found `unittest` instead of statement\n/tmp/tmp5cw4dfoz.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cw4dfoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] dp = new long[n+1]; \n    dp[0] = dp[1] = 1; \n    for (long i = 2; i <= n; i++) \n    { \n        dp[i] = 0; \n        for (long j = 0; j < i; j++) \n            dp[i] += dp[j] * dp[i-j-1]; \n    } \n    return dp[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmplt4g0ugs.d(10): Error: cannot implicitly convert expression `new long[](cast(ulong)(n + 1L))` of type `long[]` to `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplt4g0ugs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor(long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor(long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvgqnbgyo.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgqnbgyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpy3q5lgz3.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3q5lgz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpza6dzg_o.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpza6dzg_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long[n + 1]]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp647mefvi.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp647mefvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpmsoetinu.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsoetinu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long](n+1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i-j-1];\n\t\t}\n\t}\n\treturn bell[n];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp7gm7ynms.d(10): Error: need size of rightmost array, not type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gm7ynms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpmsoetinu.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsoetinu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n+1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp03_6m7oh.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03_6m7oh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tforeach (i; 1 .. n + 1)\n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tforeach (j; 1 .. i + 1)\n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp_2l_g5c7.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmp_2l_g5c7.d(11): Error: only one index allowed to index `long`\n/tmp/tmp_2l_g5c7.d(14): Error: only one index allowed to index `long`\n/tmp/tmp_2l_g5c7.d(17): Error: only one index allowed to index `long`\n/tmp/tmp_2l_g5c7.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2l_g5c7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpht83huld.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpht83huld.d(11): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(14): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(17): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht83huld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long[n + 1]]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp647mefvi.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp647mefvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong bell[][] = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp4vqy_sw3.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[][] bell`\n/tmp/tmp4vqy_sw3.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vqy_sw3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpa9xypt_b.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9xypt_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long][long] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpemk0u8ni.d(16): Error: found `unittest` instead of statement\n/tmp/tmpemk0u8ni.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemk0u8ni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long[long]] bell = new long[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpsvxjqejz.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpsvxjqejz.d(11): Error: cannot implicitly convert expression `0` of type `int` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(15): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(19): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(21): Error: cannot implicitly convert expression `n` of type `long` to `const(long)[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvxjqejz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpo94rgspm.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo94rgspm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvvvwizar.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvvwizar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long[n + 1]]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp647mefvi.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp647mefvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long[long]] bell = new long[long[long]](); \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp689a9e3u.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp689a9e3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpht83huld.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpht83huld.d(11): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(14): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(17): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht83huld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpcgdt3p06.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgdt3p06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp5cw4dfoz.d(16): Error: found `unittest` instead of statement\n/tmp/tmp5cw4dfoz.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cw4dfoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long[n + 1]]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp647mefvi.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp647mefvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpde6iqpxe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde6iqpxe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\t\n\tforeach(i; 1 .. n + 1)\n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t\n\t\tforeach(j; 1 .. i + 1)\n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\t\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmphs_l0b6t.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphs_l0b6t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpht83huld.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpht83huld.d(11): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(14): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(17): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht83huld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0, 0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i, 0] = bell[i - 1, i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i, j] = bell[i - 1, j - 1] + bell[i, j - 1];\n\t\t}\n\t}\n\treturn bell[n, 0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpd7y3vy3v.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpd7y3vy3v.d(11): Error: only one index allowed to index `long[long]`\n/tmp/tmpd7y3vy3v.d(14): Error: only one index allowed to index `long[long]`\n/tmp/tmpd7y3vy3v.d(17): Error: only one index allowed to index `long[long]`\n/tmp/tmpd7y3vy3v.d(20): Error: only one index allowed to index `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7y3vy3v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpdu1k_u_9.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpdu1k_u_9.d(11): Error: only one index allowed to index `long`\n/tmp/tmpdu1k_u_9.d(15): Error: only one index allowed to index `long`\n/tmp/tmpdu1k_u_9.d(18): Error: only one index allowed to index `long`\n/tmp/tmpdu1k_u_9.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu1k_u_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long[long]] bell = new long[long[long]](); \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp4pn0x6_f.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4pn0x6_f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpnx6eh9ah.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpnx6eh9ah.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx6eh9ah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[]] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpppg94hqe.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpppg94hqe.d(11): Error: cannot implicitly convert expression `0` of type `int` to `const(long)[]`\n/tmp/tmpppg94hqe.d(14): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[]`\n/tmp/tmpppg94hqe.d(17): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[]`\n/tmp/tmpppg94hqe.d(20): Error: cannot implicitly convert expression `n` of type `long` to `const(long)[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpppg94hqe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long[long]] bell = new long[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpsvxjqejz.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpsvxjqejz.d(11): Error: cannot implicitly convert expression `0` of type `int` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(15): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(19): Error: cannot implicitly convert expression `i` of type `long` to `const(long)[long]`\n/tmp/tmpsvxjqejz.d(21): Error: cannot implicitly convert expression `n` of type `long` to `const(long)[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvxjqejz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp8dmlxb62.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dmlxb62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpxas8xsoe.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpxas8xsoe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxas8xsoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpmsoetinu.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsoetinu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpza6dzg_o.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpza6dzg_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp5cw4dfoz.d(16): Error: found `unittest` instead of statement\n/tmp/tmp5cw4dfoz.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cw4dfoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long][n+1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i][0] = bell[i-1][i-1]; \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpoa6xii94.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpoa6xii94.d(11): Error: only one index allowed to index `long`\n/tmp/tmpoa6xii94.d(14): Error: only one index allowed to index `long`\n/tmp/tmpoa6xii94.d(16): Error: only one index allowed to index `long`\n/tmp/tmpoa6xii94.d(18): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa6xii94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpwvvvn8he.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvvvn8he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long] bell = new long[long[n + 1]]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n    return bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp647mefvi.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp647mefvi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long] bell = new long[long[n + 1]]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; ++i) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; ++j) \n\t\t\tbell[i] += bell[j] * bell[i - j - 1]; \n\t} \n\treturn bell[n]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpb2ry7grw.d(10): Error: need size of rightmost array, not type `long[n + 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2ry7grw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpujwcn6r0.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujwcn6r0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdgog671i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpdgog671i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgog671i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpnx6eh9ah.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpnx6eh9ah.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx6eh9ah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmptwcvmyb9.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwcvmyb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong[long][long] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpemk0u8ni.d(16): Error: found `unittest` instead of statement\n/tmp/tmpemk0u8ni.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemk0u8ni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpvvvwizar.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvvwizar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpsvsypyr_.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvsypyr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpht83huld.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpht83huld.d(11): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(14): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(17): Error: only one index allowed to index `long`\n/tmp/tmpht83huld.d(20): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht83huld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpku6ttxlp.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku6ttxlp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[long[long]] bell = new long[long[long]](); \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i][0] = bell[i - 1][i - 1]; \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpow3vlr29.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow3vlr29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long[][] bell = new long[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpo6cgxtr2.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6cgxtr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor(int i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor(int j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp7v5oskbf.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v5oskbf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpxas8xsoe.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpxas8xsoe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxas8xsoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpr5mdpiuv.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpr5mdpiuv.d(11): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(14): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(16): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(18): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5mdpiuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp69tili1t.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp69tili1t.d(16): Error: found `unittest` instead of statement\n/tmp/tmp69tili1t.d(24): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69tili1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpde6iqpxe.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde6iqpxe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]]();\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmp_4m6d6jc.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4m6d6jc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long[long]] bell = new long[long[long]](n + 1);\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; ++j)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpwvvvn8he.d(10): Error: need size of rightmost array, not type `long[long]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvvvn8he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tif (n == 0) \n\t\treturn 1;\n\t\n\tlong bell[n + 1][n + 1];\n\tbell[0][0] = 1;\n\t\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpdmj8bw42.d(13): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmpdmj8bw42.d(13): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmj8bw42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}\nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1666123986,
      "stdout": "",
      "stderr": "/tmp/tmpr5mdpiuv.d(10): Error: cannot implicitly convert expression `new long[long][](cast(ulong)(n + 1L))` of type `long[long][]` to `long[long]`\n/tmp/tmpr5mdpiuv.d(11): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(14): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(16): Error: only one index allowed to index `long`\n/tmp/tmpr5mdpiuv.d(18): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5mdpiuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \nunittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp2odxn_2i.d(10): Deprecation: instead of C-style syntax, use D-style syntax `long[n + 1][n + 1] bell`\n/tmp/tmp2odxn_2i.d(10): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2odxn_2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}