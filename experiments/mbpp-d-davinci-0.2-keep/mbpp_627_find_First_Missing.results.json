{
  "name": "mbpp_627_find_First_Missing",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplvlqwqv7.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmplvlqwqv7.find_First_Missing(long[]) [0x427d8e]\n??:? void tmplvlqwqv7.__unittest_L32_C1() [0x427e51]\n??:? void tmplvlqwqv7.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile(start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid)\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; new_array)\n\t{\n\t\tif(!array.canFind(i))\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "/tmp/tmpj4su5nm_.d(20): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4su5nm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end) \n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tend = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[array.length - 1];\n\t\n\tlong[] range = new long[max - min + 1];\n\t\n\tforeach(i; array)\n\t{\n\t\trange[i - min] = 1;\n\t}\n\t\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + i;\n\t\t}\n\t}\n\t\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz64tbxt3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpz64tbxt3.__unittest_L30_C1() [0x427ef4]\n??:? void tmpz64tbxt3.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplyy2tl41.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmplyy2tl41.find_First_Missing(long[]) [0x427d92]\n??:? void tmplyy2tl41.__unittest_L32_C1() [0x427e55]\n??:? void tmplyy2tl41.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1)\n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tright = mid - 1;\n\t\t}\n\t\telse\n\t\t\tleft = mid + 1;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq89talqw.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpq89talqw.__unittest_L31_C1() [0x427e40]\n??:? void tmpq89talqw.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile(start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\t\n\twhile (low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid)\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong len = array.length;\n\twhile (i < len) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk9mazzd1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpk9mazzd1.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpk9mazzd1.__unittest_L36_C1() [0x427e65]\n??:? void tmpk9mazzd1.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa3cwhqde.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpa3cwhqde.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpa3cwhqde.__unittest_L32_C1() [0x427e51]\n??:? void tmpa3cwhqde.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\tif (array[mid] != mid + 1)\n\t\t\tr = mid - 1;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\tif (array[0] != 1)\n\t\treturn 1;\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfufxdt0q.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42829e]\n??:? long tmpfufxdt0q.find_First_Missing(long[]) [0x427d92]\n??:? void tmpfufxdt0q.__unittest_L28_C1() [0x427e89]\n??:? void tmpfufxdt0q.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn last + 1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first < last)\n\t{\n\t\tif(array[mid] > mid)\n\t\t\tlast = mid;\n\t\telse\n\t\t\tfirst = mid + 1;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "/tmp/tmpxp01yty2.d(16): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp01yty2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) {\n\t\t\treturn mid + 1;\n\t\t} else if (array[mid] != mid + 1) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpocct7qs7.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpocct7qs7.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpocct7qs7.__unittest_L26_C1() [0x427e51]\n??:? void tmpocct7qs7.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpersbenq0.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpersbenq0.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpersbenq0.__unittest_L32_C1() [0x427e51]\n??:? void tmpersbenq0.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong length = array.length;\n\t\n\twhile(i < length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppbxt8m51.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmppbxt8m51.find_First_Missing(long[]) [0x427d98]\n??:? void tmppbxt8m51.__unittest_L27_C1() [0x427ed0]\n??:? void tmppbxt8m51.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\t\n\tif (min != 1)\n\t\treturn 1;\n\t\n\tif (max == array.length)\n\t\treturn max + 1;\n\t\n\tlong[] temp = new long[max - min + 1];\n\t\n\tforeach (i; 0 .. array.length)\n\t\ttemp[array[i] - min] = array[i];\n\t\n\tforeach (i; 0 .. temp.length)\n\t\tif (temp[i] == 0)\n\t\t\treturn i + min;\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5jmnsgyd.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42824d]\n??:? void tmp5jmnsgyd.__unittest_L30_C1() [0x427f00]\n??:? void tmp5jmnsgyd.__modtest() [0x427fcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c307]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b19a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430425]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b171]\n??:? runModuleUnitTests [0x42c0dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428710]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpersbenq0.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpersbenq0.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpersbenq0.__unittest_L32_C1() [0x427e51]\n??:? void tmpersbenq0.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong len = array.length;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpe9ouycf7.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpe9ouycf7.find_First_Missing(long[]) [0x427d9c]\n??:? void tmpe9ouycf7.__unittest_L28_C1() [0x427ed4]\n??:? void tmpe9ouycf7.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile (i < array.length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpersbenq0.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpersbenq0.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpersbenq0.__unittest_L32_C1() [0x427e51]\n??:? void tmpersbenq0.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tlong i = first;\n\twhile(i < last)\n\t{\n\t\tif(array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn last+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3juguj2b.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp3juguj2b.__unittest_L25_C1() [0x427e24]\n??:? void tmp3juguj2b.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43017d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b035]\n??:? runModuleUnitTests [0x42bfa1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] temp = new long[count];\n\t\n\tforeach(i; 0 .. count)\n\t{\n\t\ttemp[i] = first + i;\n\t}\n\t\n\tforeach(i; 0 .. count)\n\t{\n\t\tif(temp[i] != array[i])\n\t\t{\n\t\t\treturn temp[i];\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3bh8258t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428235]\n??:? void tmp3bh8258t.__unittest_L30_C1() [0x427eec]\n??:? void tmp3bh8258t.__modtest() [0x427fb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b182]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43040d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430399]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b159]\n??:? runModuleUnitTests [0x42c0c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpymtjjndn.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpymtjjndn.find_First_Missing(long[]) [0x427d98]\n??:? void tmpymtjjndn.__unittest_L27_C1() [0x427ed0]\n??:? void tmpymtjjndn.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong m = (i + j) / 2;\n\twhile (i < j) \n\t{\n\t\tif (array[m] == m) \n\t\t{\n\t\t\ti = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = m;\n\t\t}\n\t\tm = (i + j) / 2;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprvqqbg6y.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmprvqqbg6y.find_First_Missing(long[]) [0x427d92]\n??:? void tmprvqqbg6y.__unittest_L32_C1() [0x427e55]\n??:? void tmprvqqbg6y.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9xdv3ffz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp9xdv3ffz.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp9xdv3ffz.__unittest_L32_C1() [0x427e51]\n??:? void tmp9xdv3ffz.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[array.length-1];\n\tlong[] range = new long[max-min+1];\n\tforeach(i; array)\n\t{\n\t\trange[i-min] = i;\n\t}\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min+i;\n\t\t}\n\t}\n\treturn max+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxre63y4x.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpxre63y4x.__unittest_L26_C1() [0x427e9c]\n??:? void tmpxre63y4x.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6e1gf3ta.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp6e1gf3ta.find_First_Missing(long[]) [0x427d90]\n??:? void tmp6e1gf3ta.__unittest_L32_C1() [0x427e51]\n??:? void tmp6e1gf3ta.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428678]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x4285ff]\n??:? _d_run_main [0x42856a]\n??:? main [0x427f47]\n??:? __libc_start_main [0x6def0554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\t\n\tlong[] diffs = array[1..$].map!(a => a - first)();\n\t\n\tlong max_diff = diffs.max;\n\t\n\tif(max_diff == 1)\n\t\treturn last + 1;\n\t\n\tlong[] diff_counts = new long[max_diff + 1];\n\t\n\tforeach(diff; diffs)\n\t{\n\t\tdiff_counts[diff]++;\n\t}\n\t\n\tlong missing_diff = 0;\n\t\n\tforeach(diff; diff_counts)\n\t{\n\t\tif(diff == 0)\n\t\t\tcontinue;\n\t\t\t\n\t\tif(diff_counts[diff] == 0)\n\t\t{\n\t\t\tmissing_diff = diff;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn first + missing_diff;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "/tmp/tmpb17hdb8b.d(16): Error: no property `map` for type `long[]`\n/tmp/tmpb17hdb8b.d(18): Error: no property `max` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb17hdb8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnh4hhuy9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpnh4hhuy9.find_First_Missing(long[]) [0x427d98]\n??:? void tmpnh4hhuy9.__unittest_L27_C1() [0x427ed0]\n??:? void tmpnh4hhuy9.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqdrlvv0_.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpqdrlvv0_.__unittest_L30_C1() [0x427e2c]\n??:? void tmpqdrlvv0_.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i, e; array)\n\t{\n\t\tnew_array[e - first] = e;\n\t}\n\tforeach(i, e; new_array)\n\t{\n\t\tif(e != i + first)\n\t\t{\n\t\t\treturn i + first;\n\t\t}\n\t}\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq_77495m.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282c6]\n??:? long tmpq_77495m.find_First_Missing(long[]) [0x427dd3]\n??:? void tmpq_77495m.__unittest_L27_C1() [0x427eb1]\n??:? void tmpq_77495m.__modtest() [0x427f94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b162]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430379]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b139]\n??:? runModuleUnitTests [0x42c0a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n    long low = 0;\n    long high = array.length - 1;\n    long mid;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) \n        {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) \n        {\n            high = mid - 1;\n        } \n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpad3ja0b0.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpad3ja0b0.find_First_Missing(long[]) [0x427d8a]\n??:? void tmpad3ja0b0.__unittest_L31_C1() [0x427e4d]\n??:? void tmpad3ja0b0.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa3cwhqde.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpa3cwhqde.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpa3cwhqde.__unittest_L32_C1() [0x427e51]\n??:? void tmpa3cwhqde.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8rbhf5l9.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp8rbhf5l9.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp8rbhf5l9.__unittest_L26_C1() [0x427e51]\n??:? void tmp8rbhf5l9.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[array.length-1];\n\tlong mid = (first+last)/2;\n\t\n\tif(first == last)\n\t{\n\t\treturn first+1;\n\t}\n\t\n\tif(array[mid] == mid)\n\t{\n\t\treturn find_First_Missing(array[mid..$]);\n\t}\n\telse\n\t{\n\t\treturn find_First_Missing(array[0..mid]);\n\t}\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6z9d4htt.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmp6z9d4htt.__unittest_L28_C1() [0x427e78]\n??:? void tmp6z9d4htt.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnh4hhuy9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpnh4hhuy9.find_First_Missing(long[]) [0x427d98]\n??:? void tmpnh4hhuy9.__unittest_L27_C1() [0x427ed0]\n??:? void tmpnh4hhuy9.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp72x665nw.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmp72x665nw.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp72x665nw.__unittest_L36_C1() [0x427e65]\n??:? void tmp72x665nw.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\t\n\tif(size == 0)\n\t\treturn first;\n\t\n\tif(size == 1)\n\t\treturn last;\n\t\n\tlong mid = size / 2;\n\t\n\tif(array[mid] == mid)\n\t\treturn find_First_Missing(array[mid..$]);\n\telse\n\t\treturn find_First_Missing(array[0..mid]);\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu5i8jfpl.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpu5i8jfpl.__unittest_L27_C1() [0x427e90]\n??:? void tmpu5i8jfpl.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong len = array.length;\n\tlong min = array[0];\n\tlong max = array[len-1];\n\tlong range = max - min;\n\tlong[] hash = new long[range+1];\n\t\n\tforeach(long num; array)\n\t{\n\t\thash[num-min] = 1;\n\t}\n\t\n\tfor(i = 0; i < range; i++)\n\t{\n\t\tif(hash[i] == 0)\n\t\t\treturn i+min;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprrl4y34b.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmprrl4y34b.__unittest_L30_C1() [0x427e98]\n??:? void tmprrl4y34b.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] new_array = new long[count];\n\tforeach(i; 0..count)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..count)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpctzqxv6v.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428235]\n??:? void tmpctzqxv6v.__unittest_L27_C1() [0x427eec]\n??:? void tmpctzqxv6v.__modtest() [0x427fb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b182]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43040d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430399]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b159]\n??:? runModuleUnitTests [0x42c0c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphnlqiyyj.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmphnlqiyyj.find_First_Missing(long[]) [0x427d98]\n??:? void tmphnlqiyyj.__unittest_L27_C1() [0x427ed0]\n??:? void tmphnlqiyyj.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length - 1;\n\tlong mid;\n\twhile(i <= j)\n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range+1];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpstve365x.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpstve365x.__unittest_L27_C1() [0x427e88]\n??:? void tmpstve365x.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong diff = last - first;\n\tlong size = array.length;\n\tlong expected = (diff + 1) / size;\n\tlong actual = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong[] diffs = new long[size];\n\t\n\twhile (i < size)\n\t{\n\t\tactual = array[i] - array[j];\n\t\tdiffs[i] = actual;\n\t\ti++;\n\t\tj++;\n\t}\n\t\n\ti = 0;\n\twhile (i < size)\n\t{\n\t\tif (diffs[i] != expected)\n\t\t{\n\t\t\treturn array[i] - 1;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdin9n7ba.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42824d]\n??:? void tmpdin9n7ba.__unittest_L40_C1() [0x427f00]\n??:? void tmpdin9n7ba.__modtest() [0x427fcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c307]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b19a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430425]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b171]\n??:? runModuleUnitTests [0x42c0dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428710]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\t\n\tif(first == last)\n\t\treturn first + 1;\n\t\t\n\tlong mid;\n\tlong left = 0;\n\tlong right = $;\n\t\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif(array[mid] == mid + 1)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\t\n\treturn array[left] - 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "/tmp/tmp_v7t8afu.d(21): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_v7t8afu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid;\n\twhile (left < right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = 0;\n\twhile (i <= j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr9zag65r.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpr9zag65r.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpr9zag65r.__unittest_L32_C1() [0x427e51]\n??:? void tmpr9zag65r.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong start = 0;\n\tlong end = n - 1;\n\tlong mid;\n\twhile(start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzsx7926n.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpzsx7926n.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpzsx7926n.__unittest_L32_C1() [0x427e51]\n??:? void tmpzsx7926n.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5g1hr_sv.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp5g1hr_sv.__unittest_L27_C1() [0x427df0]\n??:? void tmp5g1hr_sv.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpv0x1jwn2.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpv0x1jwn2.find_First_Missing(long[]) [0x427d90]\n??:? void tmpv0x1jwn2.__unittest_L31_C1() [0x427e51]\n??:? void tmpv0x1jwn2.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp758v5eyp.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp758v5eyp.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp758v5eyp.__unittest_L32_C1() [0x427e51]\n??:? void tmp758v5eyp.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min++;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzt1chfr1.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428296]\n??:? long tmpzt1chfr1.find_First_Missing(long[]) [0x427dc6]\n??:? void tmpzt1chfr1.__unittest_L28_C1() [0x427e85]\n??:? void tmpzt1chfr1.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn last + 1;\n\t\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1)\n\t\t{\n\t\t\tif(array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tlast = mid - 1;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "/tmp/tmpr_fxr5jb.d(16): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_fxr5jb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjk53_ka9.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpjk53_ka9.find_First_Missing(long[]) [0x427d96]\n??:? void tmpjk53_ka9.__unittest_L28_C1() [0x427ecc]\n??:? void tmpjk53_ka9.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = (first + last) / 2;\n\tlong[] left;\n\tlong[] right;\n\tlong[] left_right;\n\tlong[] right_left;\n\tlong[] left_left;\n\tlong[] right_right;\n\t\n\tif (first == last)\n\t{\n\t\treturn first + 1;\n\t}\n\t\n\tif (array.length == 1)\n\t{\n\t\treturn array[0] + 1;\n\t}\n\t\n\tleft = array[0 .. mid];\n\tright = array[mid .. $];\n\t\n\tleft_right = left[$-1 .. $];\n\tright_left = right[0 .. 1];\n\t\n\tleft_left = left[0 .. $-1];\n\tright_right = right[1 .. $];\n\t\n\tif (left_right[0] + 1 == right_left[0])\n\t{\n\t\treturn find_First_Missing(right);\n\t}\n\telse if (left_left[$-1] + 1 == left_right[0])\n\t{\n\t\treturn find_First_Missing(left);\n\t}\n\telse\n\t{\n\t\treturn left_right[0] + 1;\n\t}\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu88hdhdo.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpu88hdhdo.__unittest_L52_C1() [0x4280ec]\n??:? void tmpu88hdhdo.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430461]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430910]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a5]\n??:? runModuleUnitTests [0x42c211]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(array[mid] != mid && array[mid-1] == mid-1)\n\t\t\treturn mid;\n\t\telse if(array[mid] == mid)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid - 1;\n\t}\n\t\n\treturn mid;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprrhepok5.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmprrhepok5.__unittest_L29_C1() [0x427e5c]\n??:? void tmprrhepok5.__modtest() [0x427f28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end)\n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif (array[mid] > mid)\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp24vw561u.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp24vw561u.__unittest_L28_C1() [0x427df4]\n??:? void tmp24vw561u.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..size)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5dsuskjh.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42822d]\n??:? void tmp5dsuskjh.__unittest_L27_C1() [0x427ee4]\n??:? void tmp5dsuskjh.__modtest() [0x427fb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430405]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430391]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsfoilkj9.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpsfoilkj9.find_First_Missing(long[]) [0x427d98]\n??:? void tmpsfoilkj9.__unittest_L28_C1() [0x427ed0]\n??:? void tmpsfoilkj9.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] array_ = array.dup;\n\tlong[] array_1 = array_.dup;\n\tlong[] array_2 = array_.dup;\n\t\n\tarray_.sort;\n\t\n\tlong[] array_3 = array_.dup;\n\t\n\tif(array_.length == 0)\n\t{\n\t\treturn 1;\n\t}\n\t\n\tif(array_[0] != 1)\n\t{\n\t\treturn 1;\n\t}\n\t\n\tif(array_[array_.length - 1] == array_.length)\n\t{\n\t\treturn array_.length + 1;\n\t}\n\t\n\tlong i = 0;\n\t\n\twhile(i < array_.length)\n\t{\n\t\tif(array_[i] != i + 1)\n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn 0;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp6gab7vlj.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gab7vlj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) {\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) {\n\t\t\tfirst = mid + 1;\n\t\t} else {\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjh9wl4db.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpjh9wl4db.find_First_Missing(long[]) [0x427d98]\n??:? void tmpjh9wl4db.__unittest_L23_C1() [0x427ed0]\n??:? void tmpjh9wl4db.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n    long n = array.length;\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) \n        {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) \n        {\n            high = mid - 1;\n        }\n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz8qeyuzy.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpz8qeyuzy.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpz8qeyuzy.__unittest_L32_C1() [0x427e51]\n??:? void tmpz8qeyuzy.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i; 0..length)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..length)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt5oy8agc.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmpt5oy8agc.__unittest_L27_C1() [0x427fa6]\n??:? void tmpt5oy8agc.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430415]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b161]\n??:? runModuleUnitTests [0x42c0cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 2;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwrg5ubay.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpwrg5ubay.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpwrg5ubay.__unittest_L36_C1() [0x427e69]\n??:? void tmpwrg5ubay.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == array.length) \n\t{\n\t\treturn array.length + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpyf2k2fdd.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpyf2k2fdd.find_First_Missing(long[]) [0x427d89]\n??:? void tmpyf2k2fdd.__unittest_L34_C1() [0x427e61]\n??:? void tmpyf2k2fdd.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tfor(long i = 0; i < array.length - 1; i++) \n\t{\n\t\tif(array[i+1] - array[i] > 1)\n\t\t\treturn array[i] + 1;\n\t}\n\t\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp34fa15hw.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmp34fa15hw.__unittest_L24_C1() [0x427e78]\n??:? void tmp34fa15hw.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile(start <= end) \n\t{\n\t\tmid = start + (end - start) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\tif(start > array.length - 1) \n\t{\n\t\treturn array.length + 1;\n\t}\n\treturn array[start] - 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_mp3rk4w.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42829e]\n??:? long tmp_mp3rk4w.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp_mp3rk4w.__unittest_L35_C1() [0x427e8d]\n??:? void tmp_mp3rk4w.__modtest() [0x427f70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong k = 0;\n\twhile(i < j) \n\t{\n\t\tk = (i + j) / 2;\n\t\tif(array[k] == k) \n\t\t{\n\t\t\ti = k + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsij2fjdz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpsij2fjdz.find_First_Missing(long[]) [0x427d96]\n??:? void tmpsij2fjdz.__unittest_L28_C1() [0x427ecc]\n??:? void tmpsij2fjdz.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tforeach(i; 0..array.length-1)\n\t{\n\t\tif(array[i+1] - array[i] > 1)\n\t\t\treturn array[i] + 1;\n\t}\n\t\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplvpvyr2v.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281c5]\n??:? void tmplvpvyr2v.__unittest_L24_C1() [0x427e7c]\n??:? void tmplvpvyr2v.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaoog91ha.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpaoog91ha.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpaoog91ha.__unittest_L32_C1() [0x427e51]\n??:? void tmpaoog91ha.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] array2 = array.dup;\n\tarray2.sort;\n\tlong i = 0;\n\twhile(i < array2.length)\n\t{\n\t\tif(array2[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpiwgdkm5_.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwgdkm5_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbzaj7q5g.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpbzaj7q5g.find_First_Missing(long[]) [0x427d98]\n??:? void tmpbzaj7q5g.__unittest_L27_C1() [0x427ed0]\n??:? void tmpbzaj7q5g.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0oq7wlwc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmp0oq7wlwc.find_First_Missing(long[]) [0x427d8a]\n??:? void tmp0oq7wlwc.__unittest_L31_C1() [0x427e4d]\n??:? void tmp0oq7wlwc.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[array.length - 1];\n\tlong[] range = new long[max - min + 1];\n\tforeach(i; array)\n\t{\n\t\trange[i - min] = 1;\n\t}\n\tforeach(i; range)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + i;\n\t\t}\n\t}\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9ao7ez1w.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp9ao7ez1w.__unittest_L26_C1() [0x427ef4]\n??:? void tmp9ao7ez1w.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa3cwhqde.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpa3cwhqde.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpa3cwhqde.__unittest_L32_C1() [0x427e51]\n??:? void tmpa3cwhqde.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid = 0;\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9xdv3ffz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp9xdv3ffz.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp9xdv3ffz.__unittest_L32_C1() [0x427e51]\n??:? void tmp9xdv3ffz.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9xdv3ffz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp9xdv3ffz.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp9xdv3ffz.__unittest_L32_C1() [0x427e51]\n??:? void tmp9xdv3ffz.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = array.length;\n\tlong min = array[0];\n\tlong max = array[n-1];\n\tlong[] diff = new long[n-1];\n\t\n\tfor(i = 0; i < n-1; i++)\n\t{\n\t\tdiff[i] = array[i+1] - array[i];\n\t}\n\t\n\tfor(i = 0; i < n-1; i++)\n\t{\n\t\tif(diff[i] != 1)\n\t\t{\n\t\t\treturn array[i] + 1;\n\t\t}\n\t}\n\t\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqlc_xtar.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmpqlc_xtar.__unittest_L32_C1() [0x427fa6]\n??:? void tmpqlc_xtar.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430415]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b161]\n??:? runModuleUnitTests [0x42c0cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] new_array = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0..size)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppqnqgk1l.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmppqnqgk1l.__unittest_L27_C1() [0x427fa6]\n??:? void tmppqnqgk1l.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430415]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b161]\n??:? runModuleUnitTests [0x42c0cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdibzlmi_.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpdibzlmi_.find_First_Missing(long[]) [0x427d90]\n??:? void tmpdibzlmi_.__unittest_L31_C1() [0x427e51]\n??:? void tmpdibzlmi_.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_986mmlt.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp_986mmlt.__unittest_L23_C1() [0x427e2c]\n??:? void tmp_986mmlt.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(start <= end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if(array[mid] == mid + 1)\n\t\t\tstart = mid + 1;\n\t\telse\n\t\t\tend = mid - 1;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1bke_kc_.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmp1bke_kc_.find_First_Missing(long[]) [0x427d8a]\n??:? void tmp1bke_kc_.__unittest_L28_C1() [0x427e4d]\n??:? void tmp1bke_kc_.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tindex = mid - first;\n\t\tif(array[index] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if(array[index] > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tforeach(long element; array)\n\t{\n\t\tif(element != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile(i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk07v4q4b.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpk07v4q4b.find_First_Missing(long[]) [0x427d92]\n??:? void tmpk07v4q4b.__unittest_L32_C1() [0x427e55]\n??:? void tmpk07v4q4b.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length;\n\tlong mid = 0;\n\twhile(left < right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong bv = 0;\n\tlong bw = 0;\n\tlong bx = 0;\n\tlong by = 0;\n\tlong bz = 0;\n\tlong ca\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmpvr6c3n3e.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpvr6c3n3e.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr6c3n3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqp_2lhuh.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpqp_2lhuh.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpqp_2lhuh.__unittest_L32_C1() [0x427e51]\n??:? void tmpqp_2lhuh.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\t\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp38natagh.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmp38natagh.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp38natagh.__unittest_L40_C1() [0x427e61]\n??:? void tmp38natagh.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\tlong mid = 0;\n\tlong mid_value = 0;\n\t\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tmid_value = array[mid];\n\t\t\n\t\tif(mid_value > mid) \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpv339fny2.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpv339fny2.find_First_Missing(long[]) [0x427d95]\n??:? void tmpv339fny2.__unittest_L31_C1() [0x427ecc]\n??:? void tmpv339fny2.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\t\n\twhile(start < end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] != mid) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\t\n\tif(start == array.length) \n\t{\n\t\treturn array.length;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile(start < end)\n\t{\n\t\tmid = (start + end) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (last == $)\n\t\treturn $+1;\n\t\n\tlong mid;\n\twhile (first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid + 1)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t}\n\t\n\treturn first + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "/tmp/tmp76rliuvv.d(16): Error: `$` is valid only inside [] of index or slice\n/tmp/tmp76rliuvv.d(17): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76rliuvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnh4hhuy9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpnh4hhuy9.find_First_Missing(long[]) [0x427d98]\n??:? void tmpnh4hhuy9.__unittest_L27_C1() [0x427ed0]\n??:? void tmpnh4hhuy9.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5vrj0xvm.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp5vrj0xvm.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp5vrj0xvm.__unittest_L32_C1() [0x427e51]\n??:? void tmp5vrj0xvm.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile(i < array.length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphnlqiyyj.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmphnlqiyyj.find_First_Missing(long[]) [0x427d98]\n??:? void tmphnlqiyyj.__unittest_L27_C1() [0x427ed0]\n??:? void tmphnlqiyyj.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpoqinkv_b.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpoqinkv_b.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpoqinkv_b.__unittest_L32_C1() [0x427e51]\n??:? void tmpoqinkv_b.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\tlong[] temp = new long[size];\n\tforeach(i; array)\n\t{\n\t\ttemp[i-first] = 1;\n\t}\n\tforeach(i; 0 .. size)\n\t{\n\t\tif(temp[i] == 0)\n\t\t{\n\t\t\treturn i+first;\n\t\t}\n\t}\n\treturn last+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0ywagllq.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282a6]\n??:? long tmp0ywagllq.find_First_Missing(long[]) [0x427dc3]\n??:? void tmp0ywagllq.__unittest_L27_C1() [0x427e95]\n??:? void tmp0ywagllq.__modtest() [0x427f78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkqq7qk57.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpkqq7qk57.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpkqq7qk57.__unittest_L33_C1() [0x427e51]\n??:? void tmpkqq7qk57.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first + 1;\n\tlong[] temp = new long[length];\n\tforeach(i; array)\n\t{\n\t\ttemp[i - first] = i;\n\t}\n\tforeach(i; temp)\n\t{\n\t\tif(temp[i] != i + first)\n\t\t{\n\t\t\treturn i + first;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd4bwlw_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428215]\n??:? void tmpd4bwlw_r.__unittest_L27_C1() [0x427ecc]\n??:? void tmpd4bwlw_r.__modtest() [0x427f98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b162]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430379]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b139]\n??:? runModuleUnitTests [0x42c0a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmilh1r77.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpmilh1r77.find_First_Missing(long[]) [0x427d98]\n??:? void tmpmilh1r77.__unittest_L30_C1() [0x427ed0]\n??:? void tmpmilh1r77.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpw54pc4ne.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpw54pc4ne.find_First_Missing(long[]) [0x427d92]\n??:? void tmpw54pc4ne.__unittest_L36_C1() [0x427e69]\n??:? void tmpw54pc4ne.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[array.length-1];\n\tlong[] range = new long[max-min+1];\n\tforeach(i; array)\n\t\trange[i-min] = i;\n\tforeach(i; range)\n\t\tif(i == 0)\n\t\t\treturn min+i;\n\treturn max+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6pv2e96g.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6pv2e96g.__unittest_L20_C1() [0x427e9c]\n??:? void tmp6pv2e96g.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif (low > high) \n\t{\n\t\treturn mid + 1;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_r3y01h1.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmp_r3y01h1.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp_r3y01h1.__unittest_L39_C1() [0x427e65]\n??:? void tmp_r3y01h1.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid) \n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\t\n\t\t\tend = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\t\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvf7nu_36.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpvf7nu_36.__unittest_L35_C1() [0x427e40]\n??:? void tmpvf7nu_36.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == array.length)\n\t\treturn last + 1;\n\t\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid + 1)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid - 1;\n\t}\n\t\n\treturn first + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3cqhsdd0.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4281ad]\n??:? void tmp3cqhsdd0.__unittest_L32_C1() [0x427e60]\n??:? void tmp3cqhsdd0.__modtest() [0x427f2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428670]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length;\n\t\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\t\n\tif (min != 1)\n\t\treturn 1;\n\t\n\tforeach (i; 1 .. array.length)\n\t{\n\t\tif (array[i] - array[i-1] != 1)\n\t\t\treturn array[i-1] + 1;\n\t}\n\t\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_kpw441.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpa_kpw441.__unittest_L24_C1() [0x427e84]\n??:? void tmpa_kpw441.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428690]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[array.length-1];\n\t\n\tlong[] range = new long[last-first+1];\n\t\n\tforeach(i; 0..range.length)\n\t{\n\t\trange[i] = first+i;\n\t}\n\t\n\tforeach(i; array)\n\t{\n\t\trange[i-first] = 0;\n\t}\n\t\n\tforeach(i; range)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn 0;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpddtjqdqd.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42822d]\n??:? void tmpddtjqdqd.__unittest_L35_C1() [0x427ee4]\n??:? void tmpddtjqdqd.__modtest() [0x427fb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430405]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430391]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong pos;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tpos = mid - first;\n\t\t\n\t\tif(array[pos] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if(array[pos] > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpej6q0pdw.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpej6q0pdw.find_First_Missing(long[]) [0x427d98]\n??:? void tmpej6q0pdw.__unittest_L30_C1() [0x427ed0]\n??:? void tmpej6q0pdw.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile (i < array.length) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn array.length + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg8u0u40b.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpg8u0u40b.__unittest_L21_C1() [0x427dcc]\n??:? void tmpg8u0u40b.__modtest() [0x427e98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpba7xt34y.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpba7xt34y.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpba7xt34y.__unittest_L27_C1() [0x427e51]\n??:? void tmpba7xt34y.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa3cwhqde.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpa3cwhqde.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpa3cwhqde.__unittest_L32_C1() [0x427e51]\n??:? void tmpa3cwhqde.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong len = array.length;\n\t\n\tif(len == 0)\n\t\treturn 0;\n\t\n\tif(len == 1)\n\t{\n\t\tif(array[0] == 1)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn 1;\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(array[i] != i + 1)\n\t\t\treturn i + 1;\n\t}\n\t\n\treturn len + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnosy1_i4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpnosy1_i4.__unittest_L33_C1() [0x427e20]\n??:? void tmpnosy1_i4.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43017d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b035]\n??:? runModuleUnitTests [0x42bfa1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = array.length;\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (length == 1)\n\t\treturn 2;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\tif (array[mid] == mid + 1)\n\t\treturn find_First_Missing(array[mid..$]);\n\telse\n\t\treturn find_First_Missing(array[0..mid]);\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp28wgx2gu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp28wgx2gu.__unittest_L27_C1() [0x427e9c]\n??:? void tmp28wgx2gu.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong m = 0;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (array[m] == m) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length - 1;\n\tlong mid = 0;\n\twhile(i <= j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid - 1;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong mid_prev = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo84ca_px.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpo84ca_px.__unittest_L33_C1() [0x427e84]\n??:? void tmpo84ca_px.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428690]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile(low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm45afryi.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpm45afryi.find_First_Missing(long[]) [0x427d8c]\n??:? void tmpm45afryi.__unittest_L31_C1() [0x427e4d]\n??:? void tmpm45afryi.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length;\n\twhile(left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range+1];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn max+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq2l2g_s7.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpq2l2g_s7.__unittest_L27_C1() [0x427f42]\n??:? void tmpq2l2g_s7.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9t6xuzna.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmp9t6xuzna.find_First_Missing(long[]) [0x427d96]\n??:? void tmp9t6xuzna.__unittest_L28_C1() [0x427ecc]\n??:? void tmp9t6xuzna.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif (first != 0)\n\t\treturn 0;\n\t\n\tif (last == $)\n\t\treturn $;\n\t\n\tlong mid;\n\t\n\twhile (first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid - 1;\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "/tmp/tmp_vkw0rn5.d(16): Error: `$` is valid only inside [] of index or slice\n/tmp/tmp_vkw0rn5.d(17): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vkw0rn5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i - min]++;\n\t}\n\t\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm7xgqwyn.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428296]\n??:? long tmpm7xgqwyn.find_First_Missing(long[]) [0x427dc6]\n??:? void tmpm7xgqwyn.__unittest_L29_C1() [0x427e81]\n??:? void tmpm7xgqwyn.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; 0..count)\n\t\ttemp[i] = first + i;\n\treturn temp[$-1] - temp[$-1] - array[$-1];\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi1_gysjg.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428205]\n??:? void tmpi1_gysjg.__unittest_L18_C1() [0x427ebc]\n??:? void tmpi1_gysjg.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b152]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b129]\n??:? runModuleUnitTests [0x42c095]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3ncufwf8.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp3ncufwf8.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp3ncufwf8.__unittest_L32_C1() [0x427e51]\n??:? void tmp3ncufwf8.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp74cbhbh1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp74cbhbh1.find_First_Missing(long[]) [0x427d92]\n??:? void tmp74cbhbh1.__unittest_L32_C1() [0x427e55]\n??:? void tmp74cbhbh1.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = (start + end) / 2;\n\twhile (start < end) \n\t{\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tend = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\tmid = (start + end) / 2;\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\twhile (left <= right) {\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid + 1) {\n\t\t\tleft = mid + 1;\n\t\t} else if (array[mid] > mid + 1) {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpersbenq0.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpersbenq0.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpersbenq0.__unittest_L32_C1() [0x427e51]\n??:? void tmpersbenq0.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = left + (right - left) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsez3ltpz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpsez3ltpz.find_First_Missing(long[]) [0x427d92]\n??:? void tmpsez3ltpz.__unittest_L32_C1() [0x427e55]\n??:? void tmpsez3ltpz.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsjtmrhg6.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpsjtmrhg6.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpsjtmrhg6.__unittest_L32_C1() [0x427e51]\n??:? void tmpsjtmrhg6.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tforeach(i; count)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min;\n\t\t}\n\t\tmin++;\n\t}\n\treturn max+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpus2nheym.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428296]\n??:? long tmpus2nheym.find_First_Missing(long[]) [0x427dc6]\n??:? void tmpus2nheym.__unittest_L28_C1() [0x427e81]\n??:? void tmpus2nheym.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\twhile (low != high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(left <= right)\n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\t\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong length = last - first;\n\tlong[] new_array = new long[length];\n\tforeach(i; 0 .. length)\n\t{\n\t\tnew_array[i] = first + i;\n\t}\n\tforeach(i; 0 .. length)\n\t{\n\t\tif(new_array[i] != array[i])\n\t\t{\n\t\t\treturn new_array[i];\n\t\t}\n\t}\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb_1hvfsq.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42823d]\n??:? void tmpb_1hvfsq.__unittest_L27_C1() [0x427fa6]\n??:? void tmpb_1hvfsq.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430415]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b161]\n??:? runModuleUnitTests [0x42c0cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428700]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9xdv3ffz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp9xdv3ffz.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp9xdv3ffz.__unittest_L32_C1() [0x427e51]\n??:? void tmp9xdv3ffz.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (array.length == 1)\n\t\treturn 2;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile (first < last) \n\t{\n\t\tif (array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse if (array[mid] > mid)\n\t\t\tlast = mid;\n\t\telse\n\t\t\treturn mid;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpowxtsa2o.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpowxtsa2o.__unittest_L35_C1() [0x427ea0]\n??:? void tmpowxtsa2o.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] array2 = array.dup;\n\tarray2.sort;\n\tforeach(long i; array2)\n\t{\n\t\tif(i != array2[0])\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarray2 = array2[1..$];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "/tmp/tmpao6mlglh.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpao6mlglh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[array.length - 1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == array.length)\n\t\treturn last + 1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first <= last)\n\t{\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse if(array[mid] > mid)\n\t\t\tlast = mid - 1;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2sbw6i5n.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp2sbw6i5n.__unittest_L33_C1() [0x427e9c]\n??:? void tmp2sbw6i5n.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjk53_ka9.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpjk53_ka9.find_First_Missing(long[]) [0x427d96]\n??:? void tmpjk53_ka9.__unittest_L28_C1() [0x427ecc]\n??:? void tmpjk53_ka9.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9xdv3ffz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp9xdv3ffz.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp9xdv3ffz.__unittest_L32_C1() [0x427e51]\n??:? void tmp9xdv3ffz.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < range; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphtdn9dkq.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428286]\n??:? long tmphtdn9dkq.find_First_Missing(long[]) [0x427dbc]\n??:? void tmphtdn9dkq.__unittest_L27_C1() [0x427e75]\n??:? void tmphtdn9dkq.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa3cwhqde.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpa3cwhqde.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpa3cwhqde.__unittest_L32_C1() [0x427e51]\n??:? void tmpa3cwhqde.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 2;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwrg5ubay.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpwrg5ubay.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpwrg5ubay.__unittest_L36_C1() [0x427e69]\n??:? void tmpwrg5ubay.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile(i < array.length)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7r7tzjnw.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmp7r7tzjnw.__unittest_L34_C1() [0x427e40]\n??:? void tmp7r7tzjnw.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first;\n\tlong[] newArray = new long[count];\n\tforeach(i; 0 .. count)\n\t{\n\t\tnewArray[i] = first + i;\n\t}\n\tforeach(i; 0 .. count)\n\t{\n\t\tif(newArray[i] != array[i])\n\t\t{\n\t\t\treturn newArray[i];\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0vcxsrdp.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428235]\n??:? void tmp0vcxsrdp.__unittest_L27_C1() [0x427eec]\n??:? void tmp0vcxsrdp.__modtest() [0x427fb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b182]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43040d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430399]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b159]\n??:? runModuleUnitTests [0x42c0c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8muhsgb3.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp8muhsgb3.__unittest_L28_C1() [0x427df4]\n??:? void tmp8muhsgb3.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1j7rajjn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp1j7rajjn.__unittest_L22_C1() [0x427dd0]\n??:? void tmp1j7rajjn.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] array_copy = array.dup;\n\tarray_copy.sort;\n\tforeach(long i; array_copy)\n\t{\n\t\tif(i != array_copy[$-1] + 1)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn array_copy[$-1] + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "/tmp/tmp9oam9b8c.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oam9b8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}