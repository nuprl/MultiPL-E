{
  "name": "mbpp_8_square_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t\tresult ~= n*n;\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tresult ~= n*n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tresult[i] = nums[i] * nums[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref num)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7h5e0m5f.d(11): Error: no identifier for declarator `num`\n/tmp/tmp7h5e0m5f.d(11): Error: found `)` when expecting `;`\n/tmp/tmp7h5e0m5f.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h5e0m5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(n; nums)\n\t{\n\t\tsquares ~= n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(n; nums)\n\t{\n\t\tsquares ~= n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach (num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(n; nums)\n\t{\n\t\tsquares ~= n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tresult ~= n*n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i,n; nums)\n\t{\n\t\tsquares[i] = n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums) \n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tresult[i] = item * item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tsquares ~= nums[i] * nums[i];\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\treturn nums.map!(a => a * a);\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "/tmp/tmp32eflsxd.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32eflsxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref num)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7h5e0m5f.d(11): Error: no identifier for declarator `num`\n/tmp/tmp7h5e0m5f.d(11): Error: found `)` when expecting `;`\n/tmp/tmp7h5e0m5f.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h5e0m5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(n; nums)\n\t{\n\t\tsquares ~= n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tsquares ~= nums[i] * nums[i];\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i,e; nums)\n\t{\n\t\tresult[i] = e*e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t\tsquares[i] = nums[i] * nums[i];\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref nums_elem; nums)\n\t{\n\t\tsquares[i] = nums_elem * nums_elem;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t\tresult ~= n * n;\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\treturn nums.map!(a => a*a);\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "/tmp/tmpd6nhecvq.d(10): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6nhecvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(n; nums)\n\t{\n\t\tresult ~= n*n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = e * e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num*num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = e * e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) {\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums) \n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(n; nums)\n\t{\n\t\tsquares ~= n*n;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tsquares[i] = e * e;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach (num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) {\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach (num; nums) \n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref num)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp7h5e0m5f.d(11): Error: no identifier for declarator `num`\n/tmp/tmp7h5e0m5f.d(11): Error: found `)` when expecting `;`\n/tmp/tmp7h5e0m5f.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h5e0m5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num*num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, ref num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tsquares[i] = num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find squares of individual elements in a list.\n\t\n*/\nlong[] square_nums(long[] nums) \n{\n\tlong[] squares;\n\tforeach(num; nums)\n\t{\n\t\tsquares ~= num * num;\n\t}\n\treturn squares;\n}\nunittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}