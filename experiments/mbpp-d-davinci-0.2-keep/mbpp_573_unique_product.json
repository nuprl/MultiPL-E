{
  "name": "mbpp_573_unique_product",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to calculate the product of the unique numbers in a given list.\n\t\n*/\nlong unique_product(long[] list_data) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = unique_product;\n\n    assert(candidate([10L, 20L, 30L, 40L, 20L, 50L, 60L, 40L]) == 720000000L);\n    assert(candidate([1L, 2L, 3L, 1L]) == 6L);\n    assert(candidate([7L, 8L, 9L, 0L, 1L, 1L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(product % i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_data = list_data.dup;\n\tunique_data.sort();\n\tunique_data.unique();\n\tforeach(num; unique_data)\n\t{\n\t\tproduct *= num;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(product % i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(product % i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(list_data.count(i) == 1)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tlong[] unique_list = new long[];\n\tforeach(long num; list_data)\n\t{\n\t\tif(unique_list.length == 0)\n\t\t{\n\t\t\tunique_list ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool found = false;\n\t\t\tforeach(long unique_num; unique_list)\n\t\t\t{\n\t\t\t\tif(unique_num == num)\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!found)\n\t\t\t{\n\t\t\t\tunique_list ~= num;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(long unique_num; unique_list)\n\t{\n\t\tresult *= unique_num;\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(product % i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tforeach(i; list_data) \n\t{\n\t\tif(list_data.count(i) == 1) \n\t\t{\n\t\t\tresult *= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(item; list_data)\n\t{\n\t\tif(item != 0)\n\t\t{\n\t\t\tproduct *= item;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_data = list_data.dup;\n\tunique_data.sort;\n\tunique_data.unique;\n\tforeach(long i; unique_data)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long num; list_data)\n\t{\n\t\tproduct *= num;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(d; list_data)\n\t{\n\t\tif(product % d != 0)\n\t\t{\n\t\t\tproduct *= d;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong result = 1;\n\tlong[] unique_list = new long[];\n\tforeach(i; list_data)\n\t{\n\t\tif(!unique_list.canFind(i))\n\t\t{\n\t\t\tunique_list ~= i;\n\t\t}\n\t}\n\tforeach(i; unique_list)\n\t{\n\t\tresult *= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tif(list_data.count(i) == 1)\n\t\t{\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = new long[list_data.length];\n\tint count = 0;\n\tforeach(long num; list_data)\n\t{\n\t\tif(count == 0)\n\t\t{\n\t\t\tunique_list[count] = num;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool is_unique = true;\n\t\t\tforeach(long unique_num; unique_list)\n\t\t\t{\n\t\t\t\tif(num == unique_num)\n\t\t\t\t{\n\t\t\t\t\tis_unique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_unique)\n\t\t\t{\n\t\t\t\tunique_list[count] = num;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(long unique_num; unique_list)\n\t{\n\t\tproduct *= unique_num;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tlong[] unique_list = list_data.dup;\n\tunique_list.sort;\n\tunique_list.unique;\n\tforeach(long i; unique_list)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(long i; list_data)\n\t{\n\t\tproduct *= i;\n\t}\n\treturn product;\n}"
  ]
}