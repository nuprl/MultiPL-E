{
  "name": "mbpp_304_find_Element",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find element at a given index after number of rotations.\n\t\n*/\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = find_Element;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong[] temp_arr = new long[end - start + 1];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\ttemp_arr[k - start] = new_arr[k];\n\t\t\t}\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = temp_arr[(k - start + 1) % temp_arr.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end-start+1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i-start] = arr[i];\n\t\t}\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i-start+rotations)%temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto n = arr.length;\n\tauto m = ranges.length;\n\t\n\tlong[] new_arr = new long[n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tforeach(i; 0 .. m)\n\t{\n\t\tauto range = ranges[i];\n\t\t\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tfor(auto j = start; j <= end; j++)\n\t\t{\n\t\t\tnew_arr[j] = arr[end - (j - start)];\n\t\t}\n\t}\n\t\n\treturn new_arr[(index + rotations) % n];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\trotations = (rotations - r[1]) % arr.length;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\ttemp[j - start] = new_arr[j];\n\t\t}\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[j] = temp[(j - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end-start+1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i-start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i-start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong[] temp = new long[ranges[i][1] - ranges[i][0] + 1];\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[j] = new_arr[ranges[i][0] + j];\n\t\t}\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[ranges[i][0] + j] = temp[(temp.length - 1) - j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong rotations_per_range = rotations % (end - start + 1);\n\t\tforeach(j; start..end)\n\t\t{\n\t\t\tlong new_index = j + rotations_per_range;\n\t\t\tif(new_index > end)\n\t\t\t{\n\t\t\t\tnew_index -= (end - start + 1);\n\t\t\t}\n\t\t\tnew_arr[new_index] = arr[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tauto rotations_ = rotations % len;\n\tauto index_ = (index + rotations_) % len;\n\tauto ranges_ = ranges.map!(a => a.map!(b => b % len));\n\t\n\tforeach(r; ranges_)\n\t{\n\t\tif(r[0] <= index_ && index_ <= r[1])\n\t\t{\n\t\t\tindex_ = (index_ - r[0] + 1) % (r[1] - r[0] + 1) + r[0];\n\t\t}\n\t}\n\treturn arr[index_];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp2 = new long[end - start + 1];\n\t\tforeach(j; 0 .. temp2.length)\n\t\t{\n\t\t\ttemp2[j] = temp[start + j];\n\t\t}\n\t\tforeach(j; 0 .. temp2.length)\n\t\t{\n\t\t\ttemp[start + j] = temp2[(j + rotations) % temp2.length];\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tforeach(k; ranges[j][0]..ranges[j][1])\n\t\t\t{\n\t\t\t\tnew_arr[k] = arr[(k + 1) % arr.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong rot = rotations % len;\n\t\tlong[] temp = new long[len];\n\t\tforeach(j, elem; arr[start..end])\n\t\t{\n\t\t\ttemp[(j + rot) % len] = elem;\n\t\t}\n\t\tforeach(j, elem; temp)\n\t\t{\n\t\t\tnew_arr[start + j] = elem;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong[] temp = arr[r[0]..r[1]+1];\n\t\tnew_arr[r[0]+1..r[1]+1] = temp[0..$-1];\n\t\tnew_arr[r[0]..r[0]] = temp[$-1..$];\n\t}\n\treturn new_arr[(index+rotations)%arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(long i; start .. end + 1)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tforeach(long i; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong new_index = (index - start + len) % len + start;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\treturn new_arr[(index + rotations) % new_arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tlong[] temp2 = temp[0 .. temp.length - rotations] ~ temp[temp.length - rotations .. temp.length];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp2[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tlong i = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\ttemp[i] = arr[j];\n\t\t\ti++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\ti = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\tnew_arr[j] = temp[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % range[1];\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tlong[] temp2 = temp[rotations..$];\n\t\tforeach(i, v; temp2)\n\t\t{\n\t\t\tnew_arr[start + i] = v;\n\t\t}\n\t\ttemp2 = temp[0..rotations];\n\t\tforeach(i, v; temp2)\n\t\t{\n\t\t\tnew_arr[start + i] = v;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[1] - range[0]) % arr.length;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong[] temp = new long[ranges[i][1] - ranges[i][0] + 1];\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[j] = new_arr[j + ranges[i][0]];\n\t\t}\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[j + ranges[i][0]] = temp[(j + 1) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tlong[] temp = new long[ranges[i][1] - ranges[i][0] + 1];\n\t\tforeach(j; ranges[i][0]..ranges[i][1]+1)\n\t\t{\n\t\t\ttemp[j - ranges[i][0]] = new_arr[j];\n\t\t}\n\t\tforeach(j; ranges[i][0]..ranges[i][1]+1)\n\t\t{\n\t\t\tnew_arr[j] = temp[(j - ranges[i][0] + 1) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto n = arr.length;\n\tauto m = ranges.length;\n\t\n\tauto new_index = index;\n\t\n\tforeach(r; ranges)\n\t{\n\t\tif(r[0] <= new_index && new_index <= r[1])\n\t\t{\n\t\t\tnew_index = r[1] - (new_index - r[0]);\n\t\t}\n\t}\n\t\n\tnew_index = (new_index + rotations) % n;\n\t\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, elem; range)\n\t\t{\n\t\t\tnew_arr[j] = arr[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor(long i = 0; i < ranges.length; i++)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong count = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\ttemp[count] = arr[j];\n\t\t\tcount++;\n\t\t}\n\t\tcount = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\tarr[j] = temp[count];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < ranges.length; i++) \n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong count = 0;\n\t\tfor (long j = start; j <= end; j++) \n\t\t{\n\t\t\ttemp[count] = arr[j];\n\t\t\tcount++;\n\t\t}\n\t\tcount = 0;\n\t\tfor (long j = start; j <= end; j++) \n\t\t{\n\t\t\tarr[j] = temp[count];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong rot = rotations % len;\n\t\tlong[] temp = arr[start..end];\n\t\ttemp = temp[rot..$] ~ temp[0..rot];\n\t\tnew_arr[start..end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\tarr = arr[rotations .. $] ~ arr[0 .. rotations];\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + start) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end-start+1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i-start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i-start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong len = end - start + 1;\n\t\tlong[] temp = new long[len];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\tlong[] temp2 = new long[len];\n\t\tj = 0;\n\t\tfor(long i = end; i >= start; i--)\n\t\t{\n\t\t\ttemp2[j] = temp[i];\n\t\t\tj++;\n\t\t}\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\tlong[] temp = new long[arr.length];\n\tlong j = 0;\n\tfor(long i = arr.length - 1; i >= 0; i--)\n\t{\n\t\ttemp[j] = new_arr[i];\n\t\tj++;\n\t}\n\tlong[] temp2 = new long[arr.length];\n\tj = 0;\n\tfor(long i = arr.length - 1; i >= 0; i--)\n\t{\n\t\ttemp2[j] = temp[i];\n\t\tj++;\n\t}\n\tj = 0;\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tnew_arr[i] = temp2[j];\n\t\tj++;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, j; zip(arr, ranges))\n\t{\n\t\tnew_arr[j[0]] = i;\n\t\tnew_arr[j[1]] = i;\n\t}\n\t\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] rotated_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\trotated_arr[range[1]] = arr[range[0]];\n\t}\n\treturn rotated_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tauto range_len = ranges.length;\n\tlong[] new_arr = new long[len];\n\t\n\tforeach(i; 0..len)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tforeach(i; 0..range_len)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\twhile(start < end)\n\t\t{\n\t\t\tauto temp = new_arr[start];\n\t\t\tnew_arr[start] = new_arr[end];\n\t\t\tnew_arr[end] = temp;\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\t}\n\t\n\tauto new_index = (index + rotations) % len;\n\treturn new_arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++)\n\t\tnew_arr[i] = arr[i];\n\tfor (long i = 0; i < rotations; i++) \n\t{\n\t\tfor (long j = 0; j < ranges.length; j++) \n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor (long k = start; k < end; k++) \n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tforeach(range; ranges)\n\t{\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\tauto diff = end - start + 1;\n\t\trotations %= diff;\n\t\tif(rotations == 0)\n\t\t\tcontinue;\n\t\tauto temp = arr[start..end+1];\n\t\tauto temp1 = temp[0..rotations];\n\t\tauto temp2 = temp[rotations..$];\n\t\tarr[start..end+1] = temp2 ~ temp1;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong new_index = i + rotations;\n\t\tif(new_index >= arr.length)\n\t\t\tnew_index = new_index - arr.length;\n\t\tnew_arr[new_index] = arr[i];\n\t}\n\t\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = new_arr[start];\n\t\tnew_arr[start] = new_arr[end];\n\t\tnew_arr[end] = temp;\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(i; 0..rotations)\n\t{\n\t\tauto range = ranges[i];\n\t\tif(range[0] <= index && index <= range[1])\n\t\t{\n\t\t\tif(index == range[0])\n\t\t\t{\n\t\t\t\tindex = range[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex -= 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start, j = 0; i <= end; i++, j++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start, j = 0; i <= end; i++, j++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tlong[] temp2 = temp[0 .. temp.length - rotations] ~ temp[temp.length - rotations .. temp.length];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp2[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_arr[range[0]] = arr[range[1]];\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[start];\n\t\tfor(long j = start; j < end; j++)\n\t\t{\n\t\t\tarr[j] = arr[j + 1];\n\t\t}\n\t\tarr[end] = temp;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tlong[] temp2 = new long[temp.length];\n\t\tfor(long i = 0; i < temp.length; i++)\n\t\t{\n\t\t\ttemp2[(i + rotations) % temp.length] = temp[i];\n\t\t}\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp2[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong offset = index - start;\n\tlong newIndex = (start + offset) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong count = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[end - count];\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong[] r = range;\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tlong[] temp = new_arr[1..$];\n\t\tnew_arr[1..$] = temp;\n\t\tnew_arr[0] = temp[$-1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1..$] = temp[0..1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong[] range = r;\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i + 1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges[i].length)\n\t\t{\n\t\t\ttemp2[j] = temp[ranges[i][j]];\n\t\t}\n\t\tforeach(j; 0 .. ranges[i].length)\n\t\t{\n\t\t\ttemp[ranges[i][j]] = temp2[ranges[i][j]];\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tfor(long i = r[0]; i <= r[1]; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i];\n\t\t}\n\t\t\n\t\tlong[] temp = new long[r[1] - r[0] + 1];\n\t\tfor(long i = r[0]; i <= r[1]; i++)\n\t\t{\n\t\t\ttemp[i - r[0]] = new_arr[i];\n\t\t}\n\t\t\n\t\tfor(long i = r[0]; i <= r[1]; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - r[0] + rotations) % temp.length];\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end-start+1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i-start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i-start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\ttemp[] = arr[start..end];\n\t\tnew_arr[start..end] = temp[rotations..$];\n\t\tnew_arr[end+1..end+rotations] = temp[0..rotations-1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong len = arr.length;\n\tlong[] new_arr = new long[len];\n\tforeach(i; 0 .. len)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong[] temp = new long[len];\n\t\tforeach(j; 0 .. len)\n\t\t{\n\t\t\ttemp[j] = new_arr[j];\n\t\t}\n\t\tforeach(j; 0 .. len)\n\t\t{\n\t\t\tnew_arr[j] = temp[ranges[i][1]];\n\t\t\tranges[i][1]--;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, element; range)\n\t\t{\n\t\t\tnew_arr[j] = arr[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\tlong[] temp = new_arr[$-rotations..$];\n\tnew_arr[$-rotations..$] = new_arr[0..$-rotations];\n\tnew_arr[0..$-rotations] = temp;\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_arr[range[1]] = arr[range[0]];\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tauto range_len = ranges.length;\n\t\n\tforeach(i; 0 .. range_len)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(start <= index && index <= end)\n\t\t{\n\t\t\tauto diff = end - start + 1;\n\t\t\tauto rot = rotations % diff;\n\t\t\t\n\t\t\tif(rot == 0)\n\t\t\t\treturn arr[index];\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(index + rot <= end)\n\t\t\t\t\treturn arr[index + rot];\n\t\t\t\telse\n\t\t\t\t\treturn arr[start + (rot - (end - index) - 1)];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (start + index) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..$-1];\n\t\tnew_arr[1..$] = temp;\n\t\tnew_arr[0] = new_arr[$-1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\tif(r[0] <= index && index <= r[1])\n\t\t{\n\t\t\tindex = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\ttemp[j - start] = new_arr[j];\n\t\t}\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[j] = temp[(j - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (start + index) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tfor (long i = 0; i < rotations; i++)\n\t{\n\t\tfor (long j = 0; j < ranges.length; j++)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor (long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\t\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\t\n\t\tlong[] temp2 = new long[length];\n\t\t\n\t\tfor(long i = 0; i < length; i++)\n\t\t{\n\t\t\ttemp2[i] = arr[start + i];\n\t\t}\n\t\t\n\t\ttemp2 = temp2.rotate(rotations);\n\t\t\n\t\tfor(long i = 0; i < length; i++)\n\t\t{\n\t\t\ttemp[start + i] = temp2[i];\n\t\t}\n\t}\n\t\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[0..$-1];\n\t\tnew_arr[end] = temp[$-1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[i] = new_arr[start + i];\n\t\t}\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[start + i] = temp[(i + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong[] temp = new long[len];\n\t\tforeach(j, k; zip(start..end, 0..len))\n\t\t{\n\t\t\ttemp[k] = arr[j];\n\t\t}\n\t\tforeach(j, k; zip(start..end, 0..len))\n\t\t{\n\t\t\tnew_arr[j] = temp[(k + rotations) % len];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong n = arr.length;\n\tlong[] new_arr = new long[n];\n\tforeach(i; 0 .. n)\n\t{\n\t\tlong new_index = (i + rotations) % n;\n\t\tnew_arr[new_index] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = new_arr[start];\n\t\tnew_arr[start] = new_arr[end];\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, elem; range)\n\t\t{\n\t\t\tnew_arr[j] = arr[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges[i].length)\n\t\t{\n\t\t\tlong temp = new_arr[ranges[i][j]];\n\t\t\tnew_arr[ranges[i][j]] = new_arr[ranges[i][j] + 1];\n\t\t\tnew_arr[ranges[i][j] + 1] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\trotate(temp);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp[rotations..$];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < ranges.length; i++) \n\t{\n\t\tfor (long j = ranges[i][0]; j <= ranges[i][1]; j++) \n\t\t{\n\t\t\ttemp[j] = arr[j];\n\t\t\tarr[j] = arr[ranges[i][1] - j + ranges[i][0]];\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, elem; range)\n\t\t{\n\t\t\tnew_arr[i] = arr[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[end-start..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] range = new long[2];\n\tlong[] range_index = new long[2];\n\tlong[] range_index_new = new long[2];\n\tlong[] range_index_new_temp = new long[2];\n\tlong[] range_index_new_temp_2 = new long[2];\n\tlong[] range_index_new_temp_3 = new long[2];\n\tlong[] range_index_new_temp_4 = new long[2];\n\tlong[] range_index_new_temp_5 = new long[2];\n\tlong[] range_index_new_temp_6 = new long[2];\n\tlong[] range_index_new_temp_7 = new long[2];\n\tlong[] range_index_new_temp_8 = new long[2];\n\tlong[] range_index_new_temp_9 = new long[2];\n\tlong[] range_index_new_temp_10 = new long[2];\n\tlong[] range_index_new_temp_11 = new long[2];\n\tlong[] range_index_new_temp_12 = new long[2];\n\tlong[] range_index_new_temp_13 = new long[2];\n\tlong[] range_index_new_temp_14 = new long[2];\n\tlong[] range_index_new_temp_15 = new long[2];\n\tlong[] range_index_new_temp_16 = new long[2];\n\tlong[] range_index_new_temp_17 = new long[2];\n\tlong[] range_index_new_temp_18 = new long[2];\n\tlong[] range_index_new_temp_19 = new long[2];\n\tlong[] range_index_new_temp_20 = new long[2];\n\tlong[] range_index_new_temp_21 = new long[2];\n\tlong[] range_index_new_temp_22 = new long[2];\n\tlong[] range_index_new_temp_23 = new long[2];\n\tlong[] range_index_new_temp_24 = new long[2];\n\t",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = arr[start..end];\n\t\tlong[] new_sub_arr = sub_arr[1..$] ~ sub_arr[0..0];\n\t\tnew_arr[start..end] = new_sub_arr;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, val; arr[range[0]..range[1]])\n\t\t{\n\t\t\tnew_arr[(range[0] + j) % arr.length] = val;\n\t\t}\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[i] = arr[start + i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[start + i] = temp[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong mid = (start + end) / 2;\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[j] = new_arr[start + j];\n\t\t}\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[start + j] = temp[(j + mid - start) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp_start = temp[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\ttemp[k] = temp[k + 1];\n\t\t\t}\n\t\t\ttemp[end] = temp_start;\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\t// Write your code here\n\tint n = arr.length;\n\tint m = ranges.length;\n\tint[] count = new int[n];\n\tfor(int i = 0; i < m; i++)\n\t{\n\t\tcount[ranges[i][0]]++;\n\t\tif(ranges[i][1] < n - 1)\n\t\t\tcount[ranges[i][1] + 1]--;\n\t}\n\tfor(int i = 1; i < n; i++)\n\t\tcount[i] += count[i - 1];\n\tint[] temp = new int[n];\n\tfor(int i = 0; i < n; i++)\n\t\ttemp[i] = arr[i];\n\tfor(int i = 0; i < n; i++)\n\t\tarr[(i + count[i]) % n] = temp[i];\n\treturn arr[(int)((index + rotations) % n)];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, j; zip(arr, new_arr))\n\t{\n\t\tj = i;\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tforeach(j; ranges[i][0] .. ranges[i][1] + 1)\n\t\t{\n\t\t\tnew_arr[j] = arr[ranges[i][1] - j + ranges[i][0]];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(i; 0..rotations)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(index >= start && index <= end)\n\t\t{\n\t\t\tif(index == start)\n\t\t\t{\n\t\t\t\tindex = end;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tlong i = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\ttemp[i] = arr[j];\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlong temp_rotations = rotations % length;\n\t\tlong[] temp_arr = new long[length];\n\t\tfor(long j = 0; j < length; j++)\n\t\t{\n\t\t\ttemp_arr[(j + temp_rotations) % length] = temp[j];\n\t\t}\n\t\t\n\t\ti = 0;\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\tnew_arr[j] = temp_arr[i];\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tforeach(long j; 0..arr.length)\n\t\t{\n\t\t\tnew_arr[j] = arr[(j+1)%arr.length];\n\t\t}\n\t\tarr = new_arr;\n\t\t\n\t\tforeach(long j; 0..ranges.length)\n\t\t{\n\t\t\tnew_ranges[j][0] = ranges[j][0] + 1;\n\t\t\tnew_ranges[j][1] = ranges[j][1] + 1;\n\t\t}\n\t\tranges = new_ranges;\n\t}\n\t\n\tforeach(long i; 0..ranges.length)\n\t{\n\t\tif(ranges[i][0] <= index && ranges[i][1] >= index)\n\t\t{\n\t\t\treturn arr[index];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges) \n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start .. end + 1];\n\t\tnew_arr[start .. end + 1] = temp[$ - rotations .. $];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tauto range = ranges[i];\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tif(index == range[0])\n\t\t\t{\n\t\t\t\tindex = range[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex -= 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong[] sub_arr = new long[len];\n\t\tforeach(j; 0 .. len)\n\t\t{\n\t\t\tsub_arr[j] = new_arr[start + j];\n\t\t}\n\t\tforeach(j; 0 .. len)\n\t\t{\n\t\t\tlong new_index = (j + rotations) % len;\n\t\t\tnew_arr[start + new_index] = sub_arr[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[rotations..$];\n\t\tnew_arr[start + temp.length - rotations..start + temp.length] = temp[0..rotations];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong i = 0;\n\t\tforeach(long elem; arr[start..end])\n\t\t{\n\t\t\ttemp[i] = elem;\n\t\t\ti++;\n\t\t}\n\t\tlong j = 0;\n\t\tforeach(long elem; temp[rotations..temp.length])\n\t\t{\n\t\t\tnew_arr[start + j] = elem;\n\t\t\tj++;\n\t\t}\n\t\tforeach(long elem; temp[0..rotations])\n\t\t{\n\t\t\tnew_arr[start + j] = elem;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = (index + rotations) % arr.length;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\tindex = (index + range[0]) % arr.length;\n\t\t\n\t\tlong range_length = range[1] - range[0] + 1;\n\t\trotations = (rotations + range_length) % arr.length;\n\t\tindex = (index + range_length) % arr.length;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = rotate(temp, rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = arr[start..end];\n\t\tforeach(i, e; sub_arr)\n\t\t{\n\t\t\tnew_arr[start + i] = e;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong[] temp_arr = new long[range[1] - range[0] + 1];\n\t\t\tforeach(k; range[0]..range[1] + 1)\n\t\t\t{\n\t\t\t\ttemp_arr[k - range[0]] = new_arr[k];\n\t\t\t}\n\t\t\tforeach(k; range[0]..range[1] + 1)\n\t\t\t{\n\t\t\t\tnew_arr[k] = temp_arr[(k - range[0] + 1) % temp_arr.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\tarr = arr[rotations..$] ~ arr[0..rotations];\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; start .. end + 1)\n\t\t{\n\t\t\ttemp[i - start] = new_arr[i];\n\t\t}\n\t\tforeach(i; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong left = range[0];\n\tlong right = range[1];\n\tlong length = right - left + 1;\n\tlong newIndex = (index + length) % arr.length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < ranges.length; i++) {\n\t\tfor (long j = ranges[i][0]; j <= ranges[i][1]; j++) {\n\t\t\ttemp[j] = arr[j];\n\t\t}\n\t\tfor (long j = ranges[i][0]; j <= ranges[i][1]; j++) {\n\t\t\tarr[j] = temp[(j + rotations) % arr.length];\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i+1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong[] temp = new_arr[start .. end + 1];\n\t\t\tnew_arr[start .. end + 1] = temp[temp.length - 1 .. 0];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations % ranges.length];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\tlong temp = arr[r[1]];\n\t\tarr[r[1]] = arr[r[0]];\n\t\tarr[r[0]] = temp;\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[(index + rotations) % new_arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = arr[start..end];\n\t\ttemp[start..end] = sub_arr[$-1..0];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\ttemp = temp[$-1..0];\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tlong[] temp_arr = new long[arr.length];\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\ttemp_arr[j] = new_arr[j];\n\t\t}\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tnew_arr[j] = temp_arr[ranges[i][j]];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tnew_arr = new_arr[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor (long i = 0; i < ranges.length; i++)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong diff = end - start;\n\t\tlong rot = rotations % (diff + 1);\n\t\tif (rot == 0)\n\t\t\tcontinue;\n\t\tlong j = 0;\n\t\tfor (long k = start; k <= end; k++)\n\t\t{\n\t\t\ttemp[k] = arr[start + ((j + rot) % (diff + 1))];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong new_index = (i + rotations) % arr.length;\n\t\tnew_arr[new_index] = arr[i];\n\t}\n\t\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = new_arr[start .. end];\n\t\tsub_arr = sub_arr.reverse();\n\t\tnew_arr[start .. end] = sub_arr;\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[temp_arr.length-1..0];\n\t}\n\t\n\tlong[] temp_arr = new_arr[0..ranges[0][0]];\n\tnew_arr[0..ranges[0][0]] = temp_arr[temp_arr.length-1..0];\n\t\n\tlong[] temp_arr2 = new_arr[ranges[0][1]+1..new_arr.length];\n\tnew_arr[ranges[0][1]+1..new_arr.length] = temp_arr2[temp_arr2.length-1..0];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp2 = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp2[i - start] = arr[i];\n\t\t}\n\t\ttemp2 = temp2[rotations..$] ~ temp2[0..rotations];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i] = temp2[i - start];\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[j] = new_arr[start + j];\n\t\t}\n\t\tforeach(j; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[start + j] = temp[(j + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\tindex = (index + range[0]) % arr.length;\n\t\t\n\t\tauto temp = arr[0];\n\t\tfor(long i = 0; i < arr.length - 1; i++)\n\t\t{\n\t\t\tarr[i] = arr[i + 1];\n\t\t}\n\t\tarr[arr.length - 1] = temp;\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\tlong[] new_index = new long[index.length];\n\t\n\tforeach(long i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[(i + rotations) % arr.length];\n\t}\n\t\n\tforeach(long i; 0 .. ranges.length)\n\t{\n\t\tnew_ranges[i] = ranges[(i + rotations) % ranges.length];\n\t}\n\t\n\tforeach(long i; 0 .. index.length)\n\t{\n\t\tnew_index[i] = index[(i + rotations) % index.length];\n\t}\n\t\n\treturn new_arr[new_index[new_ranges[0]]];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % range[1];\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\ttemp[range[1]] = arr[range[0]];\n\t}\n\t\n\tforeach(long[] range; ranges)\n\t{\n\t\tarr[range[1]] = temp[range[1]];\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = new_arr[start .. end+1];\n\t\treverse(sub_arr);\n\t\tnew_arr[start .. end+1] = sub_arr;\n\t}\n\t\n\tlong[] final_arr = new_arr[rotations .. arr.length] ~ new_arr[0 .. rotations];\n\treturn final_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong rot = rotations % len;\n\t\t\n\t\tlong[] temp = new long[len];\n\t\t\n\t\tforeach(j; start..end+1)\n\t\t{\n\t\t\ttemp[(j - start + rot) % len] = arr[j];\n\t\t}\n\t\t\n\t\tforeach(j; start..end+1)\n\t\t{\n\t\t\tnew_arr[j] = temp[j - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_index = new long[arr.length];\n\t\n\tforeach(i, range; ranges)\n\t{\n\t\tnew_arr[i] = arr[range[1]];\n\t\tnew_index[i] = range[1];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\tlong[] new_new_arr = new long[arr.length];\n\tlong[] new_new_index = new long[arr.length];\n\t\n\tforeach(i, range; ranges)\n\t{\n\t\tnew_new_arr[i] = new_arr[(i + rotations) % arr.length];\n\t\tnew_new_index[i] = new_index[(i + rotations) % arr.length];\n\t}\n\t\n\tforeach(i, range; ranges)\n\t{\n\t\tif(new_new_index[i] == index)\n\t\t{\n\t\t\treturn new_new_arr[i];\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[temp.length-1..0];\n\t}\n\t\n\tforeach(i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..new_arr.length-1];\n\t\tnew_arr[0..new_arr.length-1] = temp[temp.length-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = (index - range[0] + rotations) % (range[1] - range[0] + 1) + range[0];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[rotations..$];\n\t\tnew_arr[start+rotations..end] = temp_arr[0..rotations];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = arr[start..end+1];\n\t\tlong[] sub_arr_reversed = sub_arr.reverse;\n\t\tnew_arr[start..end+1] = sub_arr_reversed;\n\t}\n\tlong[] new_arr_rotated = new_arr[rotations..$];\n\tnew_arr_rotated ~= new_arr[0..rotations];\n\treturn new_arr_rotated[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tforeach(j, element; range)\n\t\t{\n\t\t\tnew_arr[j] = arr[(j + i) % arr.length];\n\t\t}\n\t\tarr = new_arr;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong n = arr.length;\n\tlong[] new_arr = new long[n];\n\tforeach(i; 0..n)\n\t{\n\t\tlong new_index = i;\n\t\tforeach(r; ranges)\n\t\t{\n\t\t\tif(r[0] <= i && i <= r[1])\n\t\t\t{\n\t\t\t\tnew_index = (i - r[0]) + r[2];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnew_arr[new_index] = arr[i];\n\t}\n\tlong new_index = (index + rotations) % n;\n\treturn new_arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, j; zip(arr, ranges))\n\t{\n\t\tauto [a, b] = tuple(i, j);\n\t\tnew_arr[b[0]] = a;\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_arr[range[1]] = arr[range[0]];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..$-1];\n\t\tnew_arr[1..$] = temp;\n\t\tnew_arr[0] = temp[$-1];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tforeach(rotation; ranges)\n\t{\n\t\tauto [l, r] = rotation;\n\t\trotations = (rotations + r - l + 1) % arr.length;\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\ttemp[i] = new_arr[start + i];\n\t\t}\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\tnew_arr[start + i] = temp[(temp.length - 1 - i) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations -= r[1] - r[0] + 1;\n\t}\n\t\n\trotations %= arr.length;\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong len = arr.length;\n\tlong[] new_arr = new long[len];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tlong[] temp2 = temp[0..rotations];\n\t\ttemp = temp[rotations..$];\n\t\ttemp ~= temp2;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\trotations = (rotations - range[1]) % arr.length;\n\t}\n\treturn arr[(rotations + index) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tfor (long i = 0; i < ranges.length; i++)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong rot = rotations % (end - start + 1);\n\t\tfor (long j = start; j <= end; j++)\n\t\t{\n\t\t\tlong new_index = j - rot;\n\t\t\tif (new_index < start)\n\t\t\t{\n\t\t\t\tnew_index = end - (start - new_index) + 1;\n\t\t\t}\n\t\t\tnew_arr[new_index] = arr[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\t// Write your code here\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tlong[] temp = new_arr[1..$];\n\t\tnew_arr[1..$] = temp[0..$];\n\t\tnew_arr[0] = temp[$-1];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\tif(rotations > 0)\n\t{\n\t\tlong[] temp = new_arr[0..rotations];\n\t\tnew_arr[0..rotations] = new_arr[$-rotations..$];\n\t\tnew_arr[$-rotations..$] = temp;\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong new_index = (index + len) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tauto len = arr.length;\n\tauto range_len = ranges.length;\n\t\n\tforeach(i; 0..range_len)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(start <= index && index <= end)\n\t\t{\n\t\t\tauto diff = end - start + 1;\n\t\t\tauto rotations_per_range = rotations % diff;\n\t\t\t\n\t\t\tif(rotations_per_range > 0)\n\t\t\t{\n\t\t\t\tif(index + rotations_per_range > end)\n\t\t\t\t{\n\t\t\t\t\tindex = start + (index + rotations_per_range - end - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tindex = index + rotations_per_range;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong[] temp = new long[end - start + 1];\n\t\t\tforeach(k; start .. end + 1)\n\t\t\t{\n\t\t\t\ttemp[k - start] = new_arr[k];\n\t\t\t}\n\t\t\tforeach(k; start .. end + 1)\n\t\t\t{\n\t\t\t\tnew_arr[k] = temp[(k - start + 1) % temp.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong len = end - start + 1;\n\t\tlong[] temp = new long[len];\n\t\t\n\t\tforeach(j; 0..len)\n\t\t{\n\t\t\ttemp[j] = arr[start + j];\n\t\t}\n\t\t\n\t\tlong rot = rotations % len;\n\t\tforeach(j; 0..len)\n\t\t{\n\t\t\tlong new_index = (j + rot) % len;\n\t\t\tnew_arr[start + j] = temp[new_index];\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tauto range = ranges[rotations];\n\tauto start = range[0];\n\tauto end = range[1];\n\tauto length = end - start + 1;\n\tauto newIndex = (start + index) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tfor (long i = 0; i < rotations; i++) \n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor (long j = start; j <= end; j++) \n\t\t{\n\t\t\ttemp[j - start] = arr[j];\n\t\t}\n\t\tfor (long j = start; j <= end; j++) \n\t\t{\n\t\t\tarr[j] = temp[(j - start + 1) % temp.length];\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tfor(long j = 0; j < length; j++)\n\t\t{\n\t\t\ttemp[j] = arr[start + j];\n\t\t}\n\t\ttemp = rotate(temp, rotations);\n\t\tfor(long j = 0; j < length; j++)\n\t\t{\n\t\t\tnew_arr[start + j] = temp[j];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tlong i = start;\n\t\tforeach(long num; arr[start .. end + 1])\n\t\t{\n\t\t\ttemp[i - start] = num;\n\t\t\ti++;\n\t\t}\n\t\tnew_arr[start .. end + 1] = temp[0 .. end - start + 1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tauto rotations_ = rotations % len;\n\t\n\tauto new_index = index - rotations_;\n\tif (new_index < 0)\n\t\tnew_index += len;\n\t\n\treturn arr[new_index];\n}"
  ]
}