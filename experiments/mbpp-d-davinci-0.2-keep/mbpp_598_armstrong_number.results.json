{
  "name": "mbpp_598_armstrong_number",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmprjh35w6l.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjh35w6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tlength++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint digits = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\twhile(temp != 0)\n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmp6y34xnjl.d(12): Error: cannot implicitly convert expression `number` of type `long` to `int`\n/tmp/tmp6y34xnjl.d(18): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6y34xnjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\tint remainder;\n\tint digits = 0;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\twhile (temp != 0) \n\t{\n\t\tremainder = temp % 10;\n\t\tsum += pow(remainder, digits);\n\t\ttemp /= 10;\n\t}\n\treturn (number == sum);\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpbi0m99_7.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\n/tmp/tmpbi0m99_7.d(19): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbi0m99_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = to!string(number);\n\tauto sum = 0;\n\tforeach(digit; digits)\n\t{\n\t\tsum += pow(to!int(digit), digits.length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpftiu7q9h.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftiu7q9h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpfv5k0usf.d(12): Error: cannot implicitly convert expression `number` of type `long` to `int`\n/tmp/tmpfv5k0usf.d(18): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfv5k0usf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint number_of_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tnumber_of_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, number_of_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmps1xp1mne.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1xp1mne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (number > 0) \n\t{\n\t\tsum += pow(number % 10, 3);\n\t\tnumber /= 10;\n\t}\n\treturn sum == temp;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\t++length;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tlength++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\ttemp /= 10;\n\t\t++digits;\n\t}\n\t\n\tlong sum = 0;\n\ttemp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tlong digit = temp % 10;\n\t\tsum += pow(digit, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpjca1svo4.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjca1svo4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3ojc5yyc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ojc5yyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\t++num_digits;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmprjh35w6l.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjh35w6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmprjh35w6l.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjh35w6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpbhp_l8cw.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhp_l8cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpa6k2hko1.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6k2hko1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tlength++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpq8q09mow.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8q09mow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; to!string(number))\n\t{\n\t\tsum += pow(to!int(digit), length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmppcq1iqic.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmppcq1iqic.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcq1iqic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3cu_pv9g.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cu_pv9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.toString().length;\n\treturn number == number.toString().split(\"\").map!(a => pow(a.toInt, length)).sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpuptgztdz.d(10): Error: no property `toString` for type `long`\n/tmp/tmpuptgztdz.d(11): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuptgztdz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp)\n\t{\n\t\ttemp /= 10;\n\t\t++digits;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint len = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; number.digits)\n\t{\n\t\tsum += pow(digit, len);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp5v2qm_yx.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmp5v2qm_yx.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v2qm_yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp_i9zfbfa.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\n/tmp/tmp_i9zfbfa.d(18): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_i9zfbfa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint digits = 0;\n\tint temp = number;\n\twhile (temp > 0) \n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpmkgne51c.d(12): Error: cannot implicitly convert expression `number` of type `long` to `int`\n/tmp/tmpmkgne51c.d(18): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkgne51c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; number.digits)\n\t{\n\t\tsum += pow(digit, length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpqvyzjpzs.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpqvyzjpzs.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvyzjpzs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmprjh35w6l.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjh35w6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tnum_digits++;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tlong digit = temp % 10;\n\t\tsum += pow(digit, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpxok2lwry.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxok2lwry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpr4eo5w1b.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4eo5w1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = to!string(number);\n\tauto sum = 0;\n\tforeach(i, digit; digits)\n\t{\n\t\tsum += pow(to!int(digit), digits.length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp8asl29bd.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8asl29bd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tnum_digits++;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\t++length;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpa6k2hko1.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6k2hko1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpoafatsx4.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoafatsx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tint sum = 0;\n\tforeach(digit; number)\n\t{\n\t\tsum += pow(digit, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpb4b8i7ce.d(10): Error: no property `length` for type `long`\n/tmp/tmpb4b8i7ce.d(12): Error: invalid `foreach` aggregate `number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4b8i7ce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpoafatsx4.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoafatsx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\t// get the number of digits in the number\n\tint digits = (int)log10(number) + 1;\n\t\n\t// get the sum of the digits\n\tlong sum = 0;\n\tforeach (digit; 0 .. digits)\n\t{\n\t\tsum += pow(number % 10, digits);\n\t\tnumber /= 10;\n\t}\n\t\n\t// check if the sum is equal to the number\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpnqupr_c9.d(11): Error: C style cast illegal, use `cast(int)log10(number)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqupr_c9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpoafatsx4.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoafatsx4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint number_of_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnumber_of_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, number_of_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpjca1svo4.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjca1svo4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tint sum = 0;\n\tforeach(digit; number.digits) \n\t{\n\t\tsum += pow(digit, length);\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp18x4kdhi.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmp18x4kdhi.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18x4kdhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong temp = number;\n\tlong sum = 0;\n\t\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpmjceik4z.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjceik4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpbhp_l8cw.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhp_l8cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = to!(string)(number);\n\tauto sum = 0;\n\tforeach(digit; digits)\n\t{\n\t\tsum += pow(to!int(digit), digits.length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmp54zufn2k.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54zufn2k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpu0oosvz0.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0oosvz0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\t// convert number to string\n\tstring str = to!string(number);\n\t\n\t// get the length of the string\n\tint len = str.length;\n\t\n\t// get the sum of the power of each digit\n\tlong sum = 0;\n\tforeach(char c; str) \n\t{\n\t\tint digit = c.to!int - '0'.to!int;\n\t\tsum += pow(digit, len);\n\t}\n\t\n\t// check if the sum is equal to the number\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpnjoq_rl5.d(11): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpnjoq_rl5.d(14): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpnjoq_rl5.d(20): Error: no property `to` for type `char`\n/tmp/tmpnjoq_rl5.d(20): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjoq_rl5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "/tmp/tmpzs41fbux.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzs41fbux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}