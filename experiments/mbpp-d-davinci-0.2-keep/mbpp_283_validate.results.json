{
  "name": "mbpp_283_validate",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach(i; 0 .. 10)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tdigits[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach (i; 0 .. 10)\n\t{\n\t\tif (digits[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\t// Write your code here\n\tint[] arr = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tarr[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(arr[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tauto s = to!string(n);\n\tint[] freq = new int[10];\n\tforeach(c; s)\n\t{\n\t\tfreq[c - '0']++;\n\t}\n\tforeach(i; 0 .. 10)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "/tmp/tmpyx9m2umt.d(9): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyx9m2umt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\tforeach (i; 0 .. 10) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (++freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (digits[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0) {\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++) {\n\t\tif(freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{ \n    int freq[10] = {0}; \n    while (n) \n    { \n        int d = n % 10; \n        freq[d]++; \n        n = n / 10; \n    } \n    for (int i = 0; i < 10; i++) \n        if (freq[i] > i) \n            return false; \n    return true; \n} \nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpel_gxqu1.d(9): Deprecation: instead of C-style syntax, use D-style syntax `int[10] freq`\n/tmp/tmpel_gxqu1.d(9): Error: a struct is not a valid initializer for a `int[10]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpel_gxqu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n != 0) {\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tforeach(int i; 0 .. 10) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach(int i; 0..10) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3dusid1h.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmp3dusid1h.__unittest_L20_C1() [0x427da3]\n??:? void tmp3dusid1h.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgxrdjj8d.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmpgxrdjj8d.__unittest_L19_C1() [0x427da3]\n??:? void tmpgxrdjj8d.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 1; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\tforeach (i; 0 .. 10) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) {\n\t\tint d = n % 10;\n\t\tdigits[d]++;\n\t\tif (digits[d] > d) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = to!int[](to!string(n));\n\tint[] counts = new int[10];\n\tforeach(d; digits)\n\t{\n\t\t++counts[d];\n\t}\n\tforeach(d; digits)\n\t{\n\t\tif(counts[d] > d)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpiqy5cd_d.d(9): Error: template instance `to!int` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqy5cd_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (digits[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (++freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tforeach (i; 0 .. 10) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tint[] freq = new int[10];\n\t\n\tforeach(d; digits)\n\t{\n\t\tfreq[to!int(d)]++;\n\t}\n\t\n\tforeach(d; digits)\n\t{\n\t\tif(freq[to!int(d)] > to!int(d))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpzo2n2ly3.d(9): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo2n2ly3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n    int[] arr = new int[10];\n    while (n > 0)\n    {\n        int digit = n % 10;\n        if (arr[digit] > digit)\n            return false;\n        arr[digit]++;\n        n /= 10;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxuhhj8n.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmpkxuhhj8n.__unittest_L20_C1() [0x427da3]\n??:? void tmpkxuhhj8n.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach(int i; 0..10)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++) \n\t{\n\t\tif(freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tn /= 10;\n\t\tfreq[digit]++;\n\t}\n\tforeach(i; 0..10)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) {\n\t\t++digits[n % 10];\n\t\tn /= 10;\n\t}\n\tforeach (i; 0 .. 10) {\n\t\tif (digits[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n    string s = to!string(n);\n    int[] freq = new int[10];\n    foreach (c; s)\n    {\n        int digit = c - '0';\n        if (digit == 0)\n            continue;\n        if (freq[digit] > digit)\n            return false;\n        freq[digit]++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpi26s7tvr.d(9): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi26s7tvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tif(digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\t// Write your code here\n\t\n\tint a[10]={0};\n\t\n\twhile(n>0)\n\t{\n\t\ta[n%10]++;\n\t\tn/=10;\n\t}\n\t\n\tfor(int i=0;i<10;i++)\n\t{\n\t\tif(a[i]>i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmprd_myj8s.d(11): Deprecation: instead of C-style syntax, use D-style syntax `int[10] a`\n/tmp/tmprd_myj8s.d(11): Error: a struct is not a valid initializer for a `int[10]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd_myj8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\tforeach(char c; n.to!string)\n\t{\n\t\tif(c != '-')\n\t\t\tfreq[c.to!int - '0'.to!int]++;\n\t}\n\tforeach(i; 0..9)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpxudwariz.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxudwariz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\t\n\twhile (n > 0) \n\t{\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++) \n\t{\n\t\tif(freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n != 0) \n\t{\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\tforeach (i; 0 .. 10) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tn /= 10;\n\t\tdigits[digit]++;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach (int digit; digits)\n\t{\n\t\tif (digit > 0 && digit < digits[digit])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tauto digits = to!string(n);\n\tint[] freq = new int[10];\n\tforeach(d; digits)\n\t{\n\t\tfreq[d - '0']++;\n\t}\n\tforeach(d; digits)\n\t{\n\t\tif(freq[d - '0'] > d - '0')\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "/tmp/tmpwf6chddd.d(9): Error: template instance `to!string` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwf6chddd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (digits[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach (i; 0 .. 10) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0) \n\t{\n\t\tint digit = n % 10;\n\t\tif (digit == 0)\n\t\t\treturn false;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 1; i < 10; i++) \n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n    int[] freq = new int[10];\n    while (n > 0) \n    {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) \n    {\n        if (freq[i] > i) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] count = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tcount[digit]++;\n\t\tif(count[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3dusid1h.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmp3dusid1h.__unittest_L20_C1() [0x427da3]\n??:? void tmp3dusid1h.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tif (freq[d] > d)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < digits.length; i++) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpehjau9rc.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmpehjau9rc.__unittest_L20_C1() [0x427da3]\n??:? void tmpehjau9rc.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo35o0228.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmpo35o0228.__unittest_L22_C1() [0x427da3]\n??:? void tmpo35o0228.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tif (freq[d] > d)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\t// Write your code here\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (digits[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] arr = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tarr[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (arr[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(digits[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tif (++digits[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\t\n\twhile (n > 0)\n\t{\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (digits[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif(freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3dusid1h.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmp3dusid1h.__unittest_L20_C1() [0x427da3]\n??:? void tmp3dusid1h.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tdigits[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tforeach(int i; 0..10) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t\treturn false;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tlong temp = n;\n\tint count = 0;\n\tint digit = 0;\n\twhile(temp > 0)\n\t{\n\t\tdigit = temp % 10;\n\t\tcount = 0;\n\t\twhile(n > 0)\n\t\t{\n\t\t\tif(n % 10 == digit)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\tif(count > digit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ttemp /= 10;\n\t\tn = temp;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint d = n % 10;\n\t\tn /= 10;\n\t\tfreq[d]++;\n\t}\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (freq[i] > i) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] count = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tif(count[digit] > digit)\n\t\t\treturn false;\n\t\tcount[digit]++;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnru4ejf.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmprnru4ejf.__unittest_L20_C1() [0x427da3]\n??:? void tmprnru4ejf.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c02f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aec2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ae99]\n??:? runModuleUnitTests [0x42be05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428518]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif(freq[i] > i)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile(n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++) \n\t{\n\t\tif(freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] digits = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tn /= 10;\n\t\tdigits[digit]++;\n\t}\n\tfor (int i = 0; i < digits.length; i++) \n\t{\n\t\tif (digits[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\t\n\twhile(n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\t\n\tfor(int i = 0; i < 10; i++) \n\t{\n\t\tif(freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n != 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0)\n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (freq[i] > i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tfreq[n % 10]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) {\n\t\tint digit = n % 10;\n\t\tfreq[digit]++;\n\t\tif (freq[digit] > digit) {\n\t\t\treturn false;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\n*/\nbool validate(long n) \n{\n\tint[] freq = new int[10];\n\twhile (n > 0) \n\t{\n\t\tint d = n % 10;\n\t\tfreq[d]++;\n\t\tn /= 10;\n\t}\n\tfor (int i = 0; i < 10; i++) \n\t{\n\t\tif (freq[i] > i) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}