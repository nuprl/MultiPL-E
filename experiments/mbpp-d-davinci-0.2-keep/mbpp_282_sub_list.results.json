{
  "name": "mbpp_282_sub_list",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, n; nums1)\n\t{\n\t\tresult ~= n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\t\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, item; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] res = new long[nums1.length];\n\t\n\tforeach(i, e; nums1)\n\t{\n\t\tres[i] = e - nums2[i];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, item; nums1)\n\t{\n\t\tresult ~= item - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] res = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) \n\t{\n\t\tres[i] = nums1[i] - nums2[i];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\treturn zip(nums1, nums2).map!(a => a[0] - a[1]).array;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "/tmp/tmpksectxrl.d(10): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksectxrl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n    long[] result = new long[nums1.length];\n    for (int i = 0; i < nums1.length; i++)\n    {\n        result[i] = nums1[i] - nums2[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tresult.length = nums1.length;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, item; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t\tresult[i] = num - nums2[i];\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\t\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tif(nums1.length == nums2.length)\n\t{\n\t\tresult = new long[nums1.length];\n\t\tfor(int i = 0; i < nums1.length; i++)\n\t\t{\n\t\t\tresult[i] = nums1[i] - nums2[i];\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = null;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\t\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, v; nums1)\n\t{\n\t\tresult ~= v - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t\tresult[i] = num - nums2[i];\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n    long[] result = new long[nums1.length];\n    foreach(i, num; nums1)\n    {\n        result[i] = num - nums2[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, val; nums1)\n\t{\n\t\tresult[i] = val - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n    long[] result = new long[nums1.length];\n    foreach(i, num; nums1)\n    {\n        result[i] = num - nums2[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] nums3 = new long[nums1.length];\n\t\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tnums3[i] = nums1[i] - nums2[i];\n\t}\n\t\n\treturn nums3;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, n; nums1)\n\t{\n\t\tresult[i] = n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to multiply two lists element-wise.\n*/\nlong[] multiply_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] * nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to divide two lists element-wise.\n*/\nlong[] divide_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] / nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to calculate the dot product of two lists.\n*/\nlong dot_product(long[] nums1, long[] nums2) \n{\n\tlong result = 0;\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult += nums1[i] * nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to calculate the cross product of two lists.\n*/\nlong[] cross_product(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[3];\n\tresult[0] = nums1[1] * nums2[2] - nums1[2] * nums2[1];\n\tresult[1] = nums1[2] * nums2[0] - nums1[0] * nums2[2];\n\tresult[2] = nums1[0]\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "/tmp/tmphdpedcyp.d(62): Error: found `unittest` when expecting `;` following statement\n/tmp/tmphdpedcyp.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdpedcyp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] res = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tres[i] = num - nums2[i];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, val; nums1)\n\t{\n\t\tresult ~= val - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i; 0 .. nums1.length)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = v - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, e; nums1)\n\t{\n\t\tresult ~= e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, e; nums1)\n\t{\n\t\tresult ~= e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i,n; nums1)\n\t{\n\t\tresult ~= n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, item; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, n; nums1)\n\t{\n\t\tresult ~= n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = v - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i,n; nums1)\n\t{\n\t\tresult ~= n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, n; nums1)\n\t{\n\t\tresult[i] = n - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, item; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to subtract two lists element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}