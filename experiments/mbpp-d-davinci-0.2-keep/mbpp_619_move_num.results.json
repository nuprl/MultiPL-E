{
  "name": "mbpp_619_move_num",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp3rswz8jq.d(14): Error: no property `canFind` for type `string`\n/tmp/tmp3rswz8jq.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rswz8jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring numbers = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnumbers ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ numbers;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuk8cf_a0.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuk8cf_a0.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk8cf_a0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp6vk0tmrw.d(13): Error: undefined identifier `isdigit`\n/tmp/tmp6vk0tmrw.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vk0tmrw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum_str ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8awz9k4t.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8awz9k4t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpy0a2ubr1.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpy0a2ubr1.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0a2ubr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring str = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tstr ~= c;\n\t}\n\treturn str ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp825p35kx.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp825p35kx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp2prws0f3.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp2prws0f3.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2prws0f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\t\n\tforeach(immutable char c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\tforeach(immutable char c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp8gloez66.d(15): Error: no property `canFind` for type `string`\n/tmp/tmp8gloez66.d(23): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gloez66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp2prws0f3.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp2prws0f3.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2prws0f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_daupy4r.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_daupy4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(isDigit(ch))\n\t\t\tnums ~= ch;\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpodh7wu3d.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodh7wu3d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpzsv6869g.d(13): Error: undefined identifier `isdigit`\n/tmp/tmpzsv6869g.d(18): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsv6869g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpijviduy7.d(13): Error: undefined identifier `isdigit`\n/tmp/tmpijviduy7.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijviduy7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpk4sfi9wl.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4sfi9wl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach (c; test_str)\n\t{\n\t\tif (nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach (c; test_str)\n\t{\n\t\tif (!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmplcakniel.d(14): Error: no property `canFind` for type `string`\n/tmp/tmplcakniel.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcakniel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp2prws0f3.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp2prws0f3.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2prws0f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbbi41mdx.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbi41mdx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp2lsc4toq.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmp2lsc4toq.d(20): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lsc4toq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp0t4y0gkr.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp0t4y0gkr.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t4y0gkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\tresult ~= nums;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpeicttimr.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeicttimr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tresult ~= num;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp3yhlkj7k.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yhlkj7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = test_str.length - 1;\n\t\n\twhile(i < j) \n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tif(test_str[j] >= '0' && test_str[j] <= '9')\n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tswap(test_str[i], test_str[j]);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn test_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpt4k7x77c.d(11): Error: cannot implicitly convert expression `test_str.length - 1LU` of type `ulong` to `int`\n/tmp/tmpt4k7x77c.d(23): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4k7x77c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring num;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp196k8h00.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp196k8h00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpi86xmkmr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpi86xmkmr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi86xmkmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint len = test_str.length;\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpkfs4oep3.d(10): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpkfs4oep3.d(14): Error: undefined identifier `isDigit`\n/tmp/tmpkfs4oep3.d(21): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfs4oep3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp992q_g8u.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp992q_g8u.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp992q_g8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqwt6t81.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmpuqwt6t81.__unittest_L23_C1() [0x427bca]\n??:? void tmpuqwt6t81.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c623]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c3f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach (c; test_str)\n\t{\n\t\tif (c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach (c; test_str)\n\t{\n\t\tif (!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpfqmy2s_g.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpfqmy2s_g.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqmy2s_g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpuo6o4_37.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpuo6o4_37.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo6o4_37.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp42859csw.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42859csw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring ret;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tret ~= c;\n\t\telse\n\t\t\tret = c ~ ret;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpt3zy0k_l.d(13): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3zy0k_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp54gpfj8f.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp54gpfj8f.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54gpfj8f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp8th3wikb.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8th3wikb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmphg_zjp4v.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphg_zjp4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_czxgw4e.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmp_czxgw4e.__unittest_L27_C1() [0x427bca]\n??:? void tmp_czxgw4e.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c623]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c3f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmphb835qi2.d(14): Error: no property `canFind` for type `string`\n/tmp/tmphb835qi2.d(19): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb835qi2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{ \n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n} \nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpmbf9fphb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbf9fphb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tstring result = \"\";\n\t\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile(j < test_str.length)\n\t{\n\t\ttest_str[j] = ' ';\n\t\tj++;\n\t}\n\t\n\treturn test_str + result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpronf8pdz.d(18): Error: slice `result` is not mutable\n/tmp/tmpronf8pdz.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmpronf8pdz.d(30): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmpronf8pdz.d(34): Error: invalid array operation `test_str + result` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpronf8pdz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c.isDigit) {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp2bur7x9n.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bur7x9n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmphg_zjp4v.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphg_zjp4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpy0a2ubr1.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpy0a2ubr1.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0a2ubr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmph3v8ipay.d(13): Error: undefined identifier `isDigit`\n/tmp/tmph3v8ipay.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3v8ipay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring temp = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\ttemp += test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str.substr(0, j) + temp;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmptu9q_2x_.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmptu9q_2x_.d(18): Error: slice `temp` is not mutable\n/tmp/tmptu9q_2x_.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmptu9q_2x_.d(27): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu9q_2x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j < len)\n\t{\n\t\ttest_str[j] = ' ';\n\t\tj++;\n\t}\n\t\n\treturn test_str + result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpe38bef3x.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpe38bef3x.d(19): Error: slice `result` is not mutable\n/tmp/tmpe38bef3x.d(23): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmpe38bef3x.d(31): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmpe38bef3x.d(35): Error: invalid array operation `test_str + result` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe38bef3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp42859csw.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42859csw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp23zxw1as.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmp23zxw1as.__unittest_L27_C1() [0x427bca]\n??:? void tmp23zxw1as.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c623]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c3f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmphhw83p5u.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmphhw83p5u.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhw83p5u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp3rswz8jq.d(14): Error: no property `canFind` for type `string`\n/tmp/tmp3rswz8jq.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rswz8jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(ch; test_str)\n\t{\n\t\tif(isDigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!isDigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpvg05bg7u.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpvg05bg7u.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg05bg7u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tstring result = \"\";\n\tstring num = \"\";\n\twhile (i < test_str.length)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tnum += test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result + num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpnry3pdrh.d(17): Error: slice `num` is not mutable\n/tmp/tmpnry3pdrh.d(21): Error: slice `result` is not mutable\n/tmp/tmpnry3pdrh.d(25): Error: invalid array operation `result + num` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnry3pdrh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpp30w6qbb.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp30w6qbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j < len)\n\t{\n\t\ttest_str[j] = '\\0';\n\t\tj++;\n\t}\n\t\n\treturn test_str ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp6qjw1e_k.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp6qjw1e_k.d(23): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmp6qjw1e_k.d(31): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qjw1e_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint len = test_str.length;\n\tstring result = \"\";\n\tforeach (i; 0 .. len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t\tresult ~= test_str[i];\n\t}\n\tforeach (i; 0 .. len)\n\t{\n\t\tif (test_str[i] < '0' || test_str[i] > '9')\n\t\t\tresult ~= test_str[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp76prz_d0.d(10): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76prz_d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpchfro_dz.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpchfro_dz.d(18): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchfro_dz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdmdt6q0n.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpdmdt6q0n.d(19): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmdt6q0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp0y3z6xrb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y3z6xrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{ \n    string result = \"\"; \n    string num = \"\"; \n    foreach(i; 0 .. test_str.length) \n    { \n        if (test_str[i] >= '0' && test_str[i] <= '9') \n            num ~= test_str[i]; \n        else\n            result ~= test_str[i]; \n    } \n    return result ~ num; \n} \nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpfy9m5pt_.d(13): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy9m5pt_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{ \n    string res = \"\"; \n    string num = \"\"; \n    foreach (char c; test_str) \n    { \n        if (c >= '0' && c <= '9') \n            num += c; \n        else\n            res += c; \n    } \n    return res + num; \n} \nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpc8z6gopp.d(15): Error: slice `num` is not mutable\n/tmp/tmpc8z6gopp.d(17): Error: slice `res` is not mutable\n/tmp/tmpc8z6gopp.d(19): Error: invalid array operation `res + num` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8z6gopp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(ch; test_str) {\n\t\tif(isDigit(ch)) {\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str) {\n\t\tif(!isDigit(ch)) {\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpaksvjhco.d(12): Error: undefined identifier `isDigit`\n/tmp/tmpaksvjhco.d(17): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaksvjhco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c >= '0' && c <= '9') {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdmdt6q0n.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpdmdt6q0n.d(19): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmdt6q0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tres ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tres ~= c;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpsdai3o13.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpsdai3o13.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdai3o13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuk8cf_a0.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuk8cf_a0.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk8cf_a0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0 .. j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpox8w8az9.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpox8w8az9.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox8w8az9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpijyz3vmh.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijyz3vmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuk8cf_a0.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuk8cf_a0.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk8cf_a0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpkatp8nt8.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkatp8nt8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmphg_zjp4v.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphg_zjp4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp42859csw.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42859csw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpywl9yu31.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpywl9yu31.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywl9yu31.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c in nums)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!(c in nums))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpb0uyaidj.d(14): Error: incompatible types for `(c) in (nums)`: `immutable(char)` and `string`\n/tmp/tmpb0uyaidj.d(19): Error: incompatible types for `(c) in (nums)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0uyaidj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdmdt6q0n.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpdmdt6q0n.d(19): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmdt6q0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpuo6o4_37.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpuo6o4_37.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo6o4_37.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tres ~= c;\n\t}\n\treturn res ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint len = test_str.length;\n\tint i = 0;\n\tint j = len - 1;\n\tstring result;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\twhile(j > i)\n\t\t\t{\n\t\t\t\tif(test_str[j] >= '0' && test_str[j] <= '9')\n\t\t\t\t{\n\t\t\t\t\tswap(test_str[i], test_str[j]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpqswfytxh.d(10): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpqswfytxh.d(23): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqswfytxh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn test_str[0..j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp4p6_6j4h.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp4p6_6j4h.d(23): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4p6_6j4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpp30w6qbb.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp30w6qbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i, j;\n\tstring str = \"\";\n\tstring num = \"\";\n\tfor (i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tnum += test_str[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr += test_str[i];\n\t\t}\n\t}\n\treturn str + num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpw18w63yd.d(17): Error: slice `num` is not mutable\n/tmp/tmpw18w63yd.d(21): Error: slice `str` is not mutable\n/tmp/tmpw18w63yd.d(24): Error: invalid array operation `str + num` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw18w63yd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp2prws0f3.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp2prws0f3.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2prws0f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp02qct0sb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02qct0sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tint i = 0;\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < test_str.length)\n\t{\n\t\tif(test_str[i] < '0' || test_str[i] > '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphiltxdbv.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428025]\n??:? void tmphiltxdbv.__unittest_L31_C1() [0x427c62]\n??:? void tmphiltxdbv.__modtest() [0x427da8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c72f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b63e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430015]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ffa1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b615]\n??:? runModuleUnitTests [0x42c505]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp3a69_zuf.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp3a69_zuf.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a69_zuf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp0y3z6xrb.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y3z6xrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach (c; test_str) \n\t{\n\t\tif (c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach (c; test_str) \n\t{\n\t\tif (!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp0qlcvsa3.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp0qlcvsa3.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qlcvsa3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmph08yd0ge.d(14): Error: no property `canFind` for type `string`\n/tmp/tmph08yd0ge.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph08yd0ge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t\tnums ~= ch;\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\tresult ~= nums;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpkogkfo1q.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkogkfo1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring temp_str;\n\twhile (i < len) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\ttemp_str ~= test_str[i];\n\t\t} else {\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < len) {\n\t\ttest_str[j] = temp_str[j - len + temp_str.length];\n\t\tj++;\n\t}\n\treturn test_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmp9axevtf5.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp9axevtf5.d(18): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\n/tmp/tmp9axevtf5.d(24): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9axevtf5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i, j;\n\tstring result;\n\t\n\tfor (i = 0; i < test_str.length; i++) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < test_str.length; i++) {\n\t\tif (test_str[i] < '0' || test_str[i] > '9') {\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfdnzq322.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428015]\n??:? void tmpfdnzq322.__unittest_L27_C1() [0x427c52]\n??:? void tmpfdnzq322.__modtest() [0x427d98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c4f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_k_h730y.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp_k_h730y.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_h730y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpic73rdf7.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpic73rdf7.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic73rdf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpkatp8nt8.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkatp8nt8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpbwwut7lt.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwwut7lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpuo6o4_37.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpuo6o4_37.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo6o4_37.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpson3h1j4.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpson3h1j4.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpson3h1j4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplx1daqju.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx1daqju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c in nums)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!(c in nums))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdn2v25pw.d(14): Error: incompatible types for `(c) in (nums)`: `immutable(char)` and `string`\n/tmp/tmpdn2v25pw.d(21): Error: incompatible types for `(c) in (nums)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdn2v25pw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp3rswz8jq.d(14): Error: no property `canFind` for type `string`\n/tmp/tmp3rswz8jq.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rswz8jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpk4sfi9wl.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4sfi9wl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "/tmp/tmpdhfd0aph.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpdhfd0aph.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhfd0aph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}