{
  "name": "mbpp_635_heap_sort",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*j;\n\t\t\t}\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*j+1;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmphvdwkonj.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmphvdwkonj.heap_sort(long[]) [0x427ec5]\n??:? void tmphvdwkonj.__unittest_L57_C1() [0x4282d9]\n??:? void tmphvdwkonj.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, iterable[i], heap_size);\n\t}\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpc_xl9lbg.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpc_xl9lbg.d(19): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_xl9lbg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\t// Copy the iterable to the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\t// Build the heap\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\t// Sort the heap\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap, 0, heap.length - i - 1);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpor0jipkr.d(21): Error: undefined identifier `heapify`\n/tmp/tmpor0jipkr.d(29): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpor0jipkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (parent - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong index = iterable.length - 1;\n\t\n\twhile(index >= 0)\n\t{\n\t\tresult[index] = heap[0];\n\t\theap[0] = heap[index];\n\t\theap[index] = 0;\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < index)\n\t\t{\n\t\t\tif(child + 1 < index && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tparent = child;\n\t\t\tchild = 2 * child + 1;\n\t\t}\n\t\t\n\t\tindex--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517242,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t\tmax_index = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t\tmax_index = j*2+1;\n\t\t\tif(max_index == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx4qu6oby.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmpx4qu6oby.heap_sort(long[]) [0x427ec5]\n??:? void tmpx4qu6oby.__unittest_L52_C1() [0x4282d9]\n??:? void tmpx4qu6oby.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(ref long item; result) \n\t{\n\t\titem = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpm46vqz7b.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpm46vqz7b.d(20): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm46vqz7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theapify(heap, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpe1tgww98.d(13): Error: undefined identifier `heapify`\n/tmp/tmpe1tgww98.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1tgww98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\theapify(heap);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmp4i0qnv6k.d(22): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i0qnv6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpjk1r5td_.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmpjk1r5td_.d(12): Error: undefined identifier `heapify`\n/tmp/tmpjk1r5td_.d(19): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk1r5td_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(long i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\theap = swap(heap, 0, i);\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmp_uyib1q2.d(17): Error: undefined identifier `heapify`\n/tmp/tmp_uyib1q2.d(22): Error: undefined identifier `swap`, did you mean variable `heap`?\n/tmp/tmp_uyib1q2.d(23): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_uyib1q2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result;\n\tlong[] heap;\n\tlong[] tmp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\tlong tmp_value;\n\t\n\tn = iterable.length;\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\tk = i;\n\t\ttmp_value = heap[i];\n\t\twhile (k * 2 + 1 < n) \n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j < n - 1) \n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j + 1]) \n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tmp_value < heap[j]) \n\t\t\t{\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\theap[k] = tmp_value;\n\t}\n\t\n\tfor (i = n - 1; i > 0; i--) \n\t{\n\t\ttmp_value = heap[i];\n\t\theap[i] = heap[0];\n\t\tk = 0;\n\t\twhile (k * 2 + 1 < i) \n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j < i - 1) \n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j + 1]) \n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tmp_value < heap[j]) \n\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpsqgm83lv.d(71): Error: found `unittest` instead of statement\n/tmp/tmpsqgm83lv.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpsqgm83lv.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqgm83lv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(i, item; result)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t\tj = j/2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, item; result)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j < heap_size)\n\t\t{\n\t\t\tif(heap[j] < heap[j*2] || heap[j] < heap[j*2+1])\n\t\t\t{\n\t\t\t\tif(heap[j*2] > heap[j*2+1])\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\theap[j] = heap[j*2];\n\t\t\t\t\theap[j*2] = temp;\n\t\t\t\t\tj = j*2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\theap[j] = heap[j*2+1];\n\t\t\t\t\theap[j*2+1] = temp\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpf02hdgg1.d(62): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpf02hdgg1.d(70): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf02hdgg1.d(70): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf02hdgg1.d(70): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf02hdgg1.d(70): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpf02hdgg1.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf02hdgg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\t// build heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\tint j = 0;\n\t\twhile (j < iterable.length - i - 1)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif (left < iterable.length - i - 1 && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < iterable.length - i - 1 && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmp9jtrlcal.d(64): Error: found `unittest` instead of statement\n/tmp/tmp9jtrlcal.d(72): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9jtrlcal.d(72): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9jtrlcal.d(72): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jtrlcal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap();\n\t\n\t// Insert all elements into the heap\n\tforeach(elem; iterable)\n\t{\n\t\theap.insert(elem);\n\t}\n\t\n\t// Extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract_min();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpjj9oa7sw.d(12): Error: undefined identifier `Heap`\n/tmp/tmpjj9oa7sw.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj9oa7sw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] > heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] < heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_vwszgz9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288ee]\n??:? long[] tmp_vwszgz9.heap_sort(long[]) [0x427ec5]\n??:? void tmp_vwszgz9.__unittest_L50_C1() [0x4282c5]\n??:? void tmp_vwszgz9.__modtest() [0x4285bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ee8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b785]\n??:? runModuleUnitTests [0x42c6f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpszygemrl.d(19): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszygemrl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop the heap and store the result in the array\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpaygjab_n.d(12): Error: undefined identifier `Heap`\n/tmp/tmpaygjab_n.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaygjab_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i,v; iterable)\n\t\theap[i] = v;\n\t\n\tfor(long i = (heap.length-1)/2; i >= 0; i--)\n\t\theapify(heap, i);\n\t\n\tfor(long i = heap.length-1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpl563v8y6.d(14): Error: undefined identifier `heapify`\n/tmp/tmpl563v8y6.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl563v8y6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif(left < iterable.length && heap[left] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[left];\n\t\t\theap[left] = temp;\n\t\t}\n\t\t\n\t\tif(right < iterable.length && heap[right] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[right];\n\t\t\theap[right] = temp;\n\t\t}\n\t\t\n\t\tif(parent >= 0 && heap[parent] < heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t}\n\t}\n\t\n\tlong j = 0;\n\t\n\tforeach(long i; heap)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\t\n\t\tlong parent = (i - 1) / 2;\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif(left < iterable.length && heap[left] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[left];\n\t\t\theap[left] = temp;\n\t\t}\n\t\t\n\t\tif(right\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpoxvr9e6a.d(65): Error: found `unittest` when expecting `)`\n/tmp/tmpoxvr9e6a.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpoxvr9e6a.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxvr9e6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_index[i] = -1;\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t\theap_size++;\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmptl3ml9pu.d(20): Error: undefined identifier `heap_insert`\n/tmp/tmptl3ml9pu.d(25): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptl3ml9pu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long x; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = x;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = 2*i;\n\t\t\tlong right = 2*i + 1;\n\t\t\tlong smallest = i;\n\t\t\tif(left <= heap_size && heap[left] < heap[smallest])\n\t\t\t\tsmallest = left;\n\t\t\tif(right <= heap_size && heap[right] < heap[smallest])\n\t\t\t\tsmallest = right;\n\t\t\tif(smallest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[smallest];\n\t\t\t\theap[smallest] = temp;\n\t\t\t\ti = smallest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpte5wpae3.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428926]\n??:? long[] tmpte5wpae3.heap_sort(long[]) [0x427ecb]\n??:? void tmpte5wpae3.__unittest_L58_C1() [0x428301]\n??:? void tmpte5wpae3.__modtest() [0x4285f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c953]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7bd]\n??:? runModuleUnitTests [0x42c729]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[1];\n\t\tresult_size++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i * 2;\n\t\t\tlong right = i * 2 + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\ti = largest;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpreqjx8dp.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x4288ad]\n??:? void tmpreqjx8dp.__unittest_L56_C1() [0x4283cc]\n??:? void tmpreqjx8dp.__modtest() [0x428630]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c98b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430aa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f5]\n??:? runModuleUnitTests [0x42c761]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = i;\n\t\tlong j = heap.length - 1;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[] result = new long[heap.length];\n\tforeach(long i; heap)\n\t{\n\t\tresult.length++;\n\t\tresult[result.length - 1] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong j = 0;\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tlong left = j * 2 + 1;\n\t\t\tlong right = j * 2 + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpf2ogtlvd.d(66): Error: found `unittest` instead of statement\n/tmp/tmpf2ogtlvd.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2ogtlvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop the elements from the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmphd9pwjy5.d(12): Error: undefined identifier `Heap`\n/tmp/tmphd9pwjy5.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd9pwjy5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, e; iterable)\n\t{\n\t\theap[i] = e;\n\t}\n\t\n\tauto n = heap.length;\n\t\n\tfor(int i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor(int i = n - 1; i >= 0; i--)\n\t{\n\t\tauto temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp_fbgpv3y.d(17): Error: cannot implicitly convert expression `n / 2LU - 1LU` of type `ulong` to `int`\n/tmp/tmp_fbgpv3y.d(19): Error: undefined identifier `heapify`\n/tmp/tmp_fbgpv3y.d(22): Error: cannot implicitly convert expression `n - 1LU` of type `ulong` to `int`\n/tmp/tmp_fbgpv3y.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_fbgpv3y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\tlong[] unsorted = new long[result.length];\n\t\n\tlong[] temp = new long[result.length];\n\t\n\tlong[] temp2 = new long[result.length];\n\t\n\tlong[] temp3 = new long[result.length];\n\t\n\tlong[] temp4 = new long[result.length];\n\t\n\tlong[] temp5 = new long[result.length];\n\t\n\tlong[] temp6 = new long[result.length];\n\t\n\tlong[] temp7 = new long[result.length];\n\t\n\tlong[] temp8 = new long[result.length];\n\t\n\tlong[] temp9 = new long[result.length];\n\t\n\tlong[] temp10 = new long[result.length];\n\t\n\tlong[] temp11 = new long[result.length];\n\t\n\tlong[] temp12 = new long[result.length];\n\t\n\tlong[] temp13 = new long[result.length];\n\t\n\tlong[] temp14 = new long[result.length];\n\t\n\tlong[] temp15 = new long[result.length];\n\t\n\tlong[] temp16 = new long[result.length];\n\t\n\tlong[] temp17 = new long[result.length];\n\t\n\tlong[] temp18 = new long[result.length];\n\t\n\tlong[] temp19 = new long[result.length];\n\t\n\tlong[] temp20 = new long[result.length];\n\t\n\tlong[] temp21 = new long[result.length];\n\t\n\tlong[] temp22 = new long[result.length];\n\t\n\tlong[] temp23 = new long[result.length];\n\t\n\tlong[] temp24 = new long[result.length];\n\t\n\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpy1o2i6y_.d(73): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1o2i6y_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint[] heap = new int[iterable.length];\n\tint heap_size = 0;\n\t\n\tvoid heap_push(int value)\n\t{\n\t\theap[heap_size] = value;\n\t\tint i = heap_size;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tint parent = (i - 1) / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tint temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\theap_size++;\n\t}\n\t\n\tint heap_pop()\n\t{\n\t\tint value = heap[0];\n\t\theap_size--;\n\t\theap[0] = heap[heap_size];\n\t\tint i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tint left = 2 * i + 1;\n\t\t\tint right = 2 * i + 2;\n\t\t\tif(left >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint largest = i;\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tint temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp8goqip0c.d(70): Error: expression expected, not `unittest`\n/tmp/tmp8goqip0c.d(71): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp8goqip0c.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8goqip0c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(true)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[max])\n\t\t\t\tmax = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[max])\n\t\t\t\tmax = 2*j+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp33rwymk7.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288ee]\n??:? long[] tmp33rwymk7.heap_sort(long[]) [0x427ec5]\n??:? void tmp33rwymk7.__unittest_L53_C1() [0x4282c9]\n??:? void tmp33rwymk7.__modtest() [0x4285c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ee8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b785]\n??:? runModuleUnitTests [0x42c6f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\tlong[] arr = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tarr[i] = iterable[i];\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(arr, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = arr[0];\n\t\tarr[0] = arr[i];\n\t\tarr[i] = temp;\n\t\theapify(arr, i, 0);\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp9bbejc04.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmp9bbejc04.d(15): Error: undefined identifier `heapify`\n/tmp/tmp9bbejc04.d(22): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bbejc04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = temp;\n\t\t\n\t\tresult[i] = heap[heap.length - 1];\n\t\theap = heap[0 .. heap.length - 1];\n\t\t\n\t\tlong index = 0;\n\t\tlong left = 2 * index + 1;\n\t\tlong right = 2 * index + 2;\n\t\t\n\t\twhile(left < heap.length)\n\t\t{\n\t\t\tlong largest = index;\n\t\t\t\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tindex = largest;\n\t\t\t\tleft = 2 * index + 1;\n\t\t\t\tright = 2 * index + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp7kuvtksm.d(46): Error: variable `temp` is shadowing variable `tmp7kuvtksm.heap_sort.temp`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kuvtksm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong j = i;\n\t\t\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\t\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[result.length - 1 - i];\n\t\theap[result.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\t\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < result.length - i && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < result.length - i && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpk4w0pjge.d(71): Error: found `unittest` instead of statement\n/tmp/tmpk4w0pjge.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk4w0pjge.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk4w0pjge.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4w0pjge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpg21lzsmr.d(18): Error: undefined identifier `heapify`\n/tmp/tmpg21lzsmr.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg21lzsmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tif (iterable.length == 0)\n\t\treturn result;\n\t\n\tresult[0] = iterable[0];\n\t\n\tfor (int i = 1; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\t\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\t\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[result.length - 1 - i];\n\t\tresult[result.length - 1 - i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < result.length - 1 - i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\t\n\t\t\tint max = j;\n\t\t\t\n\t\t\tif (left < result.length - 1 - i && result[left] > result[max])\n\t\t\t\tmax = left;\n\t\t\t\n\t\t\tif (right < result.length - 1 - i && result[right] > result[max])\n\t\t\t\tmax = right;\n\t\t\t\n\t\t\tif (max != j)\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[max];\n\t\t\t\tresult[max] = temp2;\n\t\t\t\t\n\t\t\t\tj = max;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpyg6b2ra9.d(66): Error: found `unittest` instead of statement\n/tmp/tmpyg6b2ra9.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyg6b2ra9.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyg6b2ra9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc9o972r8.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428906]\n??:? long[] tmpc9o972r8.heap_sort(long[]) [0x427ec5]\n??:? void tmpc9o972r8.__unittest_L53_C1() [0x4282dd]\n??:? void tmpc9o972r8.__modtest() [0x4285d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c933]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b79d]\n??:? runModuleUnitTests [0x42c709]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size - 1] = element;\n\t\tlong i = heap_size - 1;\n\t\twhile(i > 0 && heap[(i - 1) / 2] < heap[i])\n\t\t{\n\t\t\tlong temp = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = heap[i];\n\t\t\theap[i] = temp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[0];\n\t\tresult_size++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfffkntvg.d(67): unittest failure\n----------------\n??:? _d_unittestp [0x428895]\n??:? void tmpfffkntvg.__unittest_L63_C1() [0x4283b4]\n??:? void tmpfffkntvg.__modtest() [0x428618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c973]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b806]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7dd]\n??:? runModuleUnitTests [0x42c749]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = 2*j;\n\t\t\tlong right = 2*j + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpq9xdooq1.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42892e]\n??:? long[] tmpq9xdooq1.heap_sort(long[]) [0x427ecb]\n??:? void tmpq9xdooq1.__unittest_L56_C1() [0x428309]\n??:? void tmpq9xdooq1.__modtest() [0x428600]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c95b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c5]\n??:? runModuleUnitTests [0x42c731]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(int i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(int i = heap.length - 1; i >= 0; i--)\n\t{\n\t\theap[0] = heap[i];\n\t\theap[i] = heap[0];\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpan64sia1.d(15): Error: cannot implicitly convert expression `heap.length / 2LU` of type `ulong` to `int`\n/tmp/tmpan64sia1.d(17): Error: undefined identifier `heapify`\n/tmp/tmpan64sia1.d(20): Error: cannot implicitly convert expression `heap.length - 1LU` of type `ulong` to `int`\n/tmp/tmpan64sia1.d(24): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan64sia1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\tint left = 2 * current + 1;\n\t\tint right = 2 * current + 2;\n\t\twhile (left < i)\n\t\t{\n\t\t\tint max = current;\n\t\t\tif (result[left] > result[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\tif (max == current)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp2 = result[max];\n\t\t\t\tresult[max] = result[current];\n\t\t\t\tresult[current] = temp2;\n\t\t\t\tcurrent = max;\n\t\t\t\tleft = 2 * current + 1;\n\t\t\t\tright = 2 * current + 2;\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpwnj3pzl_.d(69): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnj3pzl_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpebtjrn1q.d(16): Error: cannot implicitly convert expression `result.length / 2LU - 1LU` of type `ulong` to `int`\n/tmp/tmpebtjrn1q.d(18): Error: undefined identifier `heapify`\n/tmp/tmpebtjrn1q.d(21): Error: cannot implicitly convert expression `result.length - 1LU` of type `ulong` to `int`\n/tmp/tmpebtjrn1q.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebtjrn1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] arr = iterable.dup;\n\tlong n = arr.length;\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(arr, n, i);\n\t}\n\tfor (long i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = arr[0];\n\t\tarr[0] = arr[i];\n\t\tarr[i] = temp;\n\t\theapify(arr, i, 0);\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmptirpa0m_.d(13): Error: undefined identifier `heapify`\n/tmp/tmptirpa0m_.d(20): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptirpa0m_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap = heapify(heap, 0, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4lq0fv6x.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lq0fv6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = tmp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(heap[j] > heap[j*2])\n\t\t\t\tk = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[k] > heap[j*2+1])\n\t\t\t\tk = j*2+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5fwvb6es.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428906]\n??:? long[] tmp5fwvb6es.heap_sort(long[]) [0x427ec5]\n??:? void tmp5fwvb6es.__unittest_L53_C1() [0x4282e1]\n??:? void tmp5fwvb6es.__modtest() [0x4285d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c933]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b79d]\n??:? runModuleUnitTests [0x42c709]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tint result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j * 2 <= heap_size)\n\t\t{\n\t\t\tint k = j * 2;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] < heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] < heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpugrqc8t6.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288ee]\n??:? long[] tmpugrqc8t6.heap_sort(long[]) [0x428070]\n??:? void tmpugrqc8t6.__unittest_L51_C1() [0x4282c5]\n??:? void tmpugrqc8t6.__modtest() [0x4285bc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ee8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b785]\n??:? runModuleUnitTests [0x42c6f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\t\n\t\tint current_index = heap_size;\n\t\t\n\t\twhile(current_index > 0)\n\t\t{\n\t\t\tint parent_index = (current_index - 1) / 2;\n\t\t\t\n\t\t\tif(heap[current_index] > heap[parent_index])\n\t\t\t{\n\t\t\t\tlong temp = heap[current_index];\n\t\t\t\theap[current_index] = heap[parent_index];\n\t\t\t\theap[parent_index] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tcurrent_index = parent_index;\n\t\t}\n\t\t\n\t\theap_size++;\n\t}\n\t\n\tint result_index = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\t\n\t\theap[0] = heap[heap_size - 1];\n\t\t\n\t\theap_size--;\n\t\t\n\t\tint current_index = 0;\n\t\t\n\t\twhile(current_index < heap_size)\n\t\t{\n\t\t\tint left_child_index = 2 * current_index + 1;\n\t\t\tint right_child_index = 2 * current_index + 2;\n\t\t\t\n\t\t\tif(left_child_index >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tint max_index = current_index;\n\t\t\t\n\t\t\tif(heap[max_index] < heap[left_child_index])\n\t\t\t{\n\t\t\t\tmax_index = left_child_index;\n\t\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmperfuho85.d(70): Error: found `unittest` instead of statement\n/tmp/tmperfuho85.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmperfuho85.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmperfuho85.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperfuho85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\t// Create a heap from the iterable\n\tHeap heap = new Heap(iterable);\n\t\n\t// Sort the heap\n\theap.sort();\n\t\n\t// Return the sorted heap\n\treturn heap.toArray();\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp88i2732t.d(10): Error: undefined identifier `Heap`\n/tmp/tmp88i2732t.d(10): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88i2732t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong k = i;\n\t\tlong v = heap[k];\n\t\tbool heapified = false;\n\t\t\n\t\twhile(!heapified && (2*k + 1) < iterable.length)\n\t\t{\n\t\t\tlong j = 2*k + 1;\n\t\t\t\n\t\t\tif(j < (iterable.length - 1))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(v >= heap[j])\n\t\t\t{\n\t\t\t\theapified = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\theap[k] = v;\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\tlong v = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = heap[0];\n\t\t\n\t\tlong k = 0;\n\t\tbool heapified = false;\n\t\t\n\t\twhile(!heapified && (2*k + 1) < (iterable.length - i - 1))\n\t\t{\n\t\t\tlong j = 2*k + 1;\n\t\t\t\n\t\t\tif(j < (iterable.length - i - 2))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j + 1])\n\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpey1ysv7k.d(67): Error: found `unittest` instead of statement\n/tmp/tmpey1ysv7k.d(75): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpey1ysv7k.d(75): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpey1ysv7k.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey1ysv7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t\tresult ~= i;\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\t\n\t\tlong current = heap_size - 1;\n\t\tlong parent = (current - 1) / 2;\n\t\t\n\t\twhile(parent >= 0 && heap[current] > heap[parent])\n\t\t{\n\t\t\tlong temp = heap[current];\n\t\t\theap[current] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\t\n\t\t\tcurrent = parent;\n\t\t\tparent = (current - 1) / 2;\n\t\t}\n\t}\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap[heap_size - 1] = temp;\n\t\t\n\t\theap_size--;\n\t\t\n\t\tlong current = 0;\n\t\tlong left = 2 * current + 1;\n\t\tlong right = 2 * current + 2;\n\t\t\n\t\twhile(left < heap_size)\n\t\t{\n\t\t\tlong largest = current;\n\t\t\t\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\t\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif(largest == current)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\ttemp = heap[current];\n\t\t\theap[current] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\t\n\t\t\tcurrent = largest;\n\t\t\tleft = 2 * current + 1;\n\t\t\tright = 2 * current +\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpv8wql4ef.d(67): Error: expression expected, not `unittest`\n/tmp/tmpv8wql4ef.d(68): Error: found `{` when expecting `;` following statement\n/tmp/tmpv8wql4ef.d(75): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv8wql4ef.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8wql4ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp8d1dt__4.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp8d1dt__4.d(19): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8d1dt__4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(ref long i; result)\n\t{\n\t\ti = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqgt_fiwk.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpqgt_fiwk.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgt_fiwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tauto heap = new Heap!(long)(iterable);\n\treturn heap.toArray();\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp9ts71eeo.d(9): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ts71eeo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, result[i]);\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpc740qfmv.d(20): Error: undefined identifier `heap_insert`\n/tmp/tmpc740qfmv.d(25): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc740qfmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tauto heap = new Heap!(long)();\n\tforeach(i; iterable)\n\t{\n\t\theap.push(i);\n\t}\n\tauto result = new long[];\n\twhile(heap.size)\n\t{\n\t\tresult ~= heap.pop();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp2yozdj_h.d(9): Error: template instance `Heap!long` template `Heap` is not defined\n/tmp/tmp2yozdj_h.d(14): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yozdj_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap, 0, heap.length - i - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp_ta_sl7a.d(13): Error: undefined identifier `heapify`\n/tmp/tmp_ta_sl7a.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ta_sl7a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_2 = 0;\n\tlong temp_index_3 = 0;\n\tlong temp_index_4 = 0;\n\tlong temp_index_5 = 0;\n\tlong temp_index_6 = 0;\n\tlong temp_index_7 = 0;\n\tlong temp_index_8 = 0;\n\tlong temp_index_9 = 0;\n\tlong temp_index_10 = 0;\n\tlong temp_index_11 = 0;\n\tlong temp_index_12 = 0;\n\tlong temp_index_13 = 0;\n\tlong temp_index_14 = 0;\n\tlong temp_index_15 = 0;\n\tlong temp_index_16 = 0;\n\tlong temp_index_17 = 0;\n\tlong temp_index_18 = 0;\n\tlong temp_index_19 = 0;\n\tlong temp_index_20 = 0;\n\tlong temp_index_21 = 0;\n\tlong temp_index_22 = 0;\n\tlong temp_index_23 = 0;\n\tlong temp_index_24 = 0;\n\tlong temp_index_25 = 0;\n\tlong temp_index_26 = 0;\n\tlong temp_index_27 = 0;\n\tlong temp_index_28 = 0;\n\tlong temp_index_29 = 0;\n\tlong temp_index_30 = 0;\n\tlong temp_index_31 = 0;\n\tlong temp_index_32 = 0;\n\tlong temp_index_33 = 0;\n\tlong temp_index_34 = 0;\n\tlong temp_index_35 = 0;\n\tlong temp_index_36 = 0;\n\tlong temp_index_37 = 0;\n\tlong temp_index_38 = 0;\n\tlong temp_index_39 = 0;\n\tlong temp_index_40 =\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp_xvxkflz.d(56): Error: expression expected, not `unittest`\n/tmp/tmp_xvxkflz.d(57): Error: semicolon expected, not `{`\n/tmp/tmp_xvxkflz.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xvxkflz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap[heap_size] = item;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0wjqoe7p.d(17): Error: undefined identifier `heapify_up`\n/tmp/tmp0wjqoe7p.d(27): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wjqoe7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap[heap_size] = element;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpzv7pz7s1.d(17): Error: undefined identifier `heapify_up`\n/tmp/tmpzv7pz7s1.d(25): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv7pz7s1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\tresult ~= item;\n\t}\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tfor(int j = i; j < result.length; j++)\n\t\t{\n\t\t\tif(result[i] > result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp67nzu1vz.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp67nzu1vz.__unittest_L29_C1() [0x428128]\n??:? void tmp67nzu1vz.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ab5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf41]\n??:? runModuleUnitTests [0x42cead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tint i = 0;\n\tforeach(long item; iterable)\n\t{\n\t\theap[i] = item;\n\t\ti++;\n\t}\n\t\n\theapify(heap);\n\t\n\tint j = 0;\n\twhile(heap.length > 0)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[heap.length-1];\n\t\theap = heap[0..heap.length-2];\n\t\t\n\t\tsift_down(heap, 0);\n\t\tj++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmphxy9k085.d(19): Error: undefined identifier `heapify`\n/tmp/tmphxy9k085.d(28): Error: undefined identifier `sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxy9k085.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = tmp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[j])\n\t\t\t\tk = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[k])\n\t\t\t\tk = j*2+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcvrx8tre.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428936]\n??:? long[] tmpcvrx8tre.heap_sort(long[]) [0x427ec5]\n??:? void tmpcvrx8tre.__unittest_L53_C1() [0x428311]\n??:? void tmpcvrx8tre.__modtest() [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7cd]\n??:? runModuleUnitTests [0x42c739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tfor(int j = 0; j < result.length; j++)\n\t\t{\n\t\t\tif(result[i] > result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp7was16j.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmpp7was16j.__unittest_L31_C1() [0x428100]\n??:? void tmpp7was16j.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// extract elements from the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract_min();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpie2m_450.d(12): Error: undefined identifier `Heap`\n/tmp/tmpie2m_450.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie2m_450.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap = heapify(heap, 0, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4lq0fv6x.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lq0fv6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_child = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max_child])\n\t\t\t\tmax_child = j * 2;\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max_child])\n\t\t\t\tmax_child = j * 2 + 1;\n\t\t\tif(max_child == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_child];\n\t\t\theap[max_child] = temp;\n\t\t\tj = max_child;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5wswk3an.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428936]\n??:? long[] tmp5wswk3an.heap_sort(long[]) [0x427ec5]\n??:? void tmp5wswk3an.__unittest_L53_C1() [0x42830d]\n??:? void tmp5wswk3an.__modtest() [0x428604]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7cd]\n??:? runModuleUnitTests [0x42c739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop all elements from the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp_s7q2x2i.d(12): Error: undefined identifier `Heap`\n/tmp/tmp_s7q2x2i.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s7q2x2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tsorted[i] = result[i];\n\t}\n\t\n\tlong[] temp = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp[i] = result[i];\n\t}\n\t\n\tlong[] temp2 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp2[i] = result[i];\n\t}\n\t\n\tlong[] temp3 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp3[i] = result[i];\n\t}\n\t\n\tlong[] temp4 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp4[i] = result[i];\n\t}\n\t\n\tlong[] temp5 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp5[i] = result[i];\n\t}\n\t\n\tlong[] temp6 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp6[i] = result[i];\n\t}\n\t\n\tlong[] temp7 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp7[i] = result[i];\n\t}\n\t\n\tlong[] temp8 = new long[result.length];\n\tforeach(i; 0 ..\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqdb7dh6b.d(71): Error: expression expected, not `unittest`\n/tmp/tmpqdb7dh6b.d(72): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdb7dh6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size] = i;\n\t\theap_index[i] = heap_size;\n\t\t\n\t\tlong current_index = heap_size;\n\t\tlong parent_index = (long)floor(current_index / 2);\n\t\t\n\t\twhile(parent_index > 0 && heap[current_index] > heap[parent_index])\n\t\t{\n\t\t\tlong temp = heap[current_index];\n\t\t\theap[current_index] = heap[parent_index];\n\t\t\theap[parent_index] = temp;\n\t\t\t\n\t\t\theap_index[heap[current_index]] = current_index;\n\t\t\theap_index[heap[parent_index]] = parent_index;\n\t\t\t\n\t\t\tcurrent_index = parent_index;\n\t\t\tparent_index = (long)floor(current_index / 2);\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index = result_index + 1;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size = heap_size - 1;\n\t\t\n\t\theap_index[heap[1]] = 1;\n\t\t\n\t\tlong current_index = 1;\n\t\tlong left_child_index = 2 * current_index;\n\t\tlong right_child_index = 2 * current_index + 1;\n\t\t\n\t\twhile(left_child_index <= heap_size)\n\t\t{\n\t\t\tlong max_child_index = left_child_index;\n\t\t\tif(right_child_\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpadbf9hob.d(21): Error: C style cast illegal, use `cast(long)floor(current_index / 2)`\n/tmp/tmpadbf9hob.d(33): Error: C style cast illegal, use `cast(long)floor(current_index / 2)`\n/tmp/tmpadbf9hob.d(56): Error: found `unittest` when expecting `)`\n/tmp/tmpadbf9hob.d(64): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpadbf9hob.d(64): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpadbf9hob.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadbf9hob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[heap_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = 2 * i;\n\t\t\tlong right = 2 * i + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6vbikqiu.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4289ce]\n??:? long[] tmp6vbikqiu.heap_sort(long[]) [0x427ed4]\n??:? void tmp6vbikqiu.__unittest_L57_C1() [0x4283a9]\n??:? void tmp6vbikqiu.__modtest() [0x4286a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c9fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b88e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430b19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430fc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430aa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b865]\n??:? runModuleUnitTests [0x42c7d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size++] = i;\n\t\tint j = heap_size-1;\n\t\twhile(j > 0 && heap[(j-1)/2] < heap[j])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[(j-1)/2];\n\t\t\theap[(j-1)/2] = tmp;\n\t\t\tj = (j-1)/2;\n\t\t}\n\t}\n\t\n\tint result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size++] = heap[0];\n\t\theap[0] = heap[--heap_size];\n\t\tint i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tint left = 2*i+1;\n\t\t\tint right = 2*i+2;\n\t\t\tint largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = tmp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg4lkkhf_.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x428825]\n??:? void tmpg4lkkhf_.__unittest_L54_C1() [0x428344]\n??:? void tmpg4lkkhf_.__modtest() [0x4285a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c903]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ed0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b76d]\n??:? runModuleUnitTests [0x42c6d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ce8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tint i = 0;\n\tforeach(long item; iterable)\n\t{\n\t\theap[i] = item;\n\t\ti++;\n\t}\n\t\n\theapify(heap);\n\t\n\tfor(i = heap.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tsiftDown(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5easkyj0.d(17): Error: undefined identifier `heapify`\n/tmp/tmp5easkyj0.d(19): Error: cannot implicitly convert expression `heap.length - 1LU` of type `ulong` to `int`\n/tmp/tmp5easkyj0.d(25): Error: undefined identifier `siftDown`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5easkyj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++) \n\t{\n\t\tint index = i;\n\t\t\n\t\twhile (index != 0) \n\t\t{\n\t\t\tint parent = (index - 1) / 2;\n\t\t\t\n\t\t\tif (heap[index] > heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = heap.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tint index = 0;\n\t\tint leftChild = 2 * index + 1;\n\t\tint rightChild = 2 * index + 2;\n\t\t\n\t\twhile (leftChild < i) \n\t\t{\n\t\t\tint max = leftChild;\n\t\t\t\n\t\t\tif (rightChild < i) \n\t\t\t{\n\t\t\t\tif (heap[max] < heap[rightChild]) \n\t\t\t\t{\n\t\t\t\t\tmax = rightChild;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (heap[index] < heap[max]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[max];\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp6ziqv7wc.d(68): Error: found `unittest` instead of statement\n/tmp/tmp6ziqv7wc.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6ziqv7wc.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6ziqv7wc.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ziqv7wc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tint i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tint max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptjpn3bgr.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288d6]\n??:? long[] tmptjpn3bgr.heap_sort(long[]) [0x427ec3]\n??:? void tmptjpn3bgr.__unittest_L52_C1() [0x4282b1]\n??:? void tmptjpn3bgr.__modtest() [0x4285a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c903]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ed0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b76d]\n??:? runModuleUnitTests [0x42c6d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theapify(heap, iterable.length - i - 1);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpow7ibad2.d(13): Error: undefined identifier `heapify`\n/tmp/tmpow7ibad2.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow7ibad2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// build heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif (left < i && result[left] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[largest];\n\t\t\t\tresult[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpdkqkibxa.d(34): Error: cannot implicitly convert expression `iterable.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkqkibxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tint index = i;\n\t\twhile (index != 0) \n\t\t{\n\t\t\tint parent = (index - 1) / 2;\n\t\t\tif (heap[index] > heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tint index = 0;\n\t\tint leftChild = 1;\n\t\tint rightChild = 2;\n\t\t\n\t\twhile (leftChild < i) \n\t\t{\n\t\t\tif (rightChild < i && heap[index] < heap[rightChild] && heap[rightChild] >= heap[leftChild]) \n\t\t\t{\n\t\t\t\tlong temp2 = heap[index];\n\t\t\t\theap[index] = heap[rightChild];\n\t\t\t\theap[rightChild] = temp2;\n\t\t\t\tindex = rightChild;\n\t\t\t} \n\t\t\telse if (heap[index] < heap[leftChild]) \n\t\t\t{\n\t\t\t\tlong temp2 = heap[index];\n\t\t\t\theap[index] = heap[leftChild];\n\t\t\t\theap[leftChild] = temp2;\n\t\t\t\tindex = leftChild;\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpv095lfik.d(59): Error: found `unittest` instead of statement\n/tmp/tmpv095lfik.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv095lfik.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpv095lfik.d(67): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv095lfik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\t// Build the heap\n\tforeach(i; 0..result.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, result[i]);\n\t}\n\t\n\t// Sort the heap\n\tforeach(i; 0..result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmplhb3efiv.d(21): Error: undefined identifier `heap_insert`\n/tmp/tmplhb3efiv.d(27): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhb3efiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpzjl8vlbr.d(17): Error: undefined identifier `heap_insert`\n/tmp/tmpzjl8vlbr.d(22): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjl8vlbr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[j])\n\t\t\t\tk = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[k])\n\t\t\t\tk = 2*j+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[k];\n\t\t\theap[k] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpfrej15tq.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmpfrej15tq.heap_sort(long[]) [0x427ec5]\n??:? void tmpfrej15tq.__unittest_L53_C1() [0x4282d9]\n??:? void tmpfrej15tq.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tauto heap = new Heap!(long)();\n\tforeach(i; iterable)\n\t\theap.push(i);\n\t\n\tlong[] result;\n\twhile(heap.length)\n\t\tresult ~= heap.pop();\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpg1mz7jwg.d(9): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1mz7jwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = j*2;\n\t\t\tlong right = j*2 + 1;\n\t\t\tlong smallest = j;\n\t\t\tif(left <= heap_size && heap[left] < heap[smallest])\n\t\t\t\tsmallest = left;\n\t\t\tif(right <= heap_size && heap[right] < heap[smallest])\n\t\t\t\tsmallest = right;\n\t\t\tif(smallest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[smallest];\n\t\t\t\theap[smallest] = temp;\n\t\t\t\tj = smallest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7kssavlf.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428966]\n??:? long[] tmp7kssavlf.heap_sort(long[]) [0x427ecb]\n??:? void tmp7kssavlf.__unittest_L57_C1() [0x42833d]\n??:? void tmp7kssavlf.__modtest() [0x428634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c993]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b826]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7fd]\n??:? runModuleUnitTests [0x42c769]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tlong n = heap_size;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = 2 * j;\n\t\t\tlong right = 2 * j + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjgzbx3hy.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42888d]\n??:? void tmpjgzbx3hy.__unittest_L62_C1() [0x4283a8]\n??:? void tmpjgzbx3hy.__modtest() [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c96b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7d5]\n??:? runModuleUnitTests [0x42c741]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d50]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1665517227,
      "stdout": "",
      "stderr": "/tmp/tmpjk1r5td_.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmpjk1r5td_.d(12): Error: undefined identifier `heapify`\n/tmp/tmpjk1r5td_.d(19): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk1r5td_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult.length++;\n\t\tresult[$-1] = i;\n\t}\n\t\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, result.length);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpn00iae_u.d(19): Error: undefined identifier `heapify`\n/tmp/tmpn00iae_u.d(24): Error: undefined identifier `swap`\n/tmp/tmpn00iae_u.d(25): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn00iae_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the iterable to the result\n\tforeach(i, v; iterable)\n\t\tresult[i] = v;\n\t\n\t// create the heap\n\tHeap heap = new Heap(result);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\treturn heap.get_sorted();\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmppd1360mu.d(16): Error: undefined identifier `Heap`\n/tmp/tmppd1360mu.d(16): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd1360mu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0 && heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < iterable.length - i - 1)\n\t\t{\n\t\t\tif(child + 1 < iterable.length - i - 1 && heap[child + 1] > heap[child])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\t\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphwmm18qa.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x428905]\n??:? void tmphwmm18qa.__unittest_L67_C1() [0x428420]\n??:? void tmphwmm18qa.__modtest() [0x428684]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c9e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b876]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430b01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430fb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b84d]\n??:? runModuleUnitTests [0x42c7b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dc8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = heap_size / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmppdnyzhp7.d(21): Error: undefined identifier `heapify`\n/tmp/tmppdnyzhp7.d(29): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdnyzhp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// build a heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tif (left >= i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (right >= i)\n\t\t\t{\n\t\t\t\tif (result[j] < result[left])\n\t\t\t\t{\n\t\t\t\t\tlong temp2 = result[j];\n\t\t\t\t\tresult[j] = result[left];\n\t\t\t\t\tresult[left] = temp2;\n\t\t\t\t\tj = left;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[left] > result[right])\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[left\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmph6enci8g.d(68): Error: found `unittest` when expecting `,`\n/tmp/tmph6enci8g.d(76): Error: found `void` when expecting `,`\n/tmp/tmph6enci8g.d(76): Error: found `{` when expecting `,`\n/tmp/tmph6enci8g.d(76): Error: expression expected, not `}`\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `,`\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `]`\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `)`\n/tmp/tmph6enci8g.d(76): Error: found `End of File` instead of statement\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph6enci8g.d(76): Error: found `End of File` when expecting `}` following compound stateme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4h8j6q70.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp4h8j6q70.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4h8j6q70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (iterable[current] > iterable[parent])\n\t\t\t{\n\t\t\t\tlong temp = iterable[current];\n\t\t\t\titerable[current] = iterable[parent];\n\t\t\t\titerable[parent] = temp;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = iterable[0];\n\t\t\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = 0;\n\t\t\n\t\tint current = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tint left = 2 * current + 1;\n\t\t\tint right = 2 * current + 2;\n\t\t\tint largest = current;\n\t\t\t\n\t\t\tif (left < i && iterable[left] > iterable[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif (right < i && iterable[right] > iterable[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif (largest != current)\n\t\t\t{\n\t\t\t\tlong temp = iterable[current];\n\t\t\t\titerable[current] = iterable[largest];\n\t\t\t\titerable[largest] = temp;\n\t\t\t\tcurrent = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpuhmksssl.d(29): Error: cannot implicitly convert expression `iterable.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhmksssl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] list = iterable.dup;\n\tlong[] heap = new long[list.length];\n\tlong heap_size = 0;\n\t\n\tvoid heapify(long[] list, long i) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tlong largest = i;\n\t\t\n\t\tif (left < heap_size && list[left] > list[largest]) \n\t\t{\n\t\t\tlargest = left;\n\t\t}\n\t\t\n\t\tif (right < heap_size && list[right] > list[largest]) \n\t\t{\n\t\t\tlargest = right;\n\t\t}\n\t\t\n\t\tif (largest != i) \n\t\t{\n\t\t\tlong temp = list[i];\n\t\t\tlist[i] = list[largest];\n\t\t\tlist[largest] = temp;\n\t\t\t\n\t\t\theapify(list, largest);\n\t\t}\n\t}\n\t\n\tvoid build_heap(long[] list) \n\t{\n\t\theap_size = list.length;\n\t\t\n\t\tfor (long i = floor(list.length / 2); i >= 0; i--) \n\t\t{\n\t\t\theapify(list, i);\n\t\t}\n\t}\n\t\n\tvoid sort(long[] list) \n\t{\n\t\tbuild_heap(list);\n\t\t\n\t\tfor (long i = list.length - 1; i >= 0; i--) \n\t\t{\n\t\t\tlong temp = list[0];\n\t\t\tlist[0] = list[i];\n\t\t\tlist[i] = temp;\n\t\t\t\n\t\t\theap_size--;\n\t\t\theapify(list, 0);\n\t\t}\n\t}\n\t\n\tsort(list);\n\treturn list;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps9q_e1et.d(43): Error: `std.math.floor` called with argument types `(ulong)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9q_e1et.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = item;\n\t\tlong i = heap.length - 1;\n\t\twhile(i > 0 && heap[(i - 1) / 2] < heap[i])\n\t\t{\n\t\t\tlong tmp = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = heap[i];\n\t\t\theap[i] = tmp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\tlong[] result = new long[heap.length];\n\tlong i = 0;\n\twhile(heap.length > 0)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong j = 0;\n\t\twhile(2 * j + 1 < heap.length)\n\t\t{\n\t\t\tlong k = 2 * j + 1;\n\t\t\tif(k + 1 < heap.length && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz1igpk8z.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4288e5]\n??:? void tmpz1igpk8z.__unittest_L51_C1() [0x428400]\n??:? void tmpz1igpk8z.__modtest() [0x428664]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42da93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431e5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43230c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431de9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8fd]\n??:? runModuleUnitTests [0x42d869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428da8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i * 2;\n\t\t\tlong right = i * 2 + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result[1..result_size];\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvazyb8x1.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42898e]\n??:? long[] tmpvazyb8x1.heap_sort(long[]) [0x427ecb]\n??:? void tmpvazyb8x1.__unittest_L65_C1() [0x428365]\n??:? void tmpvazyb8x1.__modtest() [0x42865c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c9bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b84e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b825]\n??:? runModuleUnitTests [0x42c791]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t\tj = j/2;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[max];\n\t\t\t\theap[max] = temp;\n\t\t\t\tj = max;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpgwo3z7ni.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42890e]\n??:? long[] tmpgwo3z7ni.heap_sort(long[]) [0x427ec5]\n??:? void tmpgwo3z7ni.__unittest_L60_C1() [0x4282e9]\n??:? void tmpgwo3z7ni.__modtest() [0x4285e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c93b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a5]\n??:? runModuleUnitTests [0x42c711]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\tint i;\n\tfor (i = n/2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (i = n-1; i >= 0; i--)\n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp7x050rgx.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmp7x050rgx.d(12): Error: undefined identifier `heapify`\n/tmp/tmp7x050rgx.d(18): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7x050rgx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create the heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[++heap[0]] = i;\n\t\t\n\t\tlong j = heap[0];\n\t\twhile(j > 1 && heap[j] < heap[j / 2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = tmp;\n\t\t\t\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// Pop the heap\n\tlong i = 0;\n\twhile(heap[0] > 0)\n\t{\n\t\tresult[i++] = heap[1];\n\t\t\n\t\theap[1] = heap[heap[0]--];\n\t\t\n\t\tlong j = 1;\n\t\twhile(true)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j * 2 <= heap[0] && heap[j * 2] < heap[j])\n\t\t\t\tk = j * 2;\n\t\t\tif(j * 2 + 1 <= heap[0] && heap[j * 2 + 1] < heap[k])\n\t\t\t\tk = j * 2 + 1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\t\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(long i = floor(heap.length / 2); i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theap = heapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpxydiw5n2.d(15): Error: `std.math.floor` called with argument types `(ulong)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float x)`\n/tmp/tmpxydiw5n2.d(17): Error: undefined identifier `heapify`\n/tmp/tmpxydiw5n2.d(26): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxydiw5n2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach (long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tint i = 0;\n\twhile (heap_size > 0)\n\t{\n\t\tresult[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp59tyn5w9.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp59tyn5w9.d(21): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59tyn5w9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[0];\n\tforeach(long i; iterable)\n\t{\n\t\theap.insert(i);\n\t}\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpg_5ykmwx.d(12): Error: no property `insert` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_5ykmwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length + 1];\n\t\n\tint heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpai1_jsqh.d(17): Error: undefined identifier `heap_insert`\n/tmp/tmpai1_jsqh.d(22): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpai1_jsqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1a4zjiou.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmp1a4zjiou.__unittest_L18_C1() [0x427fe0]\n??:? void tmp1a4zjiou.__modtest() [0x428244]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bdae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430885]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd85]\n??:? runModuleUnitTests [0x42ccf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428914]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tint i = 0;\n\tforeach(long e; iterable)\n\t{\n\t\tresult[i] = e;\n\t\ti++;\n\t}\n\t\n\tint length = result.length;\n\t\n\tfor(int i = length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, length);\n\t}\n\t\n\tfor(int i = length - 1; i > 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp8m1nsgzw.d(17): Error: cannot implicitly convert expression `result.length` of type `ulong` to `int`\n/tmp/tmp8m1nsgzw.d(19): Error: variable `i` is shadowing variable `tmp8m1nsgzw.heap_sort.i`\n/tmp/tmp8m1nsgzw.d(21): Error: undefined identifier `heapify`\n/tmp/tmp8m1nsgzw.d(24): Error: variable `i` is shadowing variable `tmp8m1nsgzw.heap_sort.i`\n/tmp/tmp8m1nsgzw.d(26): Error: undefined identifier `swap`\n/tmp/tmp8m1nsgzw.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m1nsgzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left_child = i*2;\n\t\t\tlong right_child = i*2 + 1;\n\t\t\tlong max_child = left_child;\n\t\t\tif(right_child <= heap_size && heap[right_child] > heap[left_child])\n\t\t\t{\n\t\t\t\tmax_child = right_child;\n\t\t\t}\n\t\t\tif(max_child <= heap_size && heap[max_child] > heap[i])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[max_child];\n\t\t\t\theap[max_child] = temp;\n\t\t\t\ti = max_child;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpswpnntdj.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428916]\n??:? long[] tmpswpnntdj.heap_sort(long[]) [0x427ecb]\n??:? void tmpswpnntdj.__unittest_L61_C1() [0x4282f1]\n??:? void tmpswpnntdj.__modtest() [0x4285e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c943]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7ad]\n??:? runModuleUnitTests [0x42c719]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong index = i;\n\t\twhile(index > 0)\n\t\t{\n\t\t\tlong parent = (index - 1) / 2;\n\t\t\tif(heap[parent] < heap[index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t}\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong end = result.length - i - 1;\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[end];\n\t\theap[end] = temp;\n\t\t\n\t\tlong index = 0;\n\t\twhile(index < end)\n\t\t{\n\t\t\tlong left = 2 * index + 1;\n\t\t\tlong right = 2 * index + 2;\n\t\t\tlong largest = index;\n\t\t\tif(left < end && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < end && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t\tindex = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5xw1a8x3.d(68): Error: found `unittest` instead of statement\n/tmp/tmp5xw1a8x3.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5xw1a8x3.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xw1a8x3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = i;\n\t\tlong current = heap.length - 1;\n\t\twhile(current > 0)\n\t\t{\n\t\t\tlong parent = (current - 1) / 2;\n\t\t\tif(heap[current] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\tlong[] result = new long[heap.length];\n\tforeach(long i; 0 .. heap.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong current = 0;\n\t\twhile(current < heap.length)\n\t\t{\n\t\t\tlong left = current * 2 + 1;\n\t\t\tlong right = current * 2 + 2;\n\t\t\tlong largest = current;\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != current)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[current];\n\t\t\t\theap[current] = temp;\n\t\t\t\tcurrent = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6dmdl0ob.d(70): unittest failure\n----------------\n??:? _d_unittestp [0x4289d5]\n??:? void tmp6dmdl0ob.__unittest_L66_C1() [0x4284f4]\n??:? void tmp6dmdl0ob.__modtest() [0x428758]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42db83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ca16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431f4d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4323fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ed9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9ed]\n??:? runModuleUnitTests [0x42d959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e98]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] < heap[j / 2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j / 2];\n\t\t\t\theap[j / 2] = temp;\n\t\t\t\tj /= 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] < heap[j])\n\t\t\t{\n\t\t\t\tk = j * 2;\n\t\t\t}\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] < heap[k])\n\t\t\t{\n\t\t\t\tk = j * 2 + 1;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqqr0a2c5.d(69): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqr0a2c5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\twhile(index < iterable.length)\n\t{\n\t\tresult[index] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpn3rkl02c.d(69): Error: found `unittest` instead of statement\n/tmp/tmpn3rkl02c.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn3rkl02c.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn3rkl02c.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3rkl02c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[0];\n\tforeach(long i; iterable) \n\t{\n\t\theap ~= i;\n\t\theap = heap_push(heap, i);\n\t}\n\t\n\tlong[] result = new long[0];\n\twhile(heap.length > 0) \n\t{\n\t\tresult ~= heap_pop(heap);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpuga8t423.d(13): Error: undefined identifier `heap_push`\n/tmp/tmpuga8t423.d(19): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuga8t423.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp9752hg4r.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmp9752hg4r.heap_sort(long[]) [0x427ec5]\n??:? void tmp9752hg4r.__unittest_L53_C1() [0x4282d9]\n??:? void tmp9752hg4r.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1a4zjiou.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmp1a4zjiou.__unittest_L18_C1() [0x427fe0]\n??:? void tmp1a4zjiou.__modtest() [0x428244]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bdae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430885]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd85]\n??:? runModuleUnitTests [0x42ccf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428914]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tlong parent = j / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = left + 1;\n\t\t\tlong max = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[max])\n\t\t\t\tmax = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[max])\n\t\t\t\tmax = right;\n\t\t\tif(max != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[max];\n\t\t\t\theap[max] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = max;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpytoh4bim.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42890e]\n??:? long[] tmpytoh4bim.heap_sort(long[]) [0x427ecb]\n??:? void tmpytoh4bim.__unittest_L64_C1() [0x4282e9]\n??:? void tmpytoh4bim.__modtest() [0x4285e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c93b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a5]\n??:? runModuleUnitTests [0x42c711]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz27jxiu3.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmpz27jxiu3.heap_sort(long[]) [0x427ec5]\n??:? void tmpz27jxiu3.__unittest_L52_C1() [0x4282d9]\n??:? void tmpz27jxiu3.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length -= 1;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpg_4146xw.d(13): Error: undefined identifier `heapify`\n/tmp/tmpg_4146xw.d(22): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_4146xw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj = j / 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j * 2 <= heap_size)\n\t\t{\n\t\t\tlong k = j * 2;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo0nz3jge.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288ce]\n??:? long[] tmpo0nz3jge.heap_sort(long[]) [0x427ec5]\n??:? void tmpo0nz3jge.__unittest_L55_C1() [0x4282a5]\n??:? void tmpo0nz3jge.__modtest() [0x42859c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c8fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b78e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ec8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b765]\n??:? runModuleUnitTests [0x42c6d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp6c7h2le3.d(17): Error: `std.math.floor` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float x)`\n/tmp/tmp6c7h2le3.d(19): Error: undefined identifier `heapify`\n/tmp/tmp6c7h2le3.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c7h2le3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\t\n\t// build heap\n\tforeach(i; 0 .. heap.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tchild = parent;\n\t\t\t\tparent = (child - 1) / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort heap\n\tlong sorted_index = 0;\n\twhile(sorted_index < sorted.length)\n\t{\n\t\tsorted[sorted_index] = heap[0];\n\t\theap[0] = heap[heap.length - sorted_index - 1];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\twhile(child < heap.length - sorted_index)\n\t\t{\n\t\t\tif(child + 1 < heap.length - sorted_index && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tparent = child;\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa55q9lea.d(66): Error: found `unittest` instead of statement\n/tmp/tmpa55q9lea.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpa55q9lea.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpa55q9lea.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa55q9lea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\t\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\t\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\t\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\t\n\t\t\ti = max_index;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp15xcswl3.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmp15xcswl3.heap_sort(long[]) [0x427ec5]\n??:? void tmp15xcswl3.__unittest_L61_C1() [0x4282d9]\n??:? void tmp15xcswl3.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\t\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\theap[i + 1] = iterable[i];\n\t\theap[0]++;\n\t\t\n\t\t// sift up\n\t\tlong j = i + 1;\n\t\twhile(j > 1 && heap[j] > heap[j / 2]) \n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = tmp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// sort\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap[0]];\n\t\theap[0]--;\n\t\t\n\t\t// sift down\n\t\tlong j = 1;\n\t\twhile(j * 2 <= heap[0]) \n\t\t{\n\t\t\tlong k = j * 2;\n\t\t\tif(k + 1 <= heap[0] && heap[k + 1] > heap[k]) \n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[j] < heap[k]) \n\t\t\t{\n\t\t\t\tlong tmp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = tmp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp62fyyo3n.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp62fyyo3n.__unittest_L64_C1() [0x42844c]\n??:? void tmp62fyyo3n.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b89e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430b29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430fd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430ab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b875]\n??:? runModuleUnitTests [0x42c7e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428df0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96zjxp5n.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42895e]\n??:? long[] tmp96zjxp5n.heap_sort(long[]) [0x427ecb]\n??:? void tmp96zjxp5n.__unittest_L51_C1() [0x428339]\n??:? void tmp96zjxp5n.__modtest() [0x428630]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c98b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430aa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f5]\n??:? runModuleUnitTests [0x42c761]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpbzehvgh7.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpbzehvgh7.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbzehvgh7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t\tresult[i] = iterable[i];\n\t\n\t// build max heap\n\tforeach(i; 0 .. result.length)\n\t\theapify(result, i);\n\t\n\t// sort\n\tforeach(i; result.length .. 0)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpd6q9njmi.d(15): Error: undefined identifier `heapify`\n/tmp/tmpd6q9njmi.d(23): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6q9njmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\tint i = n / 2;\n\tint parent;\n\tint child;\n\tlong t;\n\t\n\tfor (;;) {\n\t\tif (i > 0) {\n\t\t\ti--;\n\t\t\tt = iterable[i];\n\t\t} else {\n\t\t\tn--;\n\t\t\tif (n == 0)\n\t\t\t\treturn iterable;\n\t\t\tt = iterable[n];\n\t\t\titerable[n] = iterable[0];\n\t\t}\n\t\t\n\t\tparent = i;\n\t\tchild = i * 2 + 1;\n\t\twhile (child < n) {\n\t\t\tif (child + 1 < n  &&  iterable[child + 1] > iterable[child])\n\t\t\t\tchild++;\n\t\t\tif (iterable[child] > t) {\n\t\t\t\titerable[parent] = iterable[child];\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titerable[parent] = t;\n\t}\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpjx_sc75_.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjx_sc75_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable.length);\n\t\n\t// Insert all elements into the heap\n\tforeach(long element; iterable)\n\t{\n\t\theap.insert(element);\n\t}\n\t\n\t// Extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpybkldjdq.d(12): Error: undefined identifier `Heap`\n/tmp/tmpybkldjdq.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybkldjdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length];\n\t\n\t// insert each element into the heap\n\tforeach(long element; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = element;\n\t\t\n\t\t// sift up\n\t\tlong index = heap.length - 1;\n\t\twhile(index > 0)\n\t\t{\n\t\t\tlong parent = (index - 1) / 2;\n\t\t\tif(heap[parent] < heap[index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t\tindex = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// remove each element from the heap\n\tforeach(long element; iterable)\n\t{\n\t\tresult[result.length - 1] = heap[0];\n\t\tresult.length--;\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\t\n\t\t// sift down\n\t\tlong index = 0;\n\t\twhile(index < heap.length)\n\t\t{\n\t\t\tlong left = index * 2 + 1;\n\t\t\tlong right = index * 2 + 2;\n\t\t\t\n\t\t\tlong max = index;\n\t\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(max != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[max];\n\t\t\t\theap[max\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpvzmu7cmc.d(69): Error: found `unittest` when expecting `,`\n/tmp/tmpvzmu7cmc.d(77): Error: found `void` when expecting `,`\n/tmp/tmpvzmu7cmc.d(77): Error: found `{` when expecting `,`\n/tmp/tmpvzmu7cmc.d(77): Error: expression expected, not `}`\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `,`\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `]`\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvzmu7cmc.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzmu7cmc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2*j <= heap_size)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k+1 <= heap_size && heap[k+1] < heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] <= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8la46x1x.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288d6]\n??:? long[] tmp8la46x1x.heap_sort(long[]) [0x427ec5]\n??:? void tmp8la46x1x.__unittest_L51_C1() [0x4282ad]\n??:? void tmp8la46x1x.__modtest() [0x4285a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c903]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ed0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b76d]\n??:? runModuleUnitTests [0x42c6d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the heap to the result\n\tforeach(i, v; heap.heap)\n\t\tresult[i] = v;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp8qkvah7o.d(12): Error: undefined identifier `Heap`\n/tmp/tmp8qkvah7o.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qkvah7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length];\n\t\n\t// copy the iterable to the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\t// heapify the heap\n\theapify(heap);\n\t\n\t// sort the heap\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpfh2fuk0t.d(21): Error: undefined identifier `heapify`\n/tmp/tmpfh2fuk0t.d(24): Error: cannot implicitly convert expression `iterable.length - 1LU` of type `ulong` to `int`\n/tmp/tmpfh2fuk0t.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfh2fuk0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = floor(heap_size/2); i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap_size);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, 0, heap_size);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcoqqx53w.d(19): Error: `std.math.floor` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float x)`\n/tmp/tmpcoqqx53w.d(21): Error: undefined identifier `heapify`\n/tmp/tmpcoqqx53w.d(29): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoqqx53w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0) \n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent]) \n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = result.length - 1; i > 0; i--) \n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\twhile (true) \n\t\t{\n\t\t\tint left = 2 * current + 1;\n\t\t\tint right = 2 * current + 2;\n\t\t\tint largest = current;\n\t\t\tif (left < i && result[left] > result[largest]) \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[largest]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != current) \n\t\t\t{\n\t\t\t\tlong temp1 = result[largest];\n\t\t\t\tresult[largest] = result[current];\n\t\t\t\tresult[current] = temp1;\n\t\t\t\tcurrent = largest;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpd43u4whr.d(30): Error: cannot implicitly convert expression `result.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd43u4whr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzml9rht1.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428936]\n??:? long[] tmpzml9rht1.heap_sort(long[]) [0x427ec5]\n??:? void tmpzml9rht1.__unittest_L52_C1() [0x42830d]\n??:? void tmpzml9rht1.__modtest() [0x428604]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7cd]\n??:? runModuleUnitTests [0x42c739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\t// Insertion\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = iterable[i];\n\t\tlong j = heap_size;\n\t\twhile (j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// Deletion\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile (2 * j <= heap_size)\n\t\t{\n\t\t\tlong k = 2 * j;\n\t\t\tif (k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp06ntjcmz.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmp06ntjcmz.heap_sort(long[]) [0x427e99]\n??:? void tmp06ntjcmz.__unittest_L55_C1() [0x4282d5]\n??:? void tmp06ntjcmz.__modtest() [0x4285cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = item;\n\t\t\n\t\tlong i = heap.length - 1;\n\t\t\n\t\twhile(i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\t\n\t\t\tif(heap[parent] < heap[i])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[i];\n\t\t\t\theap[i] = temp;\n\t\t\t\t\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\t\n\twhile(heap.length > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\t\n\t\tlong i = 0;\n\t\t\n\t\twhile(i < heap.length)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\t\n\t\t\tlong largest = i;\n\t\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[i];\n\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp2xz_7_gx.d(72): Error: found `unittest` instead of statement\n/tmp/tmp2xz_7_gx.d(80): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2xz_7_gx.d(80): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2xz_7_gx.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xz_7_gx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable) \n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpiormuhxa.d(13): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiormuhxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpn80syn00.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpn80syn00.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn80syn00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Copy the array\n\tforeach(i, v; iterable)\n\t\tresult[i] = v;\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t\theapify(result, result.length, i);\n\t\n\t// Extract elements from the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// Move current root to end\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// Call max heapify on the reduced heap\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpaa8bxbik.d(17): Error: undefined identifier `heapify`\n/tmp/tmpaa8bxbik.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaa8bxbik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, result.length);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp2fi26mt4.d(17): Error: undefined identifier `heapify`\n/tmp/tmp2fi26mt4.d(22): Error: undefined identifier `swap`\n/tmp/tmp2fi26mt4.d(23): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fi26mt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = heap_size/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap_size);\n\t}\n\t\n\tfor(long i = heap_size-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpghkt4eyn.d(21): Error: undefined identifier `heapify`\n/tmp/tmpghkt4eyn.d(29): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghkt4eyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwrecgqf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmpbwrecgqf.__unittest_L18_C1() [0x428008]\n??:? void tmpbwrecgqf.__modtest() [0x42826c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b45e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430675]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b435]\n??:? runModuleUnitTests [0x42c3a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, item, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpyi63l5tz.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpyi63l5tz.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi63l5tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpebtjrn1q.d(16): Error: cannot implicitly convert expression `result.length / 2LU - 1LU` of type `ulong` to `int`\n/tmp/tmpebtjrn1q.d(18): Error: undefined identifier `heapify`\n/tmp/tmpebtjrn1q.d(21): Error: cannot implicitly convert expression `result.length - 1LU` of type `ulong` to `int`\n/tmp/tmpebtjrn1q.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebtjrn1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(ref long i; result)\n\t{\n\t\ti = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp_sze3gvd.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp_sze3gvd.d(20): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sze3gvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpag9frh8z.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmpag9frh8z.heap_sort(long[]) [0x427ec5]\n??:? void tmpag9frh8z.__unittest_L52_C1() [0x4282d9]\n??:? void tmpag9frh8z.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpv_wivfrv.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpv_wivfrv.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_wivfrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1a4zjiou.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmp1a4zjiou.__unittest_L18_C1() [0x427fe0]\n??:? void tmp1a4zjiou.__modtest() [0x428244]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bdae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430885]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd85]\n??:? runModuleUnitTests [0x42ccf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428914]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpjewa56jg.d(20): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjewa56jg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(long i; 0..result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpwjb9cyyv.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpwjb9cyyv.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjb9cyyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong current = heap_size;\n\t\twhile(current > 1 && heap[current] > heap[current / 2])\n\t\t{\n\t\t\tlong temp = heap[current / 2];\n\t\t\theap[current / 2] = heap[current];\n\t\t\theap[current] = temp;\n\t\t\tcurrent /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong current = 1;\n\t\twhile(current * 2 <= heap_size)\n\t\t{\n\t\t\tlong child = current * 2;\n\t\t\tif(child + 1 <= heap_size && heap[child + 1] > heap[child])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[current] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = child;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0au0pmwi.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428906]\n??:? long[] tmp0au0pmwi.heap_sort(long[]) [0x427ec5]\n??:? void tmp0au0pmwi.__unittest_L57_C1() [0x4282e1]\n??:? void tmp0au0pmwi.__modtest() [0x4285d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c933]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b79d]\n??:? runModuleUnitTests [0x42c709]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpv_wivfrv.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpv_wivfrv.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_wivfrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tfor(int i = 0; i < iterable.length; i++)\n\t\tresult[i] = iterable[i];\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tint j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tint k = (j - 1) / 2;\n\t\t\tif(result[k] < result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i = result.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tint k = 2 * j + 1;\n\t\t\tif(k >= i)\n\t\t\t\tbreak;\n\t\t\tif(k + 1 < i && result[k] < result[k + 1])\n\t\t\t\tk++;\n\t\t\tif(result[j] < result[k])\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[k];\n\t\t\t\tresult[k] = temp2;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpgf_sv5p4.d(31): Error: cannot implicitly convert expression `result.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf_sv5p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap[heap_size] = result[i];\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long i; result)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpmrpjyne7.d(23): Error: undefined identifier `heapify_up`\n/tmp/tmpmrpjyne7.d(31): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrpjyne7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tint n = iterable.length;\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\t\n\t\theapify(iterable, i, 0);\n\t}\n\t\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpne6k7hfs.d(9): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmpne6k7hfs.d(12): Error: undefined identifier `heapify`\n/tmp/tmpne6k7hfs.d(20): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpne6k7hfs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tint i = 0;\n\tforeach(elem; iterable)\n\t{\n\t\tresult[i] = elem;\n\t\ti++;\n\t}\n\t\n\tint n = result.length;\n\t\n\tfor(int i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor(int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpxwuq23o1.d(17): Error: cannot implicitly convert expression `result.length` of type `ulong` to `int`\n/tmp/tmpxwuq23o1.d(19): Error: variable `i` is shadowing variable `tmpxwuq23o1.heap_sort.i`\n/tmp/tmpxwuq23o1.d(21): Error: undefined identifier `heapify`\n/tmp/tmpxwuq23o1.d(24): Error: variable `i` is shadowing variable `tmpxwuq23o1.heap_sort.i`\n/tmp/tmpxwuq23o1.d(30): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwuq23o1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = tmp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i*2 <= heap_size)\n\t\t{\n\t\t\tlong j = i*2;\n\t\t\tif(j+1 <= heap_size && heap[j+1] > heap[j])\n\t\t\t\tj++;\n\t\t\tif(heap[i] >= heap[j])\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = tmp;\n\t\t\ti = j;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmposb5kyks.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428906]\n??:? long[] tmposb5kyks.heap_sort(long[]) [0x427ec5]\n??:? void tmposb5kyks.__unittest_L51_C1() [0x4282dd]\n??:? void tmposb5kyks.__modtest() [0x4285d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c933]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b79d]\n??:? runModuleUnitTests [0x42c709]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap.length - 1 - i)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\t\n\t\t\tif(left < heap.length - 1 - i && right < heap.length - 1 - i)\n\t\t\t{\n\t\t\t\tif(heap[left] > heap[right])\n\t\t\t\t{\n\t\t\t\t\tif(heap[left] > heap[j])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\tj = left;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(heap[right] > heap[j])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[right];\n\t\t\t\t\t\theap[right] = temp;\n\t\t\t\t\t\tj = right;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmphksw5ym1.d(60): Error: found `unittest` instead of statement\n/tmp/tmphksw5ym1.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphksw5ym1.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphksw5ym1.d(68): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphksw5ym1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tint heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tint i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tint i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tint max = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j * 2;\n\t\t\t}\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j * 2 + 1;\n\t\t\t}\n\t\t\tif(max == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw8t3p5d7.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428825]\n??:? void tmpw8t3p5d7.__unittest_L58_C1() [0x428344]\n??:? void tmpw8t3p5d7.__modtest() [0x4285a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c903]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ed0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b76d]\n??:? runModuleUnitTests [0x42c6d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ce8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable) \n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i / 2]) \n\t\t{\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = tmp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0) \n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size) \n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2 * j <= heap_size && heap[2 * j] < heap[k]) \n\t\t\t{\n\t\t\t\tk = 2 * j;\n\t\t\t}\n\t\t\tif(2 * j + 1 <= heap_size && heap[2 * j + 1] < heap[k]) \n\t\t\t{\n\t\t\t\tk = 2 * j + 1;\n\t\t\t}\n\t\t\tif(k == j) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(2*i <= heap_size)\n\t\t{\n\t\t\tlong j = 2*i;\n\t\t\tif(j < heap_size && heap[j] < heap[j+1])\n\t\t\t\tj++;\n\t\t\tif(heap[i] >= heap[j])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\ti = j;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1uoew6o9.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428916]\n??:? long[] tmp1uoew6o9.heap_sort(long[]) [0x427ec5]\n??:? void tmp1uoew6o9.__unittest_L52_C1() [0x4282ed]\n??:? void tmp1uoew6o9.__modtest() [0x4285e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c943]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7ad]\n??:? runModuleUnitTests [0x42c719]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tlong n = result.length;\n\t\n\tfor(long i = n/2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp37be204t.d(19): Error: undefined identifier `heapify`\n/tmp/tmp37be204t.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37be204t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp57c7ycyf.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp57c7ycyf.d(19): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57c7ycyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpznl4w6h5.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428906]\n??:? long[] tmpznl4w6h5.heap_sort(long[]) [0x427ec5]\n??:? void tmpznl4w6h5.__unittest_L54_C1() [0x4282dd]\n??:? void tmpznl4w6h5.__modtest() [0x4285d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c933]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b79d]\n??:? runModuleUnitTests [0x42c709]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tauto n = iterable.length;\n\tauto heap = new long[n];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\titerable[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theapify(heap[0 .. n - i - 1], 0);\n\t}\n\t\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp1ln8rhua.d(14): Error: undefined identifier `heapify`\n/tmp/tmp1ln8rhua.d(21): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ln8rhua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = result[i];\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tforeach(long i; result)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2;\n\t\t\t}\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2+1;\n\t\t\t}\n\t\t\tif(max == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmps1ygfs7p.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428a9e]\n??:? long[] tmps1ygfs7p.heap_sort(long[]) [0x427fa6]\n??:? void tmps1ygfs7p.__unittest_L63_C1() [0x428479]\n??:? void tmps1ygfs7p.__modtest() [0x428770]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430be9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430b75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b935]\n??:? runModuleUnitTests [0x42c8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp74xbvf09.d(19): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74xbvf09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpseav9u0c.d(14): Error: undefined identifier `heap_insert`\n/tmp/tmpseav9u0c.d(18): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseav9u0c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(int i, long item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tforeach(int i; 0 .. iterable.length)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\tforeach(int i; iterable.length .. 0)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp3z0izi4e.d(15): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\n/tmp/tmp3z0izi4e.d(20): Error: cannot implicitly convert expression `iterable.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z0izi4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[item] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpl1cz_7p6.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpl1cz_7p6.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1cz_7p6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(long i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp450wxf70.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmp450wxf70.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp450wxf70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..heap.length)\n\t{\n\t\tlong left = 2*i+1;\n\t\tlong right = 2*i+2;\n\t\tlong max = i;\n\t\t\n\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t{\n\t\t\tmax = left;\n\t\t}\n\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t{\n\t\t\tmax = right;\n\t\t}\n\t\tif(max != i)\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max];\n\t\t\theap[max] = temp;\n\t\t}\n\t}\n\t\n\tlong[] sorted = new long[heap.length];\n\tforeach(long i; 0..heap.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length-i-1];\n\t\theap[heap.length-i-1] = 0;\n\t\t\n\t\tforeach(long j; 0..heap.length)\n\t\t{\n\t\t\tlong left = 2*j+1;\n\t\t\tlong right = 2*j+2;\n\t\t\tlong max = j;\n\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\tif(max != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[max];\n\t\t\t\theap[max] = temp;\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpgr_pww1b.d(63): Error: found `unittest` instead of statement\n/tmp/tmpgr_pww1b.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgr_pww1b.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgr_pww1b.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgr_pww1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_index_reverse = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_reverse = 0;\n\tlong parent = 0;\n\tlong left = 0;\n\tlong right = 0;\n\tlong largest = 0;\n\tlong index = 0;\n\tlong index_reverse = 0;\n\t\n\tfor (i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t\theap_index[i] = i;\n\t\theap_index_reverse[i] = i;\n\t}\n\t\n\theap_size = iterable.length;\n\t\n\tfor (i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\tparent = i;\n\t\ttemp = heap[i];\n\t\ttemp_index = heap_index[i];\n\t\ttemp_index_reverse = heap_index_reverse[i];\n\t\t\n\t\twhile (parent <= floor(heap_size / 2) - 1)\n\t\t{\n\t\t\tleft = 2 * parent + 1;\n\t\t\tright = 2 * parent + 2;\n\t\t\t\n\t\t\tif (left < heap_size && heap[left] > temp)\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlargest = parent;\n\t\t\t}\n\t\t\t\n\t\t\tif (right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif (largest != parent)\n\t\t\t{\n\t\t\t\theap[parent] = heap[largest];\n\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpp763l4no.d(65): Error: found `unittest` instead of statement\n/tmp/tmpp763l4no.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp763l4no.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp763l4no.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp763l4no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (parent - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = 0;\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < iterable.length - i)\n\t\t{\n\t\t\tif(child + 1 < iterable.length - i && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tparent = child;\n\t\t\tchild = parent * 2 + 1;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2 * j <= heap_size)\n\t\t{\n\t\t\tlong k = 2 * j;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8nrz7htz.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x428936]\n??:? long[] tmp8nrz7htz.heap_sort(long[]) [0x427ecb]\n??:? void tmp8nrz7htz.__unittest_L49_C1() [0x42830d]\n??:? void tmp8nrz7htz.__modtest() [0x428604]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7cd]\n??:? runModuleUnitTests [0x42c739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tbuild_max_heap(heap);\n\t\n\tforeach(long i; heap_size .. 1)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap_size];\n\t\theap_size -= 1;\n\t\tmax_heapify(heap, 0, heap_size);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp5kn_a2k2.d(19): Error: undefined identifier `build_max_heap`\n/tmp/tmp5kn_a2k2.d(26): Error: undefined identifier `max_heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kn_a2k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap();\n\t\n\t// insert all elements into the heap\n\tforeach(long i; iterable)\n\t{\n\t\theap.insert(i);\n\t}\n\t\n\t// extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmprjcr9047.d(12): Error: undefined identifier `Heap`\n/tmp/tmprjcr9047.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjcr9047.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\theapify(heap);\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\theap.length -= 1;\n\t\theapify(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpvg561caq.d(18): Error: undefined identifier `heapify`\n/tmp/tmpvg561caq.d(26): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg561caq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpiyd9fy9d.d(19): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyd9fy9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] a = iterable.dup;\n\tlong[] b = new long[a.length];\n\tlong[] c = new long[a.length];\n\tlong[] d = new long[a.length];\n\tlong[] e = new long[a.length];\n\tlong[] f = new long[a.length];\n\tlong[] g = new long[a.length];\n\tlong[] h = new long[a.length];\n\tlong[] i = new long[a.length];\n\tlong[] j = new long[a.length];\n\tlong[] k = new long[a.length];\n\tlong[] l = new long[a.length];\n\tlong[] m = new long[a.length];\n\tlong[] n = new long[a.length];\n\tlong[] o = new long[a.length];\n\tlong[] p = new long[a.length];\n\tlong[] q = new long[a.length];\n\tlong[] r = new long[a.length];\n\tlong[] s = new long[a.length];\n\tlong[] t = new long[a.length];\n\tlong[] u = new long[a.length];\n\tlong[] v = new long[a.length];\n\tlong[] w = new long[a.length];\n\tlong[] x = new long[a.length];\n\tlong[] y = new long[a.length];\n\tlong[] z = new long[a.length];\n\tlong[] aa = new long[a.length];\n\tlong[] ab = new long[a.length];\n\tlong[] ac = new long[a.length];\n\tlong[] ad = new long[a.length];\n\tlong[] ae = new long[a.length];\n\tlong[] af = new long[a.length];\n\tlong[] ag = new long[a.length];\n\tlong[] ah = new long[a.length];\n\tlong[] ai = new long[a.length];\n\tlong[] aj = new long[a.length];\n\tlong[] ak = new long[a.length];\n\tlong[] al = new long[a.length];\n\tlong[] am = new long[a.length];\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpgzyv8bb0.d(48): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzyv8bb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = insert_heap(heap, heap_size, item);\n\t}\n\t\n\tforeach(long i; 0 .. heap_size)\n\t{\n\t\tresult[i] = extract_heap(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpn5nksz0a.d(15): Error: undefined identifier `insert_heap`\n/tmp/tmpn5nksz0a.d(20): Error: undefined identifier `extract_heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5nksz0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the iterable to result\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// heapify the list\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tlong j = i;\n\t\tlong temp = result[i];\n\t\twhile(j > 0 && temp > result[(j - 1) / 2])\n\t\t{\n\t\t\tresult[j] = result[(j - 1) / 2];\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t\tresult[j] = temp;\n\t}\n\t\n\t// sort the list\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tlong j = 0;\n\t\tlong temp = result[result.length - i - 1];\n\t\tresult[result.length - i - 1] = result[0];\n\t\twhile((2 * j + 1) < (result.length - i - 1))\n\t\t{\n\t\t\tlong k = 2 * j + 1;\n\t\t\tif(k + 1 < (result.length - i - 1) && result[k] < result[k + 1])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(result[k] > temp)\n\t\t\t{\n\t\t\t\tresult[j] = result[k];\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult[j] = temp;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = iterable.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = iterable.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp0qtknspy.d(22): Error: undefined identifier `heapify`\n/tmp/tmp0qtknspy.d(30): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qtknspy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < heap.length - 1 - i && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length - 1 - i && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult[i] = heap[heap.length - 1 - i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjc9w5e4e.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x4287bd]\n??:? void tmpjc9w5e4e.__unittest_L58_C1() [0x4282d8]\n??:? void tmpjc9w5e4e.__modtest() [0x42853c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c89b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b72e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430945]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b705]\n??:? runModuleUnitTests [0x42c671]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..heap.length - 1];\n\t\theap = heapify(heap);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpmxbv34re.d(22): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxbv34re.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong index = heap_size;\n\t\twhile(index > 1 && heap[index] > heap[index/2])\n\t\t{\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[index/2];\n\t\t\theap[index/2] = temp;\n\t\t\tindex /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong index = 1;\n\t\twhile(index <= heap_size)\n\t\t{\n\t\t\tlong left = index*2;\n\t\t\tlong right = index*2+1;\n\t\t\tlong max = index;\n\t\t\tif(left <= heap_size && heap[left] > heap[max])\n\t\t\t\tmax = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[max])\n\t\t\t\tmax = right;\n\t\t\tif(max == index)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tindex = max;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7zj8r2jd.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42895e]\n??:? long[] tmp7zj8r2jd.heap_sort(long[]) [0x427ecb]\n??:? void tmp7zj8r2jd.__unittest_L54_C1() [0x428335]\n??:? void tmp7zj8r2jd.__modtest() [0x42862c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c98b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b81e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430aa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f5]\n??:? runModuleUnitTests [0x42c761]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\titerable[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn iterable;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpcha9ihbp.d(14): Error: undefined identifier `heap_insert`\n/tmp/tmpcha9ihbp.d(19): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcha9ihbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// make a heap\n\tlong[] heap = new long[iterable.length + 1];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i + 1] = iterable[i];\n\t}\n\t\n\t// heapify\n\tfor (int i = heap.length / 2; i >= 1; i--)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\t// sort\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap.length - i - 1];\n\t\theapify(heap, 1, heap.length - i - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp7s45n5mg.d(20): Error: cannot implicitly convert expression `heap.length / 2LU` of type `ulong` to `int`\n/tmp/tmp7s45n5mg.d(22): Error: undefined identifier `heapify`\n/tmp/tmp7s45n5mg.d(30): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s45n5mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the sorted heap to the result array\n\tfor (int i = 0; i < iterable.length; i++)\n\t\tresult[i] = heap.pop();\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp96x8g9lp.d(12): Error: undefined identifier `Heap`\n/tmp/tmp96x8g9lp.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96x8g9lp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length = heap.length - 1;\n\t\t\n\t\tfor (int j = 0; j < heap.length; j++)\n\t\t{\n\t\t\tif (heap[j] < heap[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j + 1];\n\t\t\t\theap[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpx3b4ipiy.d(25): Range violation\n----------------\n??:? _d_arrayboundsp [0x4287ae]\n??:? long[] tmpx3b4ipiy.heap_sort(long[]) [0x428008]\n??:? void tmpx3b4ipiy.__unittest_L36_C1() [0x428189]\n??:? void tmpx3b4ipiy.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d8ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c73e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431c75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x432124]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431c01]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c715]\n??:? runModuleUnitTests [0x42d681]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\tresult ~= item;\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; result)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size - 1] = item;\n\t\tlong i = heap_size - 1;\n\t\twhile(i > 0 && heap[i] > heap[(i - 1) / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = temp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong[] result_heap = new long[result.length];\n\tlong result_heap_size = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult_heap_size = result_heap_size + 1;\n\t\tresult_heap[result_heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size = heap_size - 1;\n\t\t\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpqj7z8bhj.d(60): Error: found `unittest` instead of statement\n/tmp/tmpqj7z8bhj.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqj7z8bhj.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqj7z8bhj.d(68): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj7z8bhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = 0;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpne8heiut.d(19): Error: undefined identifier `heapify`\n/tmp/tmpne8heiut.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpne8heiut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap_size = heap_insert(heap, result[i], heap_size);\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpgn_63ui3.d(20): Error: undefined identifier `heap_insert`\n/tmp/tmpgn_63ui3.d(25): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgn_63ui3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmplxh0a58v.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmplxh0a58v.d(20): Error: undefined identifier `heap_extract`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxh0a58v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong[] temp = new long[iterable.length];\n\tlong[] temp2 = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\ttemp[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\ttemp2[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpavmcj8az.d(71): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavmcj8az.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong j = i;\n\t\t\tlong left = 2*i;\n\t\t\tlong right = 2*i + 1;\n\t\t\tif(left <= heap_size && heap[left] > heap[j])\n\t\t\t{\n\t\t\t\tj = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[j])\n\t\t\t{\n\t\t\t\tj = right;\n\t\t\t}\n\t\t\tif(j == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\ti = j;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpulzwxegc.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42891e]\n??:? long[] tmpulzwxegc.heap_sort(long[]) [0x427ecb]\n??:? void tmpulzwxegc.__unittest_L60_C1() [0x4282f9]\n??:? void tmpulzwxegc.__modtest() [0x4285f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c94b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b5]\n??:? runModuleUnitTests [0x42c721]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long x; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = x;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[max])\n\t\t\t\tmax = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[max])\n\t\t\t\tmax = 2*j+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqgk_5aad.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4288fe]\n??:? long[] tmpqgk_5aad.heap_sort(long[]) [0x427ec5]\n??:? void tmpqgk_5aad.__unittest_L52_C1() [0x4282d9]\n??:? void tmpqgk_5aad.__modtest() [0x4285d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c92b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ef8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4309d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b795]\n??:? runModuleUnitTests [0x42c701]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\tlong j = heap_size - 1;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpg3g47i_t.d(66): Error: found `unittest` instead of statement\n/tmp/tmpg3g47i_t.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg3g47i_t.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg3g47i_t.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3g47i_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result;\n\tlong[] heap;\n\tlong temp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\t\n\tn = iterable.length;\n\t\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (i = 1; i < n; i++)\n\t{\n\t\tj = i;\n\t\t\n\t\twhile (j > 0)\n\t\t{\n\t\t\tk = (j - 1) / 2;\n\t\t\t\n\t\t\tif (heap[k] < heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[k];\n\t\t\t\theap[k] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i > 0; i--)\n\t{\n\t\ttemp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tk = 0;\n\t\t\n\t\twhile (k < i)\n\t\t{\n\t\t\tj = 2 * k + 1;\n\t\t\t\n\t\t\tif ((j < i - 1) && (heap[j] < heap[j + 1]))\n\t\t\t{\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (j < i && heap[k] < heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[k];\n\t\t\t\theap[k] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i =\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp6d0nsx22.d(78): Error: expression expected, not `unittest`\n/tmp/tmp6d0nsx22.d(79): Error: found `{` when expecting `;` following statement\n/tmp/tmp6d0nsx22.d(80): Error: expression expected, not `alias`\n/tmp/tmp6d0nsx22.d(80): Error: found `candidate` when expecting `;` following `for` condition\n/tmp/tmp6d0nsx22.d(80): Error: expression expected, not `=`\n/tmp/tmp6d0nsx22.d(80): Error: found `heap_sort` when expecting `)`\n/tmp/tmp6d0nsx22.d(80): Error: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d0nsx22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theap_up(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap_down(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp48tytneg.d(13): Error: undefined identifier `heap_up`\n/tmp/tmp48tytneg.d(21): Error: undefined identifier `heap_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48tytneg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = 0;\n\t}\n\t\n\theapify(heap);\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length = heap.length - 1;\n\t\theapify(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpy1de0yqt.d(18): Error: undefined identifier `heapify`\n/tmp/tmpy1de0yqt.d(25): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1de0yqt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong length = result.length;\n\t\n\tfor(long i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor(long i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpn953v1zk.d(20): Error: undefined identifier `heapify`\n/tmp/tmpn953v1zk.d(29): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn953v1zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\t\n\twhile(heap.length > 0)\n\t{\n\t\tresult[result_index++] = heap[0];\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..heap.length - 2];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = parent * 2 + 1;\n\t\t\n\t\twhile(child < heap.length)\n\t\t{\n\t\t\tif(child + 1 < heap.length && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\t\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp428irwnv.d(74): unittest failure\n----------------\n??:? _d_unittestp [0x42891d]\n??:? void tmp428irwnv.__unittest_L70_C1() [0x428438]\n??:? void tmp428irwnv.__modtest() [0x42869c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c9fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b88e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430b19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430fc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430aa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b865]\n??:? runModuleUnitTests [0x42c7d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428de0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\tresult[i] = v;\n\t}\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\theapify(result, i, result.length);\n\t}\n\t\n\t// Sort the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpkvddyzo7.d(18): Error: undefined identifier `heapify`\n/tmp/tmpkvddyzo7.d(28): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvddyzo7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the sorted heap into the result\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmp5iwjo9lc.d(12): Error: undefined identifier `Heap`\n/tmp/tmp5iwjo9lc.d(12): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iwjo9lc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; result)\n\t{\n\t\titem = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
      "timestamp": 1666124222,
      "stdout": "",
      "stderr": "/tmp/tmpnqiyt8xi.d(15): Error: undefined identifier `heap_insert`\n/tmp/tmpnqiyt8xi.d(20): Error: undefined identifier `heap_extract_max`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqiyt8xi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}