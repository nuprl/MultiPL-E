{
  "name": "mbpp_450_extract_string",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] res = new string[str.length];\n\tfor(int i = 0; i < str.length; i++)\n\t{\n\t\tres[i] = str[i][0..l];\n\t}\n\treturn res;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}",
    "{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}",
    "{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tresult[i] = str[i].substr(0, l);\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}