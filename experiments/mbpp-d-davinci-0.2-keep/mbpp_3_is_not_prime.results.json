{
  "name": "mbpp_3_is_not_prime",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp9yc_d5g0.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yc_d5g0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif(n < 2) return true;\n\tif(n == 2) return false;\n\tif(n % 2 == 0) return true;\n\tlong m = cast(long)sqrt(n);\n\tfor(long i = 3; i <= m; i += 2)\n\t{\n\t\tif(n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpeybsgx5x.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeybsgx5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpn2sq2wdu.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2sq2wdu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp4n0_6lcs.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n0_6lcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp9p4s22b1.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p4s22b1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmps_zhy64z.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_zhy64z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\t\n\tfor (long i = 5; i * i <= n; i += 6)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpeo0zsayx.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeo0zsayx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp51zybnv8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zybnv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp51zybnv8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zybnv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp1xhwoprn.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xhwoprn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp84tq5mki.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84tq5mki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (int i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp4n0_6lcs.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n0_6lcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\t\n\tif (n == 2) \n\t\treturn false;\n\t\n\tif (n % 2 == 0) \n\t\treturn true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpniywwbay.d(18): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpniywwbay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i < sqrt(n) + 1; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpqc9__te5.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc9__te5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp0l76qt68.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0l76qt68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpipdyfigj.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipdyfigj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp63vpscd8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63vpscd8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpgd2iuxsb.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgd2iuxsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n    if (n <= 1) \n        return true;\n    if (n <= 3) \n        return false;\n    if (n % 2 == 0 || n % 3 == 0) \n        return true;\n    for (long i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0) \n            return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 2) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp638d_uvp.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp638d_uvp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp_f0_6bda.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_f0_6bda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp0rn3pprc.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rn3pprc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp9g7z7phz.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g7z7phz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmplbdlguc2.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbdlguc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp2pjef54t.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pjef54t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmphi2fzo78.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphi2fzo78.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\telse if (n == 2)\n\t\treturn false;\n\telse if (n % 2 == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tlong i = 3;\n\t\twhile (i <= sqrt(n))\n\t\t{\n\t\t\tif (n % i == 0)\n\t\t\t\treturn true;\n\t\t\ti += 2;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp85c1bpq2.d(18): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85c1bpq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp53iicoap.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53iicoap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpgd2iuxsb.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgd2iuxsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp9yc_d5g0.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yc_d5g0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tforeach (i; 2 .. cast(long)(sqrt(n)) + 1) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpb5u0vfwl.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5u0vfwl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp4hla2fik.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hla2fik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp9p4s22b1.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p4s22b1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpbq4y0_od.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbq4y0_od.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n)) {\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp35gss31p.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35gss31p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp60rg0vkk.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60rg0vkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp53iicoap.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53iicoap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpn2sq2wdu.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2sq2wdu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpke4ppo5s.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpke4ppo5s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tint i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp5ibykqas.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ibykqas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpaihbgrnl.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaihbgrnl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp6dje9k9_.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dje9k9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp5ibykqas.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ibykqas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long) sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpx4ale9aj.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4ale9aj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp2mtwht83.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mtwht83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp4mx085f1.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mx085f1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpgd2iuxsb.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgd2iuxsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t\treturn true;\n\tif (n == 2) \n\t\treturn false;\n\tif (n % 2 == 0) \n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpry47b8_t.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpry47b8_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpipdyfigj.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipdyfigj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp29vxhl68.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29vxhl68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp0rn3pprc.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rn3pprc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i += 6) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tlong i = 3;\n\twhile (i <= sqrt(n)) \n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmps4zqe4pq.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4zqe4pq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long) sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpfq16mbpm.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfq16mbpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp5exe0_a7.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5exe0_a7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\telse if (n == 2) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t\t{\n\t\t\tif (n % i == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpkgjrp5b5.d(23): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgjrp5b5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpte8391v3.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpte8391v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\telse if (n == 2) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t\t{\n\t\t\tif (n % i == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpkgjrp5b5.d(23): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgjrp5b5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 2) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp638d_uvp.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp638d_uvp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp5exe0_a7.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5exe0_a7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp51zybnv8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zybnv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp51zybnv8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zybnv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp51zybnv8.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zybnv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i = i + 6) \n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp4mx085f1.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mx085f1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp53iicoap.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53iicoap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpl_q1n24u.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_q1n24u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\tlong sqrt_n = sqrt(n);\n\t\n\twhile (i <= sqrt_n) \n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp8nthp6b9.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nthp6b9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpar40on5r.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpar40on5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpv79fi645.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv79fi645.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\tlong sqrt_n = sqrt(n);\n\twhile (i <= sqrt_n)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpgf7d98p0.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf7d98p0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpohjzdd4a.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohjzdd4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\tif (n == 2) \n\t\treturn false;\n\tif (n % 2 == 0) \n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp3e23lbqd.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3e23lbqd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpohjzdd4a.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohjzdd4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3)\n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp4mx085f1.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mx085f1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tif (n == 2)\n\t\treturn false;\n\t\n\tif (n % 2 == 0)\n\t\treturn true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpfke1uiup.d(18): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfke1uiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif(n < 2) return true;\n\tif(n == 2) return false;\n\tif(n % 2 == 0) return true;\n\tfor(long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif(n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpui8n7wde.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpui8n7wde.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmplzfn7n2j.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzfn7n2j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tif (n == 2) \n\t{\n\t\treturn false;\n\t}\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpo4gf6tjj.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4gf6tjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmps_zhy64z.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_zhy64z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp6dm058dt.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dm058dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpytvlcwj2.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytvlcwj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\telse if (n == 2)\n\t\treturn false;\n\telse if (n % 2 == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\t{\n\t\t\tif (n % i == 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpbny4nw4o.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbny4nw4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpes2bx3f5.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpes2bx3f5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n)) \n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpv5z3cu93.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5z3cu93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpo_tp6pdo.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_tp6pdo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t\tif (n % i == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpntn8mrr6.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpntn8mrr6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 2) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp638d_uvp.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp638d_uvp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpeo0zsayx.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeo0zsayx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp8rzm0c12.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rzm0c12.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp5ibykqas.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ibykqas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp4n0_6lcs.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n0_6lcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\telse if (n == 2)\n\t\treturn false;\n\telse if (n % 2 == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\t{\n\t\t\tif (n % i == 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpbny4nw4o.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbny4nw4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i < n; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t\tif (n % i == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmp0sku4tsh.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sku4tsh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmp5ibykqas.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ibykqas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n))\n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpdrhsdhg4.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrhsdhg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "/tmp/tmpxud5_tbp.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxud5_tbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a python function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "/tmp/tmpjjwutiup.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjwutiup.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}