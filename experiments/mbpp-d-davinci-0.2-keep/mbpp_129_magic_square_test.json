{
  "name": "mbpp_129_magic_square_test",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\n*/\nbool magic_square_test(long[][] my_matrix) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = magic_square_test;\n\n    assert(candidate([[7L, 12L, 1L, 14L], [2L, 13L, 8L, 11L], [16L, 3L, 10L, 5L], [9L, 6L, 15L, 4L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 8L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 7L]]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\tlong sum_of_diagonals = 0;\n\tlong sum_of_rows = 0;\n\tlong sum_of_columns = 0;\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_of_rows += row[0];\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(column; row)\n\t\t{\n\t\t\tsum_of_columns += column;\n\t\t}\n\t\t\n\t\tif(sum_of_rows != sum_of_columns)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tsum_of_columns = 0;\n\t}\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_of_diagonals += row[row.length - 1];\n\t}\n\t\n\tif(sum_of_diagonals != sum_of_rows)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\tint sum_row = 0;\n\tint sum_col = 0;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum += my_matrix[i][i];\n\t\tsum_diag2 += my_matrix[i][n - i - 1];\n\t}\n\t\n\tif (sum != sum_diag2)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif (sum != sum_row || sum != sum_col)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint[] my_array = new int[n*n];\n\tint i = 0;\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tmy_array[i] = col;\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tint sum = 0;\n\tforeach(row; my_matrix)\n\t{\n\t\tsum += row[0];\n\t}\n\t\n\tint sum_row = 0;\n\tint sum_col = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tsum_diag += my_matrix[i][j];\n\t\t\t}\n\t\t\tif(i + j == n - 1)\n\t\t\t{\n\t\t\t\tsum_diag2 += my_matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tif(sum_row != sum || sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t}\n\tif(sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\tint[] my_array2 = my_array.dup;\n\tmy_array2.sort;\n\t\n\tfor(int i = 0; i < n*n; i++)\n\t{\n\t\tif(my_array[i] != my_array2[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_diagonal1 = 0;\n\tint sum_diagonal2 = 0;\n\tint sum_row = 0;\n\tint sum_column = 0;\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diagonal1 += my_matrix[i][i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_diagonal2 += my_matrix[i][n-i-1];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_row = 0;\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t}\n\t\tif (sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum_column = 0;\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_column += my_matrix[j][i];\n\t\t}\n\t\tif (sum_column != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (sum_diagonal1 != sum || sum_diagonal2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum2 = 0;\n\tint sum3 = 0;\n\tint sum4 = 0;\n\tint sum5 = 0;\n\tint sum6 = 0;\n\tint sum7 = 0;\n\tint sum8 = 0;\n\tint sum9 = 0;\n\tint sum10 = 0;\n\tint sum11 = 0;\n\tint sum12 = 0;\n\tint sum13 = 0;\n\tint sum14 = 0;\n\tint sum15 = 0;\n\tint sum16 = 0;\n\tint sum17 = 0;\n\tint sum18 = 0;\n\tint sum19 = 0;\n\tint sum20 = 0;\n\tint sum21 = 0;\n\tint sum22 = 0;\n\tint sum23 = 0;\n\tint sum24 = 0;\n\tint sum25 = 0;\n\tint sum26 = 0;\n\tint sum27 = 0;\n\tint sum28 = 0;\n\tint sum29 = 0;\n\tint sum30 = 0;\n\tint sum31 = 0;\n\tint sum32 = 0;\n\tint sum33 = 0;\n\tint sum34 = 0;\n\tint sum35 = 0;\n\tint sum36 = 0;\n\tint sum37 = 0;\n\tint sum38 = 0;\n\tint sum39 = 0;\n\tint sum40 = 0;\n\tint sum41 = 0;\n\tint sum42 = 0;\n\tint sum43 = 0;\n\tint sum44 = 0;\n\tint sum45 = 0;\n\tint sum46 = 0;\n\tint sum47 = 0;\n\tint sum48 = 0;\n\tint sum49 = 0;\n\tint sum50 = 0;\n\tint sum51 = 0;\n\tint sum52 = 0;\n\tint sum53 = 0;\n\tint sum54 = 0;\n\tint sum55 = 0;\n\tint sum56 = 0;\n\tint sum57 = 0;\n\tint sum58 = 0;\n\tint sum59 = 0;\n\tint sum60 = 0;\n\tint sum61 = 0;\n\tint sum62 = 0;\n\tint",
    "{\n\tint n = my_matrix.length;\n\tint[] my_array = new int[n*n];\n\tint i = 0;\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(col; row)\n\t\t{\n\t\t\tmy_array[i] = col;\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tint sum = 0;\n\tforeach(row; my_matrix)\n\t{\n\t\tsum += row[0];\n\t}\n\t\n\tint sum_row = 0;\n\tint sum_col = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tsum_diag += my_matrix[i][j];\n\t\t\t}\n\t\t\tif(i + j == n - 1)\n\t\t\t{\n\t\t\t\tsum_diag2 += my_matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tif(sum_row != sum || sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t}\n\tif(sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\tint[] my_array2 = my_array.dup;\n\tsort(my_array2);\n\t\n\tfor(int i = 0; i < n*n; i++)\n\t{\n\t\tif(my_array[i] != my_array2[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint magic_sum = n * (n * n + 1) / 2;\n\t\n\tint sum_row = 0;\n\tint sum_col = 0;\n\tint sum_diag = 0;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum_row = 0;\n\t\tsum_col = 0;\n\t\t\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\t\n\t\tif (sum_row != magic_sum || sum_col != magic_sum)\n\t\t\treturn false;\n\t\t\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\t\n\tif (sum_diag != magic_sum)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_of_row = 0;\n\tint sum_of_col = 0;\n\tint sum_of_diag = 0;\n\tint sum_of_rev_diag = 0;\n\t\n\tfor(int i = 0; i < n; i++) {\n\t\tsum_of_row = 0;\n\t\tsum_of_col = 0;\n\t\tfor(int j = 0; j < n; j++) {\n\t\t\tsum_of_row += my_matrix[i][j];\n\t\t\tsum_of_col += my_matrix[j][i];\n\t\t}\n\t\tif(i == 0) {\n\t\t\tsum = sum_of_row;\n\t\t}\n\t\tif(sum != sum_of_row || sum != sum_of_col) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < n; i++) {\n\t\tsum_of_diag += my_matrix[i][i];\n\t\tsum_of_rev_diag += my_matrix[i][n - i - 1];\n\t}\n\t\n\tif(sum != sum_of_diag || sum != sum_of_rev_diag) {\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag1 = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\t\n\t// Calculate the sum of the first row\n\tforeach(i; 0 .. my_matrix.length)\n\t{\n\t\tsum_row += my_matrix[0][i];\n\t}\n\t\n\t// Calculate the sum of the first column\n\tforeach(i; 0 .. my_matrix.length)\n\t{\n\t\tsum_col += my_matrix[i][0];\n\t}\n\t\n\t// Calculate the sum of the diagonal from top left to bottom right\n\tforeach(i; 0 .. my_matrix.length)\n\t{\n\t\tsum_diag1 += my_matrix[i][i];\n\t}\n\t\n\t// Calculate the sum of the diagonal from top right to bottom left\n\tforeach(i; 0 .. my_matrix.length)\n\t{\n\t\tsum_diag2 += my_matrix[i][my_matrix.length - i - 1];\n\t}\n\t\n\t// Check if the sums are equal\n\tif(sum_row != sum_col || sum_col != sum_diag1 || sum_diag1 != sum_diag2)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Set the sum to the sum of the first row\n\tsum = sum_row;\n\t\n\t// Check if the sum of each row is equal to the sum of the first row\n\tforeach(i; 1 .. my_matrix.length)\n\t{\n\t\tsum_row = 0;\n\t\tforeach(j; 0 .. my_matrix.length)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t}\n\t\tif(sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Check if the sum of each column is equal to the sum of the first column\n\tforeach(i; 1 .. my_matrix.length",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum_diag = 0;\n\tint sum_diag2 = 0;\n\tint sum_row = 0;\n\tint sum_col = 0;\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tsum_diag2 += my_matrix[i][n-i-1];\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t}\n\t\tif(sum_row != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_row = 0;\n\t}\n\t\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tfor(int j = 0; j < n; j++)\n\t\t{\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif(sum_col != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tsum_col = 0;\n\t}\n\t\n\tif(sum_diag != sum || sum_diag2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the matrix is a magic square\n\tlong sum = 0;\n\tforeach (i; 0 .. my_matrix.length)\n\t{\n\t\tsum += my_matrix[0][i];\n\t}\n\t\n\tforeach (i; 0 .. my_matrix.length)\n\t{\n\t\tlong row_sum = 0;\n\t\tlong col_sum = 0;\n\t\tforeach (j; 0 .. my_matrix.length)\n\t\t{\n\t\t\trow_sum += my_matrix[i][j];\n\t\t\tcol_sum += my_matrix[j][i];\n\t\t}\n\t\tif (row_sum != sum || col_sum != sum)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tlong diag_sum = 0;\n\tlong diag_sum2 = 0;\n\tforeach (i; 0 .. my_matrix.length)\n\t{\n\t\tdiag_sum += my_matrix[i][i];\n\t\tdiag_sum2 += my_matrix[i][my_matrix.length - 1 - i];\n\t}\n\tif (diag_sum != sum || diag_sum2 != sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum2 = 0;\n\t\n\t// check if matrix is square\n\tforeach(row; my_matrix)\n\t{\n\t\tif (row.length != n)\n\t\t\treturn false;\n\t}\n\t\n\t// check if all elements are unique\n\tforeach(row; my_matrix)\n\t{\n\t\tforeach(element; row)\n\t\t{\n\t\t\tif (element < 1 || element > n*n)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check if sum of rows is equal\n\tforeach(row; my_matrix)\n\t{\n\t\tint row_sum = 0;\n\t\tforeach(element; row)\n\t\t{\n\t\t\trow_sum += element;\n\t\t}\n\t\tif (sum == 0)\n\t\t\tsum = row_sum;\n\t\telse if (sum != row_sum)\n\t\t\treturn false;\n\t}\n\t\n\t// check if sum of columns is equal\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint column_sum = 0;\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tcolumn_sum += my_matrix[j][i];\n\t\t}\n\t\tif (sum2 == 0)\n\t\t\tsum2 = column_sum;\n\t\telse if (sum2 != column_sum)\n\t\t\treturn false;\n\t}\n\t\n\t// check if sum of diagonals is equal\n\tint diagonal_sum = 0;\n\tint diagonal_sum2 = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdiagonal_sum += my_matrix[i][i];\n\t\tdiagonal_sum2 += my_matrix[i][n-i-1];\n\t}\n\tif (diagonal_sum != diagonal_sum2)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag2 = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tsum_row = 0;\n\t\tforeach(col; row)\n\t\t{\n\t\t\tsum_row += col;\n\t\t}\n\t\tif(sum == 0)\n\t\t{\n\t\t\tsum = sum_row;\n\t\t}\n\t\telse if(sum != sum_row)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum_col = 0;\n\t\tfor(int j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\tif(sum != sum_col)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\t\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n\t}\n\t\n\tif(sum != sum_diag || sum != sum_diag2)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tint n = my_matrix.length;\n\tint m = my_matrix[0].length;\n\tif (n != m)\n\t\treturn false;\n\t\n\tint sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tsum += my_matrix[0][i];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint row_sum = 0;\n\t\tfor (int j = 0; j < n; j++)\n\t\t\trow_sum += my_matrix[i][j];\n\t\tif (row_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint col_sum = 0;\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tcol_sum += my_matrix[j][i];\n\t\tif (col_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tint diag_sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tdiag_sum += my_matrix[i][i];\n\tif (diag_sum != sum)\n\t\treturn false;\n\t\n\tint diag_sum2 = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tdiag_sum2 += my_matrix[i][n - i - 1];\n\tif (diag_sum2 != sum)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\t// check the size of the matrix\n\tif(my_matrix.length != my_matrix[0].length)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check the sum of each row\n\tlong sum = 0;\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum = 0;\n\t\tfor(int j = 0; j < my_matrix[0].length; j++)\n\t\t{\n\t\t\tsum += my_matrix[i][j];\n\t\t}\n\t\tif(sum != my_matrix.length * (my_matrix.length * my_matrix.length + 1) / 2)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check the sum of each column\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum = 0;\n\t\tfor(int j = 0; j < my_matrix[0].length; j++)\n\t\t{\n\t\t\tsum += my_matrix[j][i];\n\t\t}\n\t\tif(sum != my_matrix.length * (my_matrix.length * my_matrix.length + 1) / 2)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check the sum of the diagonal\n\tsum = 0;\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum += my_matrix[i][i];\n\t}\n\tif(sum != my_matrix.length * (my_matrix.length * my_matrix.length + 1) / 2)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check the sum of the other diagonal\n\tsum = 0;\n\tfor(int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum += my_matrix[i][my_matrix.length - 1 - i];\n\t}\n\tif(sum != my_matrix.length * (my",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the matrix is a magic square\n\tlong sum = 0;\n\tlong sum_row = 0;\n\tlong sum_col = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag2 = 0;\n\t\n\t// get the sum of the first row\n\tforeach (i; 0 .. my_matrix.length) \n\t{\n\t\tsum_row += my_matrix[0][i];\n\t}\n\t\n\t// check if the sum of the rows is equal to the sum of the first row\n\tforeach (i; 0 .. my_matrix.length) \n\t{\n\t\tsum = 0;\n\t\tforeach (j; 0 .. my_matrix.length) \n\t\t{\n\t\t\tsum += my_matrix[i][j];\n\t\t}\n\t\tif (sum != sum_row) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check if the sum of the columns is equal to the sum of the first row\n\tforeach (i; 0 .. my_matrix.length) \n\t{\n\t\tsum = 0;\n\t\tforeach (j; 0 .. my_matrix.length) \n\t\t{\n\t\t\tsum += my_matrix[j][i];\n\t\t}\n\t\tif (sum != sum_row) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check if the sum of the diagonals is equal to the sum of the first row\n\tforeach (i; 0 .. my_matrix.length) \n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t}\n\tif (sum_diag != sum_row) \n\t{\n\t\treturn false;\n\t}\n\t\n\tforeach (i; 0 .. my_matrix.length) \n\t{\n\t\tsum_diag2 +=",
    "{\n\t// check if the matrix is a square\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t// check if the matrix is a magic square\n\tlong sum = 0;\n\tforeach(row; my_matrix)\n\t\tsum += row[0];\n\t\n\tforeach(row; my_matrix)\n\t{\n\t\tlong row_sum = 0;\n\t\tforeach(elem; row)\n\t\t\trow_sum += elem;\n\t\tif (row_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tforeach(col; my_matrix[0].length)\n\t{\n\t\tlong col_sum = 0;\n\t\tforeach(row; my_matrix)\n\t\t\tcol_sum += my_matrix[row][col];\n\t\tif (col_sum != sum)\n\t\t\treturn false;\n\t}\n\t\n\tlong diag_sum = 0;\n\tforeach(row; my_matrix)\n\t\tdiag_sum += my_matrix[row][row];\n\tif (diag_sum != sum)\n\t\treturn false;\n\t\n\tlong diag_sum2 = 0;\n\tforeach(row; my_matrix)\n\t\tdiag_sum2 += my_matrix[row][my_matrix.length - row - 1];\n\tif (diag_sum2 != sum)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the sum of the rows is equal\n\tlong row_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\trow_sum = 0;\n\t\tfor (int j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\trow_sum += my_matrix[i][j];\n\t\t}\n\t\tif (row_sum != my_matrix[0][0])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check if the sum of the columns is equal\n\tlong col_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tcol_sum = 0;\n\t\tfor (int j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\tcol_sum += my_matrix[j][i];\n\t\t}\n\t\tif (col_sum != my_matrix[0][0])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// check if the sum of the diagonals is equal\n\tlong diag_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tdiag_sum += my_matrix[i][i];\n\t}\n\tif (diag_sum != my_matrix[0][0])\n\t{\n\t\treturn false;\n\t}\n\t\n\tdiag_sum = 0;\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tdiag_sum += my_matrix[i][my_matrix.length - i - 1];\n\t}\n\tif (diag_sum != my_matrix[0][0])\n\t{\n\t\treturn false;\n\t",
    "{\n\tint n = my_matrix.length;\n\tint sum = 0;\n\tint sum2 = 0;\n\tint sum3 = 0;\n\tint sum4 = 0;\n\tint sum5 = 0;\n\tint sum6 = 0;\n\tint sum7 = 0;\n\tint sum8 = 0;\n\tint sum9 = 0;\n\tint sum10 = 0;\n\tint sum11 = 0;\n\tint sum12 = 0;\n\tint sum13 = 0;\n\tint sum14 = 0;\n\tint sum15 = 0;\n\tint sum16 = 0;\n\tint sum17 = 0;\n\tint sum18 = 0;\n\tint sum19 = 0;\n\tint sum20 = 0;\n\tint sum21 = 0;\n\tint sum22 = 0;\n\tint sum23 = 0;\n\tint sum24 = 0;\n\tint sum25 = 0;\n\tint sum26 = 0;\n\tint sum27 = 0;\n\tint sum28 = 0;\n\tint sum29 = 0;\n\tint sum30 = 0;\n\tint sum31 = 0;\n\tint sum32 = 0;\n\tint sum33 = 0;\n\tint sum34 = 0;\n\tint sum35 = 0;\n\tint sum36 = 0;\n\tint sum37 = 0;\n\tint sum38 = 0;\n\tint sum39 = 0;\n\tint sum40 = 0;\n\tint sum41 = 0;\n\tint sum42 = 0;\n\tint sum43 = 0;\n\tint sum44 = 0;\n\tint sum45 = 0;\n\tint sum46 = 0;\n\tint sum47 = 0;\n\tint sum48 = 0;\n\tint sum49 = 0;\n\tint sum50 = 0;\n\tint sum51 = 0;\n\tint sum52 = 0;\n\tint sum53 = 0;\n\tint sum54 = 0;\n\tint sum55 = 0;\n\tint sum56 = 0;\n\tint sum57 = 0;\n\tint sum58 = 0;\n\tint sum59 = 0;\n\tint sum60 = 0;\n\tint sum61 = 0;\n\tint sum62 = 0;\n\tint",
    "{\n\t// check if the matrix is square\n\tif (my_matrix.length != my_matrix[0].length)\n\t\treturn false;\n\t\n\t// check if the matrix is a magic square\n\tlong sum = 0;\n\tlong sum_diag = 0;\n\tlong sum_diag_2 = 0;\n\t\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tsum_diag += my_matrix[i][i];\n\t\tsum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n\t}\n\t\n\tif (sum_diag != sum_diag_2)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < my_matrix.length; i++)\n\t{\n\t\tlong sum_row = 0;\n\t\tlong sum_col = 0;\n\t\t\n\t\tfor (int j = 0; j < my_matrix.length; j++)\n\t\t{\n\t\t\tsum_row += my_matrix[i][j];\n\t\t\tsum_col += my_matrix[j][i];\n\t\t}\n\t\t\n\t\tif (sum_row != sum_col || sum_row != sum_diag)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}"
  ]
}