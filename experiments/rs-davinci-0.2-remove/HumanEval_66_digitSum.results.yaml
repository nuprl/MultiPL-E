language: rs
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|x| x.is_uppercase()).map(|x| x as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmps_lt0w9e.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|x| x.is_uppercase()).map(|x| x as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmps_lt0w9e.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 'A' as isize + 1).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpsxsw88pd.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 'A' as isize + 1).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpsxsw88pd.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().fold(0, |acc, c| acc + c as isize)\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmpdq02it8a.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 'A' as isize + 1).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpsxsw88pd.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|\
    \ c as isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for i in s.chars() {\n       \
    \ if i.is_ascii_uppercase() {\n            sum += i as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|&c| c >= 65 &&\
    \ c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|\
    \ c as isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().fold(0, |acc, c| acc + (c as isize))\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `326`,\n right: `131`', /tmp/tmp7_zytaes.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().map(|c| c as isize).filter(|c| *c >= 65 &&\
    \ *c <= 90).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    let mut sum = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 101
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize - 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `131`', /tmp/tmpx4qd9wa_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747866
