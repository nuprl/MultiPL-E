language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let mut\
    \ sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    a * a + b * b == c * c\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
- exit_code: 0
  program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015899
