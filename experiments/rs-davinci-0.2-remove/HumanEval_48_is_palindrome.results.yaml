language: rs
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().rev().collect::<String>() == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().rev().collect::<String>() == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text = text.to_lowercase();\n    let text = text.replace(|c:\
    \ char| !c.is_alphanumeric(), \"\");\n    let text = text.as_str();\n    let text_len\
    \ = text.len();\n    let half_len = text_len / 2;\n\n    for i in 0..half_len\
    \ {\n        if text.chars().nth(i) != text.chars().nth(text_len - i - 1) {\n\
    \            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n \
    \   let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ mut i = 0;\n    let mut j = text_chars.len() - 1;\n    while i < j {\n     \
    \   if text_chars[i] != text_chars[j] {\n            return false;\n        }\n\
    \        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_nu2tpp5.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().rev().collect::<String>() == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().zip(text.chars().rev()).all(|(a, b)| a == b)\n}\n\
    \nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().eq(text.chars().rev())\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text = text.to_lowercase();\n    let text = text.chars().filter(|c|\
    \ c.is_alphanumeric()).collect::<String>();\n    text == text.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text = text.to_lowercase();\n    let text = text.replace(|c:\
    \ char| !c.is_alphanumeric(), \"\");\n    text == text.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ mut i = 0;\n    let mut j = text_chars.len() - 1;\n    while i < j {\n     \
    \   if text_chars[i] != text_chars[j] {\n            return false;\n        }\n\
    \        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_nu2tpp5.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ mut i = 0;\n    let mut j = text_chars.len() - 1;\n    while i < j {\n     \
    \   if text_chars[i] != text_chars[j] {\n            return false;\n        }\n\
    \        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_nu2tpp5.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text = text.to_lowercase();\n    let text = text.replace(|c:\
    \ char| !c.is_alphanumeric(), \"\");\n    let text = text.chars().collect::<Vec<char>>();\n\
    \    let len = text.len();\n    for i in 0..len / 2 {\n        if text[i] != text[len\
    \ - i - 1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_len = text.len();\n    let mut i = 0;\n    let mut j\
    \ = text_len - 1;\n    while i < j {\n        if text.chars().nth(i) != text.chars().nth(j)\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpaww9duhp.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(x),\
    \ Some(y)) if x == y => continue,\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_length = text.len();\n    let half_length = text_length\
    \ / 2;\n\n    let mut i = 0;\n    while i < half_length {\n        if text.chars().nth(i)\
    \ != text.chars().nth(text_length - i - 1) {\n            return false;\n    \
    \    }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_len = text.len();\n    let half_len = text_len / 2;\n\
    \    let mut is_palindrome = true;\n\n    for i in 0..half_len {\n        let\
    \ first_char = text.chars().nth(i).unwrap();\n        let last_char = text.chars().nth(text_len\
    \ - 1 - i).unwrap();\n\n        if first_char != last_char {\n            is_palindrome\
    \ = false;\n            break;\n        }\n    }\n\n    is_palindrome\n}\n\nfn\
    \ main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    text.chars().rev().collect::<String>() == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut reversed = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), reversed.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ text_len = text_chars.len();\n    let mut i = 0;\n    let mut j = text_len -\
    \ 1;\n    while i < j {\n        if text_chars[i] != text_chars[j] {\n       \
    \     return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpp4qa21rg.rs:6:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text = text.to_lowercase();\n    let mut chars: Vec<char>\
    \ = text.chars().collect();\n    chars.reverse();\n    let reversed: String =\
    \ chars.into_iter().collect();\n    text == reversed\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_len = text.len();\n    let mut i = 0;\n    let mut j\
    \ = text_len - 1;\n    while i < j {\n        if text.chars().nth(i) != text.chars().nth(j)\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpaww9duhp.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(a),\
    \ Some(b)) => {\n                if a != b {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(x),\
    \ Some(y)) if x == y => continue,\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    return text == reversed;\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => {\n           \
    \     return true;\n            }\n            _ => {\n                return\
    \ false;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ mut i = 0;\n    let mut j = text_chars.len() - 1;\n    while i < j {\n     \
    \   if text_chars[i] != text_chars[j] {\n            return false;\n        }\n\
    \        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_nu2tpp5.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let text_len = text.len();\n    let mut i = 0;\n    let mut j\
    \ = text_len - 1;\n    while i < j {\n        if text.chars().nth(i) != text.chars().nth(j)\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpaww9duhp.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(rc)) => {\n                if c != rc {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    text == chars.into_iter().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars = text.chars();\n    let mut rev_chars = text.chars().rev();\n\
    \n    loop {\n        match (chars.next(), rev_chars.next()) {\n            (Some(c),\
    \ Some(r)) => {\n                if c != r {\n                    return false;\n\
    \                }\n            }\n            (None, None) => return true,\n\
    \            _ => return false,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 0
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    chars.reverse();\n\
    \    let reversed: String = chars.into_iter().collect();\n    text == reversed\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747683
- exit_code: 101
  program: "/// Checks if given string is a palindrome\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    let mut\
    \ i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i]\
    \ != chars[j] {\n            return false;\n        }\n        i += 1;\n     \
    \   j -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6f5t153m.rs:5:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747683
