name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
  \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
  \ <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut evens = arr\n        .iter()\n        .enumerate()\n  \
    \      .filter(|(_, &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    evens.first().map_or(vec![], |&(i, v)| vec![v, i as isize])", " \
    \   let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n \
    \   for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", " \
    \   let mut min = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v;\n            min_index = i as isize;\n        }\n  \
    \  }\n    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_index]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &min_even {\n            min_even = *n;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut min_even = isize::max_value();\n    let mut min_even_idx = isize::max_value();\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even\
    \ {\n            min_even = v;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == isize::max_value() {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &n)| n % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ n)| n);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &n) = evens[0];\n    vec![n, i as isize]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n    \
    \    .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let (i, &x) = evens[0];\n    vec![x, i\
    \ as isize]", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let\
    \ (i, &x) = evens[0];\n    vec![x, i as isize]", "    let mut evens = arr\n  \
    \      .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    evens.first().map_or(vec![],\
    \ |&(i, x)| vec![x, i as isize])", "    let mut evens = arr\n        .iter()\n\
    \        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty() {\n        vec![]\n\
    \    } else {\n        let (i, x) = evens[0];\n        vec![x, i as isize]\n \
    \   }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n    \
    \    .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n    \
    \    .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let (idx, val) = evens[0];\n    vec![val,\
    \ idx as isize]", "    let mut min = std::isize::MAX;\n    let mut min_index =\
    \ std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n        if x\
    \ % 2 == 0 && x < min {\n            min = x;\n            min_index = i as isize;\n\
    \        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min, min_index]\n    }", "    let mut evens = arr\n        .iter()\n\
    \        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|(_, &x)| x);\n    evens.first().map_or(vec![], |(i, &x)|\
    \ vec![x, *i as isize])", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", " \
    \   let mut min = isize::max_value();\n    let mut index = 0;\n    for (i, &n)\
    \ in arr.iter().enumerate() {\n        if n % 2 == 0 && n < min {\n          \
    \  min = n;\n            index = i;\n        }\n    }\n    if min == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min, index as isize]\n    }",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut min_even = isize::max_value();\n    let mut min_even_idx\
    \ = isize::max_value();\n    for (i, &v) in arr.iter().enumerate() {\n       \
    \ if v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == isize::max_value() {\n \
    \       vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", " \
    \   let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n \
    \   for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, v)| v.is_even())\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ v)| *v);\n    evens.first().map_or(vec![], |(i, v)| vec![*v, *i as isize])",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if\
    \ v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n   \
    \ for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut min_even = None;\n    let mut min_even_idx =\
    \ None;\n    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 ==\
    \ 0 {\n            if min_even.is_none() || val < min_even.unwrap() {\n      \
    \          min_even = Some(val);\n                min_even_idx = Some(idx as isize);\n\
    \            }\n        }\n    }\n    match (min_even, min_even_idx) {\n     \
    \   (Some(min_even), Some(min_even_idx)) => vec![min_even, min_even_idx],\n  \
    \      _ => vec![],\n    }", "    let mut min = std::isize::MAX;\n    let mut\
    \ min_idx = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n   \
    \     if v % 2 == 0 && v < &min {\n            min = *v;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    evens.first().map_or(vec![],\
    \ |&(i, x)| vec![x, i as isize])", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &min_even {\n            min_even = *n;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut min = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n \
    \   for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_index = i as isize;\n        }\n  \
    \  }\n    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_index]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].1,\
    \ evens[0].0 as isize]\n    }", "    let mut evens = arr\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty() {\n        vec![]\n\
    \    } else {\n        let (i, &x) = evens[0];\n        vec![x, i as isize]\n\
    \    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut min =\
    \ std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n    for (i, &v)\
    \ in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min {\n          \
    \  min = v;\n            min_index = i as isize;\n        }\n    }\n    if min\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min, min_index]\n\
    \    }", "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even\
    \ {\n            min_even = v;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_index]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    evens.first().map_or(vec![], |&(i, v)| vec![v, i as isize])", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n \
    \   }\n    vec![min_even, min_even_idx]", "    let mut evens = arr\n        .iter()\n\
    \        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    let (i, &x) = evens[0];\n    vec![x, i as isize]", "    let mut\
    \ min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for (i,\
    \ &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min {\n      \
    \      min = v;\n            min_idx = i as isize;\n        }\n    }\n    if min\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min, min_idx]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (i, x) in arr.iter().enumerate() {\n        if x %\
    \ 2 == 0 && x < &min_even {\n            min_even = *x;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    if evens.is_empty() {\n\
    \        return vec![];\n    }\n    evens.sort_by_key(|&(_, v)| v);\n    let (i,\
    \ &v) = evens[0];\n    vec![v, i as isize]", "    let mut min = std::isize::MAX;\n\
    \    let mut min_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min {\n            min = x;\n            min_index\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_index]\n    }", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut min =\
    \ std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for (i, &x) in\
    \ arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n            min\
    \ = x;\n            min_idx = i as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min, min_idx]\n    }", "    let\
    \ mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for\
    \ (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n  \
    \          min = x;\n            min_idx = i as isize;\n        }\n    }\n   \
    \ if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if *n % 2 == 0 && *n < min_even\
    \ {\n            min_even = *n;\n            min_even_idx = i as isize;\n    \
    \    }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min {\n            min = x;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, x)| x.is_even())\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_, x)| *x);\n    evens.first().map_or(vec![],\
    \ |(i, x)| vec![*x, *i as isize])", "    let mut even = std::isize::MAX;\n   \
    \ let mut idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 && x < even {\n            even = x;\n            idx =\
    \ i as isize;\n        }\n    }\n    if even == std::isize::MAX {\n        return\
    \ vec![];\n    }\n    vec![even, idx]", "    let mut evens = arr\n        .iter()\n\
    \        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|&(_, x)| x);\n    evens.first().map_or(vec![], |&(i, x)|\
    \ vec![x, i as isize])", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    evens.first().map_or(vec![], |&(i, v)| vec![v, i as isize])", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", " \
    \   let mut min_even = isize::max_value();\n    let mut min_even_idx = isize::max_value();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == isize::max_value() {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    evens[0].clone().into()",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_index]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n    \
    \    .collect::<Vec<_>>();\n    evens.sort_by_key(|&(i, x)| (x, i));\n    evens.get(0).map_or(vec![],\
    \ |&(i, x)| vec![*x, i as isize])", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut result = vec![];\n    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even !=\
    \ std::isize::MAX {\n        result.push(min_even);\n        result.push(min_even_index);\n\
    \    }\n    result", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &v)| v);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let\
    \ (i, &v) = evens[0];\n    vec![v, i as isize]", "    let mut evens = arr\n  \
    \      .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![];\n\
    \    }\n    evens.sort_by_key(|&(_, x)| x);\n    let (i, &x) = evens[0];\n   \
    \ vec![x, i as isize]", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 && x < min_even {\n            min_even = x;\n        \
    \    min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut smallest = std::isize::MAX;\n    let mut smallest_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < smallest\
    \ {\n            smallest = x;\n            smallest_index = i as isize;\n   \
    \     }\n    }\n    if smallest == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![smallest, smallest_index]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n  \
    \  }", "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut smallest = std::isize::MAX;\n    let mut smallest_index\
    \ = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if\
    \ v % 2 == 0 && v < smallest {\n            smallest = v;\n            smallest_index\
    \ = i as isize;\n        }\n    }\n    if smallest == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![smallest, smallest_index]\n    }", " \
    \   let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &v)| v);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let\
    \ (i, &v) = evens[0];\n    vec![v, i as isize]", "    let mut evens = arr\n  \
    \      .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    evens.first().map_or(vec![],\
    \ |&(i, x)| vec![x, i as isize])", "    let mut evens = arr\n        .iter()\n\
    \        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty() {\n        vec![]\n\
    \    } else {\n        vec![evens[0].1, evens[0].0 as isize]\n    }", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut evens\
    \ = arr\n        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x %\
    \ 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n\
    \    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n \
    \   for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even\
    \ {\n            min_even = v;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_index = isize::max_value();\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < &min_even {\n            min_even = *x;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ isize::max_value() {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if v\
    \ % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut even = std::isize::MAX;\n\
    \    let mut index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < even {\n            even = x;\n            index\
    \ = i as isize;\n        }\n    }\n    if even == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![even, index]\n    }", "    let mut evens = arr\n \
    \       .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_, &x)| x);\n    evens.first().map_or(vec![],\
    \ |(i, &x)| vec![x, *i as isize])", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_index = isize::max_value();\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n  \
    \  }", "    let mut min = isize::max_value();\n    let mut min_index = isize::max_value();\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min\
    \ {\n            min = v;\n            min_index = i as isize;\n        }\n  \
    \  }\n    if min == isize::max_value() {\n        vec![]\n    } else {\n     \
    \   vec![min, min_index]\n    }", "    let mut min_even = None;\n    let mut min_even_idx\
    \ = None;\n    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2\
    \ == 0 {\n            if min_even.is_none() || val < min_even.unwrap() {\n   \
    \             min_even = Some(val);\n                min_even_idx = Some(idx as\
    \ isize);\n            }\n        }\n    }\n    if let Some(min_even) = min_even\
    \ {\n        vec![min_even, min_even_idx.unwrap()]\n    } else {\n        vec![]\n\
    \    }", "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &n)| n % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ n)| n);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &n) = evens[0];\n        vec![n, i as isize]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_idx = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even {\n            min_even = *v;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even_idx ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min_even = isize::max_value();\n    let mut min_even_idx\
    \ = isize::max_value();\n    for (i, &x) in arr.iter().enumerate() {\n       \
    \ if x % 2 == 0 && x < min_even {\n            min_even = x;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == isize::max_value() {\n \
    \       vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", " \
    \   let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &v) = evens[0];\n    vec![v, i as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    if evens.is_empty() {\n\
    \        return vec![];\n    }\n    evens.sort_by_key(|(_, &x)| x);\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n    \
    \    .collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![];\n\
    \    }\n    evens.sort_by_key(|(_, &x)| x);\n    let (i, &x) = evens[0];\n   \
    \ vec![x, i as isize]", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 && x < min_even {\n            min_even = x;\n        \
    \    min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", " \
    \   let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &v) = evens[0];\n        vec![v, i as isize]\n    }", "    let mut evens\
    \ = arr\n        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x %\
    \ 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let (i, &x) = evens[0];\n\
    \    vec![x, i as isize]", "    let mut evens = arr\n        .iter()\n       \
    \ .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|(_, &x)| x);\n    evens.first().map_or(vec![], |(i, &x)|\
    \ vec![x, *i as isize])", "    let mut min_even = isize::max_value();\n    let\
    \ mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    if evens.is_empty() {\n\
    \        return vec![];\n    }\n    evens.sort_by_key(|&(_, x)| x);\n    evens.sort_by_key(|&(i,\
    \ _)| i);\n    let (i, &x) = evens[0];\n    vec![x, i as isize]", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even\
    \ {\n            min_even = v;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min {\n            min = x;\n            min_index\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_index]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|(i, &x)| (x, *i));\n  \
    \  evens.first().map_or(vec![], |(i, &x)| vec![x, *i as isize])", "    let mut\
    \ evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_, &x)|\
    \ x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)|\
    \ x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])", "   \
    \ let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    evens.first().map_or(vec![], |(i, &x)| vec![x, *i as isize])",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < &min {\n\
    \            min = *n;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    evens.first().map_or(vec![], |(i, &x)| vec![x, *i as isize])",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, x) = evens[0];\n        vec![x, i as isize]\n    }", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_index]", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if *n % 2 == 0 && *n < min_even\
    \ {\n            min_even = *n;\n            min_even_index = i as isize;\n  \
    \      }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_index]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n    \
    \    .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    evens.first().map_or(vec![],\
    \ |&(i, x)| vec![x, i as isize])", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even_idx == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n  \
    \  }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n     \
    \   .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even_idx ==\
    \ isize::max_value() {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    evens.first().map_or(vec![], |(i, &x)| vec![x, *i as isize])",
  "    let mut evens = vec![];\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x % 2 == 0 {\n            evens.push((x, i));\n        }\n    }\n    evens.sort();\n\
    \    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].0,\
    \ evens[0].1 as isize]\n    }", "    let mut evens = arr\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|&(_, v)| v);\n    if evens.is_empty() {\n        return\
    \ vec![];\n    }\n    let (i, &v) = evens[0];\n    vec![v, i as isize]", "   \
    \ let mut min_even = isize::max_value();\n    let mut min_even_idx = isize::max_value();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == isize::max_value() {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let (i, x) = evens[0];\n        vec![x,\
    \ i as isize]\n    }", "    let mut min_even = None;\n    let mut min_even_idx\
    \ = None;\n    for (idx, &v) in arr.iter().enumerate() {\n        if v % 2 ==\
    \ 0 {\n            if let Some(m) = min_even {\n                if v < m {\n \
    \                   min_even = Some(v);\n                    min_even_idx = Some(idx);\n\
    \                }\n            } else {\n                min_even = Some(v);\n\
    \                min_even_idx = Some(idx);\n            }\n        }\n    }\n\
    \    match (min_even, min_even_idx) {\n        (Some(m), Some(i)) => vec![m, i\
    \ as isize],\n        _ => vec![],\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min_even {\n            min_even = *v;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for\
    \ (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n  \
    \          min = x;\n            min_idx = i as isize;\n        }\n    }\n   \
    \ if min == std::isize::MAX {\n        return vec![];\n    }\n    vec![min, min_idx]",
  "    let mut min_even = isize::max_value();\n    let mut min_even_index = isize::max_value();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == isize::max_value() {\n        vec![]\n    }\
    \ else {\n        vec![min_even, min_even_index]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_idx = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < &min_even\
    \ {\n            min_even = *n;\n            min_even_idx = i as isize;\n    \
    \    }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &v)| v % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(i, v)| (v, i));\n   \
    \ if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].1,\
    \ evens[0].0 as isize]\n    }", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if *n\
    \ % 2 == 0 && *n < min_even {\n            min_even = *n;\n            min_even_idx\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_index]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_idx = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &min {\n            min = *v;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    if arr.is_empty() {\n\
    \        return vec![];\n    }\n    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].1,\
    \ evens[0].0 as isize]\n    }", "    let mut evens = arr\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|(_, &x)| x);\n    if evens.is_empty() {\n        vec![]\n\
    \    } else {\n        vec![evens[0].1, evens[0].0 as isize]\n    }", "    let\
    \ mut min = std::isize::MAX;\n    let mut min_index = std::isize::MAX;\n    for\
    \ (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n  \
    \          min = x;\n            min_index = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_index]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &n)| n % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ n)| n);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &n) = evens[0];\n        vec![n, i as isize]\n    }", "    let mut min =\
    \ std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for (i, &v) in\
    \ arr.iter().enumerate() {\n        if v % 2 == 0 && v < min {\n            min\
    \ = v;\n            min_idx = i as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min, min_idx]\n    }", "    let\
    \ mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].1,\
    \ evens[0].0 as isize]\n    }", "    let mut evens = arr\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n\
    \    evens.sort_by_key(|(_, &x)| x);\n    evens.first().map_or(vec![], |(i, &x)|\
    \ vec![x, *i as isize])", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut min = std::isize::MAX;\n\
    \    let mut min_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min {\n            min = x;\n            min_index\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_index]\n    }", "    let mut evens = vec![];\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n      \
    \      evens.push((x, i));\n        }\n    }\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        vec![evens[0].0, evens[0].1 as isize]\n\
    \    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < min_even {\n \
    \           min_even = n;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_index]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_idx = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min {\n            min = v;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let (i, &x) = evens[0];\n        vec![x,\
    \ i as isize]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even_idx ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min = isize::max_value();\n    let mut min_index = isize::max_value();\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_index = i as isize;\n        }\n  \
    \  }\n    if min == isize::max_value() {\n        vec![]\n    } else {\n     \
    \   vec![min, min_index]\n    }", "    let mut min = std::isize::MAX;\n    let\
    \ mut min_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 && x < min {\n            min = x;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_idx = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < min {\n            min = v;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for\
    \ (i, &n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < min {\n  \
    \          min = n;\n            min_idx = i as isize;\n        }\n    }\n   \
    \ if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].1,\
    \ evens[0].0 as isize]\n    }", "    let mut min_even = std::isize::MAX;\n   \
    \ let mut min_even_idx = std::isize::MAX;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < &min_even {\n            min_even = *x;\n  \
    \          min_even_idx = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < &min {\n\
    \            min = *x;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut min =\
    \ std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for (i, &x) in\
    \ arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n            min\
    \ = x;\n            min_idx = i as isize;\n        }\n    }\n    if min == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min, min_idx]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_idx = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n  \
    \  }", "    let mut min_even = isize::max_value();\n    let mut min_even_index\
    \ = isize::max_value();\n    for (i, v) in arr.iter().enumerate() {\n        if\
    \ *v % 2 == 0 && *v < min_even {\n            min_even = *v;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == isize::max_value() {\n \
    \       return vec![];\n    }\n    vec![min_even, min_even_index]", "    let mut\
    \ min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n      \
    \      min = x;\n            min_idx = i as isize;\n        }\n    }\n    if min\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min, min_idx]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x % 2 == 0 && x < min_even {\n            min_even = x;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_index]\n    }", " \
    \   let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, &x) = evens[0];\n        vec![x, i as isize]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (i,\
    \ &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even {\n \
    \           min_even = v;\n            min_even_idx = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_idx]\n    }", "    let mut min = std::isize::MAX;\n\
    \    let mut min_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min {\n            min = *n;\n            min_index\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_index]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &v)| v % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, v)| v);\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let (i, v) = evens[0];\n        vec![v,\
    \ i as isize]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|(_,\
    \ &x)| x);\n    evens.first().map_or(vec![], |(i, &x)| vec![x, *i as isize])",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let (idx, val) = evens[0];\n    vec![val,\
    \ idx as isize]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if\
    \ v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_index]\n    }", " \
    \   let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n \
    \   for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min\
    \ {\n            min = x;\n            min_idx = i as isize;\n        }\n    }\n\
    \    if min == std::isize::MAX {\n        vec![]\n    } else {\n        vec![min,\
    \ min_idx]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|&(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(i,\
    \ x)| (x, i));\n    if evens.is_empty() {\n        vec![]\n    } else {\n    \
    \    vec![evens[0].1, evens[0].0 as isize]\n    }", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut evens = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    if evens.is_empty() {\n        return vec![];\n    }\n    let (i,\
    \ &x) = evens[0];\n    vec![x, i as isize]", "    let mut evens = arr\n      \
    \  .iter()\n        .enumerate()\n        .filter(|&(_, &x)| x % 2 == 0)\n   \
    \     .collect::<Vec<_>>();\n    evens.sort_by_key(|&(i, x)| (x, i));\n    evens.get(0).map_or(vec![],\
    \ |&(i, x)| vec![*x, i as isize])", "    let mut min = std::isize::MAX;\n    let\
    \ mut min_idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 && x < min {\n            min = x;\n            min_idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, min_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![];\n\
    \    }\n    evens.sort_by_key(|(_, &x)| x);\n    let (i, &x) = evens[0];\n   \
    \ vec![x, i as isize]", "    let mut min_even = isize::max_value();\n    let mut\
    \ min_even_index = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even_index\
    \ == isize::max_value() {\n        vec![]\n    } else {\n        vec![min_even,\
    \ min_even_index]\n    }", "    let mut min_even = None;\n    let mut min_even_idx\
    \ = None;\n    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2\
    \ == 0 {\n            if min_even.is_none() || val < min_even.unwrap() {\n   \
    \             min_even = Some(val);\n                min_even_idx = Some(idx as\
    \ isize);\n            }\n        }\n    }\n    match (min_even, min_even_idx)\
    \ {\n        (Some(val), Some(idx)) => vec![val, idx],\n        _ => vec![],\n\
    \    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n   \
    \     .filter(|(_, &v)| v % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ v)| v);\n    if evens.is_empty() {\n        vec![]\n    } else {\n        let\
    \ (i, v) = evens[0];\n        vec![v, i as isize]\n    }", "    let mut min =\
    \ std::isize::MAX;\n    let mut idx = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min {\n            min = x;\n            idx\
    \ = i as isize;\n        }\n    }\n    if min == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min, idx]\n    }", "    let mut min_even = isize::max_value();\n\
    \    let mut min_even_idx = isize::max_value();\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_idx = i as isize;\n        }\n    }\n    if min_even == isize::max_value()\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &min_even\
    \ {\n            min_even = *v;\n            min_even_idx = i as isize;\n    \
    \    }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &min_even {\n            min_even = *n;\n  \
    \          min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even, min_even_index]",
  "    let mut min = std::isize::MAX;\n    let mut min_idx = std::isize::MAX;\n  \
    \  for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min {\n\
    \            min = x;\n            min_idx = i as isize;\n        }\n    }\n \
    \   if min == std::isize::MAX {\n        return vec![];\n    }\n    vec![min,\
    \ min_idx]", "    let mut min_even = isize::max_value();\n    let mut min_even_index\
    \ = isize::max_value();\n    for (i, &x) in arr.iter().enumerate() {\n       \
    \ if x % 2 == 0 && x < min_even {\n            min_even = x;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == isize::max_value() {\n \
    \       vec![]\n    } else {\n        vec![min_even, min_even_index]\n    }",
  "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_idx = i as isize;\n     \
    \   }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, &x)| x % 2 == 0)\n\
    \        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_, x)| x);\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let (i, &x) = evens[0];\n        vec![x,\
    \ i as isize]\n    }", "    let mut evens = arr\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, &x)| x % 2 == 0)\n        .collect::<Vec<_>>();\n    evens.sort_by_key(|&(_,\
    \ x)| x);\n    evens.first().map_or(vec![], |&(i, x)| vec![x, i as isize])"]
stop_tokens:
- "\n}"
