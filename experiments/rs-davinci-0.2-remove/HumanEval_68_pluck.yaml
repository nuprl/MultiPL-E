name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
  fn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4,\
  \ 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
  \ 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]),\
  \ vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n  \
  \  assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7,\
  \ 9, 7, 1]), Vec::<isize>::new());\n}\n"
completions: ["    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&x| x\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    match evens.first() {\n        Some(x) => vec![*x, arr.iter().position(|&y|\
    \ y == *x).unwrap() as isize],\n        None => vec![],\n    }", "    let mut\
    \ evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_index = 0;\n    for (i, &x) in\
    \ arr.iter().enumerate() {\n        if x == min_even {\n            min_index\
    \ = i;\n            break;\n        }\n    }\n    vec![min_even, min_index as\
    \ isize]", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest = evens[0];\n    for i in evens {\n        if arr[i as usize] < arr[smallest\
    \ as usize] {\n            smallest = i;\n        }\n    }\n    vec![arr[smallest\
    \ as usize], smallest]", "    let mut smallest_even = isize::max_value();\n  \
    \  let mut smallest_even_index = isize::max_value();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if *v % 2 == 0 && *v < smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == isize::max_value() {\n        return vec![];\n    }\n  \
    \  vec![smallest_even, smallest_even_index]", "    let mut evens: Vec<isize> =\
    \ Vec::new();\n    let mut even_idx: Vec<usize> = Vec::new();\n    for (idx, val)\
    \ in arr.iter().enumerate() {\n        if val % 2 == 0 {\n            evens.push(*val);\n\
    \            even_idx.push(idx);\n        }\n    }\n    if evens.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut min_val = evens[0];\n    let mut min_idx\
    \ = even_idx[0];\n    for (idx, val) in evens.iter().enumerate() {\n        if\
    \ val < &min_val {\n            min_val = *val;\n            min_idx = even_idx[idx];\n\
    \        }\n    }\n    vec![min_val, min_idx as isize]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] == smallest_even {\n            smallest_even_index = i;\n\
    \            break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n       \
    \ if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n       \
    \     min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, &x) in arr.iter().enumerate() {\n        if x == smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even_idx\
    \ == std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]",
  "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v %\
    \ 2 == 0 && *v < smallest_even {\n            smallest_even = *v;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even, smallest_even_index]",
  "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v %\
    \ 2 == 0 && v < &smallest_even {\n            smallest_even = *v;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, v) in evens.iter().enumerate() {\n        if v < &min_even {\n  \
    \          min_even = *v;\n            min_even_index = even_indexes[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut smallest\
    \ = None;\n    let mut smallest_idx = None;\n    for (idx, &val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 {\n            if smallest.is_none() || val < smallest.unwrap()\
    \ {\n                smallest = Some(val);\n                smallest_idx = Some(idx);\n\
    \            }\n        }\n    }\n    match (smallest, smallest_idx) {\n     \
    \   (Some(smallest), Some(smallest_idx)) => vec![smallest, smallest_idx as isize],\n\
    \        _ => vec![],\n    }", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut even_indices: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indices.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indices[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, &x) in arr.iter().enumerate() {\n        if x == smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut smallest_even\
    \ = isize::max_value();\n    let mut smallest_even_index = isize::max_value();\n\
    \    for (i, &n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < smallest_even\
    \ {\n            smallest_even = n;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == isize::max_value() {\n        vec![]\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&x| x\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x == &smallest_even {\n            smallest_even_index = i;\n\
    \            break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx\
    \ = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n       \
    \ if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n       \
    \     min_even_idx = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]", "    let\
    \ mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&x| x\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if *n\
    \ % 2 == 0 && *n < smallest_even {\n            smallest_even = *n;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n       \
    \     evens.push(i as isize);\n        }\n    }\n    if evens.len() == 0 {\n \
    \       return vec![];\n    }\n    let mut min_index = evens[0];\n    for i in\
    \ evens {\n        if arr[i as usize] < arr[min_index as usize] {\n          \
    \  min_index = i;\n        }\n    }\n    vec![arr[min_index as usize], min_index]",
  "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n %\
    \ 2 == 0 && n < &smallest_even {\n            smallest_even = *n;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even, smallest_even_index]",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = 0;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_idx as isize]",
  "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_even_index = 0;\n    for (i, &x)\
    \ in arr.iter().enumerate() {\n        if x == min_even {\n            min_even_index\
    \ = i;\n            break;\n        }\n    }\n    vec![min_even, min_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 ==\
    \ 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   vec![]\n    } else {\n        let smallest_even = evens[0];\n        let index\
    \ = arr.iter().position(|&x| x == smallest_even).unwrap();\n        vec![smallest_even,\
    \ index as isize]\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_idx: Vec<usize> = Vec::new();\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 {\n            evens.push(*val);\n            even_idx.push(idx);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let mut min_idx = 0;\n \
    \   for (idx, val) in evens.iter().enumerate() {\n        if val == min_even {\n\
    \            min_idx = idx;\n            break;\n        }\n    }\n    vec![*min_even,\
    \ even_idx[min_idx] as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    match evens.first()\
    \ {\n        Some(x) => vec![*x, arr.iter().position(|&y| y == *x).unwrap() as\
    \ isize],\n        None => vec![],\n    }", "    let mut evens: Vec<isize> = arr.into_iter().filter(|&x|\
    \ x % 2 == 0).collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   vec![]\n    } else {\n        vec![evens[0], arr.iter().position(|&x| x ==\
    \ evens[0]).unwrap() as isize]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let smallest_even = evens[0];\n   \
    \     let index = arr.iter().position(|&x| x == smallest_even).unwrap();\n   \
    \     vec![smallest_even, index as isize]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let min = evens[0];\n\
    \    let mut min_index = 0;\n    for (i, x) in arr.iter().enumerate() {\n    \
    \    if x == &min {\n            min_index = i;\n            break;\n        }\n\
    \    }\n    vec![min, min_index as isize]", "    let mut evens: Vec<isize> = arr.into_iter().filter(|x|\
    \ x % 2 == 0).collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return vec![];\n    }\n    let smallest_even = evens[0];\n    let smallest_even_index\
    \ = arr.iter().position(|x| x == &smallest_even).unwrap();\n    vec![smallest_even,\
    \ smallest_even_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut index = 0;\n    for i in arr {\n        if i % 2 == 0 {\n       \
    \     evens.push(i);\n        }\n        index += 1;\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut min = evens[0];\n    let\
    \ mut min_index = 0;\n    for i in 0..evens.len() {\n        if evens[i] < min\
    \ {\n            min = evens[i];\n            min_index = i;\n        }\n    }\n\
    \    vec![min, min_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ index = arr.iter().position(|&x| x == smallest_even).unwrap();\n    vec![smallest_even,\
    \ index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|x| x %\
    \ 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n\
    \        return vec![];\n    }\n    let min = evens[0];\n    let mut min_index\
    \ = 0;\n    for (i, x) in arr.iter().enumerate() {\n        if x == &min {\n \
    \           min_index = i;\n            break;\n        }\n    }\n    vec![min,\
    \ min_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ mut smallest_index = 0;\n    for (index, value) in arr.iter().enumerate() {\n\
    \        if *value == smallest_even {\n            smallest_index = index;\n \
    \           break;\n        }\n    }\n    vec![smallest_even, smallest_index as\
    \ isize]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, &v) in arr.iter().enumerate() {\n        if\
    \ v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    vec![]\n    } else {\n        vec![min_even, min_even_index]\n    }", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|x| x\
    \ == &smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "  \
    \  let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min = evens[0];\n    let mut min_idx = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == min {\n            min_idx = i;\n            break;\n   \
    \     }\n    }\n    vec![min, min_idx as isize]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let min = evens[0];\n\
    \    let mut idx = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x == min {\n            idx = i;\n            break;\n        }\n    }\n   \
    \ vec![min, idx as isize]", "    let mut evens: Vec<isize> = Vec::new();\n   \
    \ let mut idx: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            idx.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min = evens.iter().min().unwrap();\n    let mut min_idx = 0;\n    for\
    \ (i, v) in evens.iter().enumerate() {\n        if v == min {\n            min_idx\
    \ = i;\n            break;\n        }\n    }\n    vec![*min, idx[min_idx] as isize]",
  "    let mut evens: Vec<isize> = Vec::new();\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ min_index = evens[0];\n    let mut min_value = arr[evens[0] as usize];\n   \
    \ for i in evens {\n        if arr[i as usize] < min_value {\n            min_index\
    \ = i;\n            min_value = arr[i as usize];\n        }\n    }\n    vec![min_value,\
    \ min_index]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 ==\
    \ 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return vec![];\n    }\n    let smallest_even = evens[0];\n    let index =\
    \ arr.iter().position(|&x| x == smallest_even).unwrap();\n    vec![smallest_even,\
    \ index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    for (i,\
    \ x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut min = evens[0];\n    for x in evens.iter() {\n        if arr[*x\
    \ as usize] < arr[min as usize] {\n            min = *x;\n        }\n    }\n \
    \   vec![arr[min as usize], min]", "    let mut smallest_even = None;\n    let\
    \ mut smallest_even_index = None;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x % 2 == 0 {\n            if smallest_even.is_none() || x < smallest_even.unwrap()\
    \ {\n                smallest_even = Some(x);\n                smallest_even_index\
    \ = Some(i);\n            }\n        }\n    }\n    if smallest_even.is_none()\
    \ {\n        return vec![];\n    }\n    vec![smallest_even.unwrap(), smallest_even_index.unwrap()\
    \ as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 ==\
    \ 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return vec![];\n    }\n    let min_even = evens[0];\n    let mut min_even_index\
    \ = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if x == min_even\
    \ {\n            min_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![min_even, min_even_index as isize]", "    let mut smallest = std::isize::MAX;\n\
    \    let mut index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n       \
    \ if x % 2 == 0 && x < smallest {\n            smallest = x;\n            index\
    \ = i;\n        }\n    }\n    if smallest == std::isize::MAX {\n        return\
    \ vec![];\n    }\n    vec![smallest, index as isize]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < &min_even {\n \
    \           min_even = *n;\n            min_even_index = i as isize;\n       \
    \ }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n\
    \        vec![min_even, min_even_index]\n    }", "    let mut smallest_even =\
    \ std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n    for\
    \ (index, value) in arr.iter().enumerate() {\n        if value % 2 == 0 && value\
    \ < &smallest_even {\n            smallest_even = *value;\n            smallest_even_index\
    \ = index as isize;\n        }\n    }\n    if smallest_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![smallest_even, smallest_even_index]",
  "    let mut min_even = None;\n    let mut min_even_idx = None;\n    for (idx, &val)\
    \ in arr.iter().enumerate() {\n        if val % 2 == 0 {\n            if min_even.is_none()\
    \ || val < min_even.unwrap() {\n                min_even = Some(val);\n      \
    \          min_even_idx = Some(idx);\n            }\n        }\n    }\n    match\
    \ (min_even, min_even_idx) {\n        (Some(val), Some(idx)) => vec![val, idx\
    \ as isize],\n        _ => vec![],\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        return vec![];\n    }\n    vec![min_even, min_even_index]", "   \
    \ let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n %\
    \ 2 == 0 && n < &smallest_even {\n            smallest_even = *n;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut smallest_even = isize::max_value();\n\
    \    let mut smallest_even_index = isize::max_value();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even_index == isize::max_value() {\n        vec![]\n    } else {\n\
    \        vec![smallest_even, smallest_even_index]\n    }", "    let mut evens:\
    \ Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let smallest_even_index = arr.iter().position(|&x| x == smallest_even).unwrap();\n\
    \    vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(i as isize);\n        }\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut min = evens[0];\n    for\
    \ i in evens {\n        if arr[i as usize] < arr[min as usize] {\n           \
    \ min = i;\n        }\n    }\n    vec![arr[min as usize], min]", "    let mut\
    \ evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (index, value) in arr.iter().enumerate() {\n        if *value == smallest_even\
    \ {\n            smallest_even_index = index;\n            break;\n        }\n\
    \    }\n    vec![smallest_even, smallest_even_index as isize]", "    let mut smallest_even\
    \ = None;\n    let mut smallest_even_index = None;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            match smallest_even {\n            \
    \    None => {\n                    smallest_even = Some(*v);\n              \
    \      smallest_even_index = Some(i);\n                }\n                Some(x)\
    \ => {\n                    if x > *v {\n                        smallest_even\
    \ = Some(*v);\n                        smallest_even_index = Some(i);\n      \
    \              }\n                }\n            }\n        }\n    }\n    match\
    \ smallest_even {\n        None => vec![],\n        Some(x) => vec![x, smallest_even_index.unwrap()\
    \ as isize],\n    }", "    let mut smallest_even = isize::max_value();\n    let\
    \ mut smallest_even_index = isize::max_value();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if *v % 2 == 0 && *v < smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == isize::max_value() {\n        vec![]\n    } else {\n   \
    \     vec![smallest_even, smallest_even_index]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let min = evens[0];\n\
    \    let mut min_index = 0;\n    for (i, x) in arr.iter().enumerate() {\n    \
    \    if x == &min {\n            min_index = i;\n            break;\n        }\n\
    \    }\n    vec![min, min_index as isize]", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(i as isize);\n        }\n    }\n    if evens.len() == 0 {\n \
    \       return vec![];\n    }\n    let mut min_even = evens[0];\n    for i in\
    \ evens {\n        if arr[i as usize] < arr[min_even as usize] {\n           \
    \ min_even = i;\n        }\n    }\n    vec![arr[min_even as usize], min_even]",
  "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min = evens[0];\n    let mut min_index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == min {\n            min_index = i;\n            break;\n \
    \       }\n    }\n    vec![min, min_index as isize]", "    let mut even_nodes:\
    \ Vec<(isize, usize)> = arr\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ &x)| x % 2 == 0)\n        .collect();\n    even_nodes.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    if even_nodes.is_empty() {\n        vec![]\n    } else {\n        vec![even_nodes[0].0\
    \ as isize, even_nodes[0].1 as isize]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.into_iter().filter(|&x| x % 2 == 0).collect();\n    evens.sort();\n  \
    \  evens.first().map(|&x| vec![x, arr.iter().position(|&y| y == x).unwrap() as\
    \ isize]).unwrap_or(vec![])", "    let mut evens: Vec<isize> = Vec::new();\n \
    \   let mut even_indexes: Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_index = even_indexes[evens.iter().position(|&r|\
    \ r == *min_even).unwrap()];\n    vec![*min_even, min_index as isize]", "    let\
    \ mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, x) in arr.iter().enumerate() {\n        if x == &smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut even_indices: Vec<usize> = Vec::new();\n    for (i,\
    \ n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(*n);\n\
    \            even_indices.push(i);\n        }\n    }\n    if evens.len() == 0\
    \ {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indices[evens.iter().position(|&x| x == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < smallest_even {\n            smallest_even =\
    \ n;\n            smallest_even_index = i as isize;\n        }\n    }\n    if\
    \ smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let min_even = evens[0];\n    let mut\
    \ min_even_idx = 0;\n    for (idx, val) in arr.iter().enumerate() {\n        if\
    \ val == &min_even {\n            min_even_idx = idx;\n            break;\n  \
    \      }\n    }\n    vec![min_even, min_even_idx as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < min_even {\n \
    \           min_even = n;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        return vec![];\n    }\n\
    \    vec![min_even, min_even_index]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ index = arr.iter().position(|&x| x == smallest_even).unwrap();\n    vec![smallest_even,\
    \ index as isize]", "    let mut smallest_even = std::isize::MAX;\n    let mut\
    \ smallest_even_index = std::isize::MAX;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < smallest_even {\n            smallest_even =\
    \ n;\n            smallest_even_index = i as isize;\n        }\n    }\n    if\
    \ smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut min_even = std::isize::MAX;\n   \
    \ let mut min_even_index = std::isize::MAX;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if *x % 2 == 0 && *x < min_even {\n            min_even = *x;\n \
    \           min_even_index = i as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n\
    \    }", "    if arr.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ evens: Vec<isize> = vec![];\n    let mut even_indexes: Vec<usize> = vec![];\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n       \
    \     evens.push(*v);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = evens.iter().position(|&x| x == *min_even).unwrap();\n\
    \    vec![*min_even, even_indexes[min_even_index] as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(i as isize);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return vec![];\n    }\n    let mut min = evens[0];\n\
    \    for i in evens {\n        if arr[i as usize] < arr[min as usize] {\n    \
    \        min = i;\n        }\n    }\n    vec![arr[min as usize], min]", "    let\
    \ mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&x| x\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut evens: Vec<isize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ min = evens[0];\n    for i in evens {\n        if arr[i as usize] < arr[min\
    \ as usize] {\n            min = i;\n        }\n    }\n    vec![arr[min as usize],\
    \ min]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v\
    \ % 2 == 0 && v < &min_even {\n            min_even = *v;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    return vec![];\n    }\n    vec![min_even, min_even_index]", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n\
    \    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even\
    \ {\n            min_even = x;\n            min_even_index = i as isize;\n   \
    \     }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_index]\n    }", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(i as isize);\n        }\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut min = evens[0];\n    for\
    \ i in evens.iter() {\n        if arr[*i as usize] < arr[min as usize] {\n   \
    \         min = *i;\n        }\n    }\n    vec![arr[min as usize], min]", "  \
    \  let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v %\
    \ 2 == 0 && *v < smallest_even {\n            smallest_even = *v;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even, smallest_even_index]",
  "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, x) in arr.iter().enumerate() {\n        if x == &smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even =\
    \ evens[0];\n    let mut min_even_idx = 0;\n    for (idx, &val) in arr.iter().enumerate()\
    \ {\n        if val == min_even {\n            min_even_idx = idx;\n         \
    \   break;\n        }\n    }\n    vec![min_even, min_even_idx as isize]", "  \
    \  let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v %\
    \ 2 == 0 && v < &smallest_even {\n            smallest_even = *v;\n          \
    \  smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        vec![]\n    } else {\n        let smallest_even = evens[0];\n   \
    \     let smallest_even_index = arr.iter().position(|&x| x == smallest_even).unwrap();\n\
    \        vec![smallest_even, smallest_even_index as isize]\n    }", "    let mut\
    \ min_even = None;\n    let mut min_even_index = None;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 {\n            if min_even.is_none() || *x < min_even.unwrap()\
    \ {\n                min_even = Some(*x);\n                min_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (min_even, min_even_index) {\n   \
    \     (Some(x), Some(i)) => vec![x, i as isize],\n        _ => vec![],\n    }",
  "    let mut evens: Vec<isize> = Vec::new();\n    let mut index: usize = 0;\n  \
    \  for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n         \
    \   evens.push(*n);\n            index = i;\n        }\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    evens.sort();\n    vec![evens[0],\
    \ index as isize]", "    let mut even_nodes: Vec<(isize, usize)> = Vec::new();\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 {\n       \
    \     even_nodes.push((*v, i));\n        }\n    }\n    even_nodes.sort();\n  \
    \  if even_nodes.len() > 0 {\n        vec![even_nodes[0].0, even_nodes[0].1 as\
    \ isize]\n    } else {\n        vec![]\n    }", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x % 2 == 0 {\n            evens.push(x);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, &x) in evens.iter().enumerate() {\n        if x < min_even {\n  \
    \          min_even = x;\n            min_even_index = even_indexes[i];\n    \
    \    }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    for (i, v) in arr.iter().enumerate() {\n     \
    \   if v % 2 == 0 {\n            evens.push(i as isize);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return vec![];\n    }\n    let mut min_even\
    \ = evens[0];\n    for i in evens {\n        if arr[i as usize] < arr[min_even\
    \ as usize] {\n            min_even = i;\n        }\n    }\n    vec![arr[min_even\
    \ as usize], min_even]", "    let mut min_even = std::isize::MAX;\n    let mut\
    \ min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut\
    \ smallest_even = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n\
    \    for (i, v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < &smallest_even\
    \ {\n            smallest_even = *v;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![smallest_even, smallest_even_index]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < &min_even {\n \
    \           min_even = *x;\n            min_even_index = i as isize;\n       \
    \ }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n\
    \        vec![min_even, min_even_index]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for (i, x) in arr.iter().enumerate()\
    \ {\n        if x == &smallest_even {\n            smallest_even_index = i;\n\
    \            break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, n) in\
    \ arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut min_index = evens[0];\n    let mut min_value = arr[evens[0]\
    \ as usize];\n    for i in evens.iter() {\n        if arr[*i as usize] < min_value\
    \ {\n            min_index = *i;\n            min_value = arr[*i as usize];\n\
    \        }\n    }\n    vec![min_value, min_index]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == smallest_even {\n            smallest_even_index = i;\n \
    \           break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_idx:\
    \ Vec<usize> = Vec::new();\n    for (idx, val) in arr.iter().enumerate() {\n \
    \       if val % 2 == 0 {\n            evens.push(*val);\n            even_idx.push(idx);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_even_idx = even_idx[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_idx as isize]", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min = evens[0];\n    let mut index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == min {\n            index = i;\n            break;\n     \
    \   }\n    }\n    vec![min, index as isize]", "    let mut evens: Vec<isize> =\
    \ arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x == smallest_even {\n            smallest_even_index = i;\n \
    \           break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n\
    \    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < smallest_even\
    \ {\n            smallest_even = v;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![smallest_even, smallest_even_index]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < min_even\
    \ {\n            min_even = val;\n            min_even_idx = idx as isize;\n \
    \       }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    }\
    \ else {\n        vec![min_even, min_even_idx]\n    }", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even {\n \
    \           min_even = v;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even == std::isize::MAX {\n        vec![]\n    } else {\n \
    \       vec![min_even, min_even_index]\n    }", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &smallest_even {\n            smallest_even\
    \ = *n;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even,\
    \ smallest_even_index]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    match evens.first()\
    \ {\n        Some(x) => {\n            let mut index = 0;\n            for (i,\
    \ &v) in arr.iter().enumerate() {\n                if v == *x {\n            \
    \        index = i;\n                    break;\n                }\n         \
    \   }\n            vec![*x, index as isize]\n        }\n        None => vec![],\n\
    \    }", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(i as isize);\n        }\n\
    \    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_index\
    \ = evens.iter().min().unwrap();\n    vec![arr[*min_index as usize], *min_index]",
  "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&x| x\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        vec![]\n    } else {\n\
    \        let min = evens[0];\n        let mut min_index = 0;\n        for (i,\
    \ x) in arr.iter().enumerate() {\n            if x == &min {\n               \
    \ min_index = i;\n                break;\n            }\n        }\n        vec![min,\
    \ min_index as isize]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|n|\
    \ n % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let min = evens[0];\n    let mut min_idx\
    \ = 0;\n    for (i, n) in arr.iter().enumerate() {\n        if n == &min {\n \
    \           min_idx = i;\n            break;\n        }\n    }\n    vec![min,\
    \ min_idx as isize]", "    let mut min_even = None;\n    let mut min_even_idx\
    \ = None;\n    for (idx, val) in arr.iter().enumerate() {\n        if val % 2\
    \ == 0 {\n            if min_even.is_none() || val < min_even.unwrap() {\n   \
    \             min_even = Some(*val);\n                min_even_idx = Some(idx);\n\
    \            }\n        }\n    }\n    match (min_even, min_even_idx) {\n     \
    \   (Some(min_even), Some(min_even_idx)) => vec![min_even, min_even_idx as isize],\n\
    \        _ => vec![],\n    }", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut min_even: isize = isize::max_value();\n    let mut min_even_index:\
    \ usize = 0;\n    for (index, value) in arr.iter().enumerate() {\n        if value\
    \ % 2 == 0 {\n            evens.push(*value);\n            if *value < min_even\
    \ {\n                min_even = *value;\n                min_even_index = index;\n\
    \            }\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_index as isize]", "    let mut evens: Vec<(isize,\
    \ usize)> = arr\n        .iter()\n        .enumerate()\n        .filter(|(_, &x)|\
    \ x % 2 == 0)\n        .collect();\n    evens.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    if evens.is_empty() {\n        vec![]\n    } else {\n        vec![evens[0].0\
    \ as isize, evens[0].1 as isize]\n    }", "    let mut even_nodes: Vec<(isize,\
    \ usize)> = arr\n        .iter()\n        .enumerate()\n        .filter(|(_, v)|\
    \ v.is_even())\n        .collect();\n    even_nodes.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    if even_nodes.is_empty() {\n        return vec![];\n    }\n    let (value,\
    \ index) = even_nodes[0];\n    vec![value, index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n    }\
    \ else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let index = arr.iter().position(|&x| x == smallest_even).unwrap();\n\
    \    vec![smallest_even, index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x == smallest_even {\n            smallest_even_index = i;\n     \
    \       break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut smallest_even = None;\n    let mut smallest_even_index\
    \ = None;\n    for (index, value) in arr.iter().enumerate() {\n        if *value\
    \ % 2 == 0 {\n            if smallest_even.is_none() || *value < smallest_even.unwrap()\
    \ {\n                smallest_even = Some(*value);\n                smallest_even_index\
    \ = Some(index);\n            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(value), Some(index)) => vec![value, index as isize],\n    \
    \    _ => vec![],\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes: Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min = evens.iter().min().unwrap();\n    let min_index = even_indexes[evens.iter().position(|&r|\
    \ r == *min).unwrap()];\n    vec![*min, min_index as isize]", "    let mut evens:\
    \ Vec<isize> = Vec::new();\n    for (i, x) in arr.iter().enumerate() {\n     \
    \   if x % 2 == 0 {\n            evens.push(i as isize);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return vec![];\n    }\n    let mut min_i =\
    \ evens[0];\n    let mut min_v = arr[evens[0] as usize];\n    for i in evens {\n\
    \        if arr[i as usize] < min_v {\n            min_i = i;\n            min_v\
    \ = arr[i as usize];\n        }\n    }\n    vec![min_v, min_i]", "    let mut\
    \ evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_even_index = 0;\n    for (i, &x)\
    \ in arr.iter().enumerate() {\n        if x == min_even {\n            min_even_index\
    \ = i;\n            break;\n        }\n    }\n    vec![min_even, min_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n     \
    \   if n % 2 == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&r|\
    \ r == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut smallest_even = None;\n    let mut smallest_even_index = None;\n \
    \   for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n        \
    \    if smallest_even.is_none() || n < &smallest_even.unwrap() {\n           \
    \     smallest_even = Some(*n);\n                smallest_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(n), Some(i)) => vec![n, i as isize],\n        _ => vec![],\n\
    \    }", "    let mut evens: Vec<isize> = arr.into_iter().filter(|x| x % 2 ==\
    \ 0).collect();\n    evens.sort();\n    evens.first().map(|x| vec![*x, arr.iter().position(|y|\
    \ *y == *x).unwrap() as isize]).unwrap_or(vec![])", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    for (i,\
    \ &n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n            evens.push(n);\n\
    \            even_indexes.push(i);\n        }\n    }\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_index = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n\
    \    vec![*min_even, min_index as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ smallest_even_index = arr.iter().position(|&x| x == smallest_even).unwrap();\n\
    \    vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even =\
    \ evens[0];\n    let min_even_index = arr.iter().position(|&x| x == min_even).unwrap();\n\
    \    vec![min_even, min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < min_even {\n            min_even = val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]",
  "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index =\
    \ std::isize::MAX;\n    for (index, value) in arr.iter().enumerate() {\n     \
    \   if value % 2 == 0 && value < &smallest_even {\n            smallest_even =\
    \ *value;\n            smallest_even_index = index as isize;\n        }\n    }\n\
    \    if smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n   \
    \     vec![smallest_even, smallest_even_index]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    evens.sort();\n    let min_even = evens[0];\n\
    \    let min_index = arr.iter().position(|x| x == &min_even).unwrap();\n    vec![min_even,\
    \ min_index as isize]", "    let mut smallest_even = None;\n    let mut smallest_even_idx\
    \ = None;\n    for (idx, val) in arr.iter().enumerate() {\n        if val % 2\
    \ == 0 {\n            if smallest_even.is_none() || val < smallest_even.unwrap()\
    \ {\n                smallest_even = Some(*val);\n                smallest_even_idx\
    \ = Some(idx);\n            }\n        }\n    }\n    match (smallest_even, smallest_even_idx)\
    \ {\n        (Some(even), Some(idx)) => vec![even, idx as isize],\n        _ =>\
    \ vec![],\n    }", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, v)\
    \ in arr.iter().enumerate() {\n        if v % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut min = evens[0];\n    for i in evens {\n        if arr[i as\
    \ usize] < arr[min as usize] {\n            min = i;\n        }\n    }\n    return\
    \ vec![arr[min as usize], min];", "    let mut min_even = std::isize::MAX;\n \
    \   let mut min_even_index = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x % 2 == 0 && x < min_even {\n            min_even = x;\n    \
    \        min_even_index = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![min_even, min_even_index]\n  \
    \  }", "    let mut evens: Vec<isize> = Vec::new();\n    let mut index = 0;\n\
    \    for i in arr {\n        if i % 2 == 0 {\n            evens.push(i);\n   \
    \     }\n        index += 1;\n    }\n    if evens.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut min = evens[0];\n    let mut min_index = 0;\n  \
    \  let mut index = 0;\n    for i in evens {\n        if i < min {\n          \
    \  min = i;\n            min_index = index;\n        }\n        index += 1;\n\
    \    }\n    vec![min, min_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_index = std::isize::MAX;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value % 2 == 0 && value < &min_even {\n            min_even =\
    \ *value;\n            min_even_index = index as isize;\n        }\n    }\n  \
    \  if min_even == std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even,\
    \ min_even_index]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &min_even {\n            min_even = *n;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    return vec![];\n    }\n    vec![min_even, min_even_index]", "    let mut\
    \ evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_even_index = 0;\n    for (i, &x)\
    \ in arr.iter().enumerate() {\n        if x == min_even {\n            min_even_index\
    \ = i;\n            break;\n        }\n    }\n    vec![min_even, min_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    for (i, x) in\
    \ arr.iter().enumerate() {\n        if x % 2 == 0 {\n            evens.push(i\
    \ as isize);\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut min = evens[0];\n    for i in evens {\n        if arr[i as\
    \ usize] < arr[min as usize] {\n            min = i;\n        }\n    }\n    vec![arr[min\
    \ as usize], min]", "    let mut smallest_even = std::isize::MAX;\n    let mut\
    \ smallest_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < &smallest_even {\n            smallest_even\
    \ = *n;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n      \
    \  vec![smallest_even, smallest_even_index]\n    }", "    if arr.is_empty() {\n\
    \        return vec![];\n    }\n    let mut min_even = std::isize::MAX;\n    let\
    \ mut min_even_idx = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < &min_even {\n            min_even = *val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]",
  "    let mut smallest_even = None;\n    let mut smallest_even_index = None;\n  \
    \  for (i, x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n         \
    \   if smallest_even.is_none() || x < &smallest_even.unwrap() {\n            \
    \    smallest_even = Some(*x);\n                smallest_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(x), Some(i)) => vec![x, i as isize],\n        _ => vec![],\n\
    \    }", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_idx\
    \ = std::isize::MAX;\n    for (idx, val) in arr.iter().enumerate() {\n       \
    \ if val % 2 == 0 && val < &smallest_even {\n            smallest_even = *val;\n\
    \            smallest_even_idx = idx as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even,\
    \ smallest_even_idx]", "    let mut min_even = None;\n    let mut min_even_index\
    \ = None;\n    for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0\
    \ {\n            if min_even.is_none() || x < min_even.unwrap() {\n          \
    \      min_even = Some(x);\n                min_even_index = Some(i);\n      \
    \      }\n        }\n    }\n    match (min_even, min_even_index) {\n        (Some(x),\
    \ Some(i)) => vec![x, i as isize],\n        _ => vec![],\n    }", "    let mut\
    \ min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n \
    \   for (idx, &val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < min_even {\n            min_even = val;\n            min_even_idx = idx as\
    \ isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        return\
    \ vec![];\n    }\n    vec![min_even, min_even_idx]", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let mut smallest_even_index = 0;\n    for (index, item) in\
    \ arr.iter().enumerate() {\n        if item == &smallest_even {\n            smallest_even_index\
    \ = index;\n            break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 ==\
    \ 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return vec![];\n    }\n    let smallest_even = evens[0];\n    let mut smallest_even_index\
    \ = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if x == smallest_even\
    \ {\n            smallest_even_index = i;\n            break;\n        }\n   \
    \ }\n    vec![smallest_even, smallest_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut even_nodes: Vec<(isize,\
    \ usize)> = Vec::new();\n    for (i, node) in arr.iter().enumerate() {\n     \
    \   if node % 2 == 0 {\n            even_nodes.push((*node, i));\n        }\n\
    \    }\n    if even_nodes.is_empty() {\n        return vec![];\n    }\n    even_nodes.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    vec![even_nodes[0].0, even_nodes[0].1 as isize]", " \
    \   let mut min_even = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n\
    \    for (idx, val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val\
    \ < &min_even {\n            min_even = *val;\n            min_even_idx = idx\
    \ as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![min_even, min_even_idx]\n    }", "    let mut evens:\
    \ Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    evens.sort();\n\
    \    if evens.is_empty() {\n        return vec![];\n    }\n    let smallest_even\
    \ = evens[0];\n    let smallest_even_index = arr.iter().position(|&x| x == smallest_even).unwrap();\n\
    \    vec![smallest_even, smallest_even_index as isize]", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (index, value) in arr.iter().enumerate() {\n        if value % 2 == 0 &&\
    \ value < &smallest_even {\n            smallest_even = *value;\n            smallest_even_index\
    \ = index as isize;\n        }\n    }\n    if smallest_even == std::isize::MAX\
    \ {\n        vec![]\n    } else {\n        vec![smallest_even, smallest_even_index]\n\
    \    }", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x % 2 == 0 && x < smallest_even {\n            smallest_even = x;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n    let\
    \ mut smallest_even_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x == smallest_even {\n            smallest_even_index = i;\n     \
    \       break;\n        }\n    }\n    vec![smallest_even, smallest_even_index\
    \ as isize]", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &smallest_even {\n            smallest_even = *n;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let min_even = evens[0];\n    let mut\
    \ min_even_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x == min_even {\n            min_even_index = i;\n            break;\n     \
    \   }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut even_nodes:\
    \ Vec<(isize, usize)> = vec![];\n    for (i, val) in arr.iter().enumerate() {\n\
    \        if val % 2 == 0 {\n            even_nodes.push((*val, i));\n        }\n\
    \    }\n    if even_nodes.is_empty() {\n        return vec![];\n    }\n    even_nodes.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    let (val, idx) = even_nodes[0];\n    vec![val, idx as\
    \ isize]", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v\
    \ % 2 == 0 && v < &smallest_even {\n            smallest_even = *v;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut min_even = std::isize::MAX;\n   \
    \ let mut min_even_idx = std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < min_even {\n            min_even = val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        return vec![];\n    }\n    vec![min_even, min_even_idx]",
  "    let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    let min = evens.first().cloned();\n    match min {\n \
    \       Some(x) => {\n            let mut idx = 0;\n            for (i, v) in\
    \ arr.iter().enumerate() {\n                if v == &x {\n                   \
    \ idx = i;\n                    break;\n                }\n            }\n   \
    \         vec![x, idx as isize]\n        }\n        None => vec![],\n    }", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&n| n % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let index = arr.iter().position(|&n| n\
    \ == smallest_even).unwrap();\n    vec![smallest_even, index as isize]", "   \
    \ let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(*n);\n            even_indexes.push(i);\n   \
    \     }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n   \
    \ let mut min_even = evens[0];\n    let mut min_even_index = even_indexes[0];\n\
    \    for (i, n) in evens.iter().enumerate() {\n        if n < &min_even {\n  \
    \          min_even = *n;\n            min_even_index = even_indexes[i];\n   \
    \     }\n    }\n    vec![min_even, min_even_index as isize]", "    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_index = std::isize::MAX;\n    for (i,\
    \ &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < min_even {\n \
    \           min_even = x;\n            min_even_index = i as isize;\n        }\n\
    \    }\n    if min_even_index == std::isize::MAX {\n        vec![]\n    } else\
    \ {\n        vec![min_even, min_even_index]\n    }", "    let mut evens: Vec<isize>\
    \ = arr.iter().filter(|x| x % 2 == 0).collect();\n    evens.sort();\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let smallest_even = evens[0];\n \
    \   let mut smallest_index = 0;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value == smallest_even {\n            smallest_index = index;\n\
    \            break;\n        }\n    }\n    vec![smallest_even, smallest_index\
    \ as isize]", "    let mut evens: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    for (i, v) in arr.iter().enumerate() {\n     \
    \   if v % 2 == 0 {\n            evens.push(*v);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        vec![]\n    } else {\n\
    \        let smallest_even = evens[0];\n        let index = arr.iter().position(|&x|\
    \ x == smallest_even).unwrap();\n        vec![smallest_even, index as isize]\n\
    \    }", "    let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, x) in arr.iter().enumerate() {\n        if x == &smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    for (index,\
    \ value) in arr.iter().enumerate() {\n        if value % 2 == 0 {\n          \
    \  evens.push(*value);\n            even_indexes.push(index);\n        }\n   \
    \ }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even\
    \ = evens.iter().min().unwrap();\n    let min_even_index = even_indexes[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_index as isize]", " \
    \   let mut evens: Vec<isize> = Vec::new();\n    let mut even_idx: Vec<usize>\
    \ = Vec::new();\n    for (idx, val) in arr.iter().enumerate() {\n        if val\
    \ % 2 == 0 {\n            evens.push(*val);\n            even_idx.push(idx);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut min_even = evens[0];\n    let mut min_idx = even_idx[0];\n    for\
    \ (idx, val) in evens.iter().enumerate() {\n        if val < &min_even {\n   \
    \         min_even = *val;\n            min_idx = even_idx[idx];\n        }\n\
    \    }\n    vec![min_even, min_idx as isize]", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && n < smallest_even {\n            smallest_even =\
    \ n;\n            smallest_even_index = i as isize;\n        }\n    }\n    if\
    \ smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }", "    let mut result = vec![];\n    let mut min_even\
    \ = std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even != std::isize::MAX {\n        result.push(min_even);\n\
    \        result.push(min_even_idx);\n    }\n    result", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(i as isize);\n        }\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_index = evens[0];\n \
    \   let mut min_value = arr[evens[0] as usize];\n    for i in evens {\n      \
    \  if arr[i as usize] < min_value {\n            min_index = i;\n            min_value\
    \ = arr[i as usize];\n        }\n    }\n    vec![min_value, min_index]", "   \
    \ let mut even_nodes: Vec<(isize, usize)> = vec![];\n    for (i, node) in arr.iter().enumerate()\
    \ {\n        if node % 2 == 0 {\n            even_nodes.push((*node, i));\n  \
    \      }\n    }\n    if even_nodes.is_empty() {\n        return vec![];\n    }\n\
    \    even_nodes.sort_by(|a, b| a.0.cmp(&b.0));\n    vec![even_nodes[0].0, even_nodes[0].1\
    \ as isize]", "    let mut min_even = std::isize::MAX;\n    let mut min_even_index\
    \ = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate() {\n        if n\
    \ % 2 == 0 && n < &min_even {\n            min_even = *n;\n            min_even_index\
    \ = i as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n    \
    \    return vec![];\n    }\n    vec![min_even, min_even_index]", "    let mut\
    \ evens: Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(*n);\n            even_indexes.push(i);\n        }\n    }\n \
    \   if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n\
    \    let min_even_index = even_indexes[evens.iter().position(|&x| x == *min_even).unwrap()];\n\
    \    vec![*min_even, min_even_index as isize]", "    let mut min_even = std::isize::MAX;\n\
    \    let mut min_even_idx = std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 && val < min_even {\n            min_even = val;\n\
    \            min_even_idx = idx as isize;\n        }\n    }\n    if min_even ==\
    \ std::isize::MAX {\n        vec![]\n    } else {\n        vec![min_even, min_even_idx]\n\
    \    }", "    let mut min_even = std::isize::MAX;\n    let mut min_even_idx =\
    \ std::isize::MAX;\n    for (idx, &val) in arr.iter().enumerate() {\n        if\
    \ val % 2 == 0 && val < min_even {\n            min_even = val;\n            min_even_idx\
    \ = idx as isize;\n        }\n    }\n    if min_even == std::isize::MAX {\n  \
    \      vec![]\n    } else {\n        vec![min_even, min_even_idx]\n    }", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, x) in arr.iter().enumerate() {\n        if x == &smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    let mut index: usize = 0;\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            evens.push(n);\n            index =\
    \ i;\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n  \
    \  }\n    let min = evens.iter().min().unwrap();\n    for (i, &n) in arr.iter().enumerate()\
    \ {\n        if n == *min {\n            index = i;\n            break;\n    \
    \    }\n    }\n    vec![*min, index as isize]", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 && *n < smallest_even {\n            smallest_even\
    \ = *n;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        vec![]\n    } else {\n      \
    \  vec![smallest_even, smallest_even_index]\n    }", "    let mut smallest_even\
    \ = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n   \
    \ for (i, &x) in arr.iter().enumerate() {\n        if x % 2 == 0 && x < smallest_even\
    \ {\n            smallest_even = x;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        vec![]\n\
    \    } else {\n        vec![smallest_even, smallest_even_index]\n    }", "   \
    \ let mut min_even = None;\n    let mut min_even_idx = None;\n    for (idx, &val)\
    \ in arr.iter().enumerate() {\n        if val % 2 == 0 {\n            if min_even.is_none()\
    \ || val < min_even.unwrap() {\n                min_even = Some(val);\n      \
    \          min_even_idx = Some(idx);\n            }\n        }\n    }\n    match\
    \ (min_even, min_even_idx) {\n        (Some(val), Some(idx)) => vec![val, idx\
    \ as isize],\n        _ => vec![],\n    }", "    let mut smallest_even = std::isize::MAX;\n\
    \    let mut smallest_even_index = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate()\
    \ {\n        if v % 2 == 0 && v < &smallest_even {\n            smallest_even\
    \ = *v;\n            smallest_even_index = i as isize;\n        }\n    }\n   \
    \ if smallest_even == std::isize::MAX {\n        return vec![];\n    }\n    vec![smallest_even,\
    \ smallest_even_index]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty()\
    \ {\n        return vec![];\n    }\n    let min = evens[0];\n    let mut min_index\
    \ = 0;\n    for (i, x) in arr.iter().enumerate() {\n        if x == &min {\n \
    \           min_index = i;\n            break;\n        }\n    }\n    vec![min,\
    \ min_index as isize]", "    let mut even_nodes: Vec<(isize, usize)> = Vec::new();\n\
    \    for (i, x) in arr.iter().enumerate() {\n        if x % 2 == 0 {\n       \
    \     even_nodes.push((*x, i));\n        }\n    }\n    if even_nodes.is_empty()\
    \ {\n        return vec![];\n    }\n    even_nodes.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    let (val, idx) = even_nodes[0];\n    vec![val, idx as isize]", "    let mut\
    \ evens: Vec<isize> = Vec::new();\n    let mut min_even: isize = std::isize::MAX;\n\
    \    let mut min_even_index: isize = std::isize::MAX;\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        if n % 2 == 0 {\n            if n < &min_even {\n               \
    \ min_even = *n;\n                min_even_index = i as isize;\n            }\n\
    \            evens.push(*n);\n        }\n    }\n    if evens.len() == 0 {\n  \
    \      return vec![];\n    }\n    vec![min_even, min_even_index]", "    let mut\
    \ evens: Vec<isize> = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n\
    \        if n % 2 == 0 {\n            evens.push(i as isize);\n        }\n   \
    \ }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let mut min\
    \ = evens[0];\n    for i in evens.iter() {\n        if arr[*i as usize] < arr[min\
    \ as usize] {\n            min = *i;\n        }\n    }\n    vec![arr[min as usize],\
    \ min]", "    let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_even_index = 0;\n    for (i, x)\
    \ in arr.iter().enumerate() {\n        if x == &min_even {\n            min_even_index\
    \ = i;\n            break;\n        }\n    }\n    vec![min_even, min_even_index\
    \ as isize]", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index = std::isize::MAX;\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 && n < &smallest_even\
    \ {\n            smallest_even = *n;\n            smallest_even_index = i as isize;\n\
    \        }\n    }\n    if smallest_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![smallest_even, smallest_even_index]", "    let mut min_even =\
    \ std::isize::MAX;\n    let mut min_even_idx = std::isize::MAX;\n    for (idx,\
    \ val) in arr.iter().enumerate() {\n        if val % 2 == 0 && val < &min_even\
    \ {\n            min_even = *val;\n            min_even_idx = idx as isize;\n\
    \        }\n    }\n    if min_even == std::isize::MAX {\n        return vec![];\n\
    \    }\n    vec![min_even, min_even_idx]", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    let mut even_idx: Vec<usize> = Vec::new();\n    for (idx, val) in arr.iter().enumerate()\
    \ {\n        if val % 2 == 0 {\n            evens.push(*val);\n            even_idx.push(idx);\n\
    \        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n\
    \    let min_even = evens.iter().min().unwrap();\n    let min_even_idx = even_idx[evens.iter().position(|&x|\
    \ x == *min_even).unwrap()];\n    vec![*min_even, min_even_idx as isize]", " \
    \   let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let min_even = evens[0];\n    let mut min_even_idx = 0;\n    for (idx, &val)\
    \ in arr.iter().enumerate() {\n        if val == min_even {\n            min_even_idx\
    \ = idx;\n            break;\n        }\n    }\n    vec![min_even, min_even_idx\
    \ as isize]", "    let mut evens: Vec<isize> = arr.iter().filter(|&x| x % 2 ==\
    \ 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n     \
    \   return vec![];\n    }\n    let min = evens[0];\n    let mut min_index = 0;\n\
    \    for (index, &value) in arr.iter().enumerate() {\n        if value == min\
    \ {\n            min_index = index;\n            break;\n        }\n    }\n  \
    \  vec![min, min_index as isize]", "    let mut evens: Vec<(isize, usize)> = arr\n\
    \        .iter()\n        .enumerate()\n        .filter(|(_, x)| x % 2 == 0)\n\
    \        .collect();\n    evens.sort_by(|a, b| a.0.cmp(&b.0));\n    evens.first().map(|x|\
    \ vec![x.0 as isize, x.1 as isize]).unwrap_or(vec![])", "    let mut evens: Vec<isize>\
    \ = Vec::new();\n    for (i, n) in arr.iter().enumerate() {\n        if n % 2\
    \ == 0 {\n            evens.push(i as isize);\n        }\n    }\n    if evens.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_index = evens[0];\n \
    \   let mut min_value = arr[evens[0] as usize];\n    for i in evens {\n      \
    \  if arr[i as usize] < min_value {\n            min_index = i;\n            min_value\
    \ = arr[i as usize];\n        }\n    }\n    vec![min_value, min_index]", "   \
    \ let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    evens.sort();\n    if evens.is_empty() {\n        return vec![];\n    }\n\
    \    let smallest_even = evens[0];\n    let mut smallest_even_index = 0;\n   \
    \ for (i, x) in arr.iter().enumerate() {\n        if x == &smallest_even {\n \
    \           smallest_even_index = i;\n            break;\n        }\n    }\n \
    \   vec![smallest_even, smallest_even_index as isize]", "    let mut smallest\
    \ = std::isize::MAX;\n    let mut index = std::isize::MAX;\n    for (i, n) in\
    \ arr.iter().enumerate() {\n        if n % 2 == 0 && n < &smallest {\n       \
    \     smallest = *n;\n            index = i as isize;\n        }\n    }\n    if\
    \ smallest == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest,\
    \ index]\n    }", "    let mut evens: Vec<isize> = arr.iter().filter(|x| x % 2\
    \ == 0).cloned().collect();\n    evens.sort();\n    if evens.is_empty() {\n  \
    \      return vec![];\n    }\n    let min_even = evens[0];\n    let mut min_even_idx\
    \ = 0;\n    for (idx, val) in arr.iter().enumerate() {\n        if val == &min_even\
    \ {\n            min_even_idx = idx;\n            break;\n        }\n    }\n \
    \   vec![min_even, min_even_idx as isize]", "    let mut evens: Vec<isize> = Vec::new();\n\
    \    for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n       \
    \     evens.push(i as isize);\n        }\n    }\n    if evens.len() == 0 {\n \
    \       return vec![];\n    }\n    let mut min_even = evens[0];\n    for i in\
    \ evens {\n        if arr[i as usize] < arr[min_even as usize] {\n           \
    \ min_even = i;\n        }\n    }\n    vec![arr[min_even as usize], min_even]",
  "    let mut smallest_even = None;\n    let mut smallest_even_index = None;\n  \
    \  for (i, n) in arr.iter().enumerate() {\n        if n % 2 == 0 {\n         \
    \   if smallest_even.is_none() || n < &smallest_even.unwrap() {\n            \
    \    smallest_even = Some(*n);\n                smallest_even_index = Some(i);\n\
    \            }\n        }\n    }\n    match (smallest_even, smallest_even_index)\
    \ {\n        (Some(n), Some(i)) => vec![n, i as isize],\n        _ => vec![],\n\
    \    }", "    let mut smallest_even = std::isize::MAX;\n    let mut smallest_even_index\
    \ = std::isize::MAX;\n    for (i, v) in arr.iter().enumerate() {\n        if v\
    \ % 2 == 0 && v < &smallest_even {\n            smallest_even = *v;\n        \
    \    smallest_even_index = i as isize;\n        }\n    }\n    if smallest_even\
    \ == std::isize::MAX {\n        vec![]\n    } else {\n        vec![smallest_even,\
    \ smallest_even_index]\n    }"]
stop_tokens:
- "\n}"
