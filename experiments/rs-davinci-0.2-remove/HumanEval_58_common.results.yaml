language: rs
name: HumanEval_58_common
results:
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.retain(|x| l2.contains(x));\n    l1\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l = Vec::new();\n    let\
    \ mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len() {\n\
    \        if l1[i1] == l2[i2] {\n            l.push(l1[i1]);\n            i1 +=\
    \ 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1\
    \ += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 101
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[653]`,\n right: `[1, 5, 653]`', /tmp/tmpftwqtea6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.iter().filter(|x| l2.contains(x)).cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653,\
    \ 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 1
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1 = l1.into_iter();\n\
    \    let mut l2 = l2.into_iter();\n    let mut res = Vec::new();\n    let mut\
    \ e1 = l1.next();\n    let mut e2 = l2.next();\n    while let (Some(e1), Some(e2))\
    \ = (e1, e2) {\n        if e1 == e2 {\n            res.push(e1);\n           \
    \ e1 = l1.next();\n            e2 = l2.next();\n        } else if e1 < e2 {\n\
    \            e1 = l1.next();\n        } else {\n            e2 = l2.next();\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = common;\n  \
    \  assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:15:18\n   |\n\
    15 |             e1 = l1.next();\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:16:18\n\
    \   |\n16 |             e2 = l2.next();\n   |                  ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcr6s_o3c.rs:18:18\n   |\n18 |             e1 = l1.next();\n   |    \
    \              ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:20:18\n   |\n20 |             e2\
    \ = l2.next();\n   |                  ^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l = Vec::new();\n    let\
    \ mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len() {\n\
    \        if l1[i1] == l2[i2] {\n            l.push(l1[i1]);\n            i1 +=\
    \ 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1\
    \ += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 101
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else if l1[i1]\
    \ > l2[i2] {\n            i2 += 1;\n        } else {\n            result.push(l1[i1]);\n\
    \            i1 += 1;\n            i2 += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[653]`,\n right: `[1, 5, 653]`', /tmp/tmptjj0axhx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut c = l1.clone();\n \
    \   c.sort();\n    let mut d = l2.clone();\n    d.sort();\n    c.retain(|x| d.contains(x));\n\
    \    c.dedup();\n    c\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    let mut common = Vec::new();\n    let mut i1 = 0;\n    let mut i2 = 0;\n\
    \    while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n \
    \           common.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n\
    \        } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n\
    \            i2 += 1;\n        }\n    }\n    common\n}\n\nfn main() {\n    let\
    \ candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5],\
    \ vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 1
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1 = l1.into_iter();\n\
    \    let mut l2 = l2.into_iter();\n    let mut res = Vec::new();\n    let mut\
    \ e1 = l1.next();\n    let mut e2 = l2.next();\n    while let (Some(e1), Some(e2))\
    \ = (e1, e2) {\n        if e1 == e2 {\n            res.push(e1);\n           \
    \ e1 = l1.next();\n            e2 = l2.next();\n        } else if e1 < e2 {\n\
    \            e1 = l1.next();\n        } else {\n            e2 = l2.next();\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = common;\n  \
    \  assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:15:18\n   |\n\
    15 |             e1 = l1.next();\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:16:18\n\
    \   |\n16 |             e2 = l2.next();\n   |                  ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcr6s_o3c.rs:18:18\n   |\n18 |             e1 = l1.next();\n   |    \
    \              ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:20:18\n   |\n20 |             e2\
    \ = l2.next();\n   |                  ^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 1
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1 = l1.into_iter();\n\
    \    let mut l2 = l2.into_iter();\n    let mut result = Vec::new();\n    let mut\
    \ v1 = l1.next();\n    let mut v2 = l2.next();\n    while v1.is_some() && v2.is_some()\
    \ {\n        let v1 = v1.unwrap();\n        let v2 = v2.unwrap();\n        if\
    \ v1 == v2 {\n            result.push(v1);\n            v1 = l1.next();\n    \
    \        v2 = l2.next();\n        } else if v1 < v2 {\n            v1 = l1.next();\n\
    \        } else {\n            v2 = l2.next();\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqwuuxw4b.rs:17:18\n   |\n\
    17 |             v1 = l1.next();\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqwuuxw4b.rs:18:18\n\
    \   |\n18 |             v2 = l2.next();\n   |                  ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqwuuxw4b.rs:20:18\n   |\n20 |             v1 = l1.next();\n   |    \
    \              ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqwuuxw4b.rs:22:18\n   |\n22 |             v2\
    \ = l2.next();\n   |                  ^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut ret = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            ret.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   ret\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.retain(|x| l2.contains(x));\n\
    \    l1.dedup();\n    l1\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 1
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1 = l1.into_iter();\n\
    \    let mut l2 = l2.into_iter();\n    let mut res = Vec::new();\n    let mut\
    \ e1 = l1.next();\n    let mut e2 = l2.next();\n    while let (Some(e1), Some(e2))\
    \ = (e1, e2) {\n        if e1 == e2 {\n            res.push(e1);\n           \
    \ e1 = l1.next();\n            e2 = l2.next();\n        } else if e1 < e2 {\n\
    \            e1 = l1.next();\n        } else {\n            e2 = l2.next();\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = common;\n  \
    \  assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:15:18\n   |\n\
    15 |             e1 = l1.next();\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:16:18\n\
    \   |\n16 |             e2 = l2.next();\n   |                  ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcr6s_o3c.rs:18:18\n   |\n18 |             e1 = l1.next();\n   |    \
    \              ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcr6s_o3c.rs:20:18\n   |\n20 |             e2\
    \ = l2.next();\n   |                  ^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    let mut res = Vec::new();\n    let mut i1 = 0;\n    let mut i2 = 0;\n   \
    \ while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n    \
    \        res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n     \
    \   } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n    \
    \        i2 += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.retain(|x| l2.contains(x));\n\
    \    l1.dedup();\n    l1\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|&x| l2.contains(&x)).collect()\n}\n\nfn main() {\n\
    \    let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653,\
    \ 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut common = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        if l1_next == l2_next {\n\
    \            common.push(*l1_next.unwrap());\n            l1_next = l1_iter.next();\n\
    \            l2_next = l2_iter.next();\n        } else if l1_next < l2_next {\n\
    \            l1_next = l1_iter.next();\n        } else {\n            l2_next\
    \ = l2_iter.next();\n        }\n    }\n    common\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.retain(|&x| l2.contains(&x));\n\
    \    l1.dedup();\n    l1\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut r = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            r.push(l1[i1]);\n            i1\
    \ += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n         \
    \   i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    let mut common = Vec::new();\n    let mut i1 = 0;\n    let mut i2 = 0;\n\
    \    while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n \
    \           common.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n\
    \        } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n\
    \            i2 += 1;\n        }\n    }\n    common\n}\n\nfn main() {\n    let\
    \ candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5],\
    \ vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 1
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1 = l1.into_iter();\n\
    \    let mut l2 = l2.into_iter();\n    let mut res = Vec::new();\n    let mut\
    \ e1 = l1.next();\n    let mut e2 = l2.next();\n    while let (Some(e1), Some(e2))\
    \ = (e1, e2) {\n        if e1 < e2 {\n            e1 = l1.next();\n        } else\
    \ if e1 > e2 {\n            e2 = l2.next();\n        } else {\n            res.push(e1);\n\
    \            e1 = l1.next();\n            e2 = l2.next();\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxbuyw_p3.rs:14:18\n   |\n\
    14 |             e1 = l1.next();\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxbuyw_p3.rs:16:18\n\
    \   |\n16 |             e2 = l2.next();\n   |                  ^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxbuyw_p3.rs:19:18\n   |\n19 |             e1 = l1.next();\n   |    \
    \              ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxbuyw_p3.rs:20:18\n   |\n20 |             e2\
    \ = l2.next();\n   |                  ^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l = Vec::new();\n    let\
    \ mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len() {\n\
    \        if l1[i1] == l2[i2] {\n            l.push(l1[i1]);\n            i1 +=\
    \ 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1\
    \ += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.retain(|&x| l2.contains(&x));\n\
    \    l1.dedup();\n    l1\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    let mut res = Vec::new();\n    let mut i1 = 0;\n    let mut i2 = 0;\n   \
    \ while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n    \
    \        res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n     \
    \   } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n    \
    \        i2 += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        if l1_next == l2_next {\n\
    \            result.push(*l1_next.unwrap());\n            l1_next = l1_iter.next();\n\
    \            l2_next = l2_iter.next();\n        } else if l1_next < l2_next {\n\
    \            l1_next = l1_iter.next();\n        } else {\n            l2_next\
    \ = l2_iter.next();\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l = Vec::new();\n    let\
    \ mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len() {\n\
    \        if l1[i1] == l2[i2] {\n            l.push(l1[i1]);\n            i1 +=\
    \ 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1\
    \ += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut r = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            r.push(l1[i1]);\n            i1\
    \ += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n         \
    \   i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    let mut common = Vec::new();\n    let mut i1 = 0;\n    let mut i2 = 0;\n\
    \    while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n \
    \           common.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n\
    \        } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n\
    \            i2 += 1;\n        }\n    }\n    common\n}\n\nfn main() {\n    let\
    \ candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5],\
    \ vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l = Vec::new();\n    let\
    \ mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len() {\n\
    \        if l1[i1] == l2[i2] {\n            l.push(l1[i1]);\n            i1 +=\
    \ 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1\
    \ += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4,\
    \ 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val < l2_val {\n      \
    \      l1_next = l1_iter.next();\n        } else if l1_val > l2_val {\n      \
    \      l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_val);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.retain(|x| l2.contains(x));\n    l1\n}\n\nfn main() {\n    let candidate\
    \ = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7,\
    \ 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3,\
    \ 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8],\
    \ Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut result = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_val = l1_next.unwrap();\n\
    \        let l2_val = l2_next.unwrap();\n        if l1_val == l2_val {\n     \
    \       result.push(*l1_val);\n            l1_next = l1_iter.next();\n       \
    \     l2_next = l2_iter.next();\n        } else if l1_val < l2_val {\n       \
    \     l1_next = l1_iter.next();\n        } else {\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            result.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut l1_iter = l1.iter();\n\
    \    let mut l2_iter = l2.iter();\n    let mut l1_next = l1_iter.next();\n   \
    \ let mut l2_next = l2_iter.next();\n    let mut result = Vec::new();\n    while\
    \ l1_next.is_some() && l2_next.is_some() {\n        let l1_value = l1_next.unwrap();\n\
    \        let l2_value = l2_next.unwrap();\n        if l1_value < l2_value {\n\
    \            l1_next = l1_iter.next();\n        } else if l1_value > l2_value\
    \ {\n            l2_next = l2_iter.next();\n        } else {\n            result.push(*l1_value);\n\
    \            l1_next = l1_iter.next();\n            l2_next = l2_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = common;\n\
    \    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653,\
    \ 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3,\
    \ 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]),\
    \ vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut res = Vec::new();\n  \
    \  let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut common = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut i1 = 0;\n    let mut i2\
    \ = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n          \
    \  i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n     \
    \       i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.retain(|&x| l2.contains(&x));\n\
    \    l1.dedup();\n    l1\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut common = Vec::new();\n\
    \    let mut i1 = 0;\n    let mut i2 = 0;\n    while i1 < l1.len() && i2 < l2.len()\
    \ {\n        if l1[i1] == l2[i2] {\n            common.push(l1[i1]);\n       \
    \     i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n  \
    \          i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n\
    \    common\n}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1,\
    \ 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n  \
    \  assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
- exit_code: 0
  program: "/// Return sorted unique common elements for two lists.\nfn common(l1:\
    \ Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l1;\n    let mut\
    \ l2 = l2;\n    l1.sort();\n    l2.sort();\n    l1.dedup();\n    l2.dedup();\n\
    \    l1.into_iter().filter(|x| l2.contains(x)).collect()\n}\n\nfn main() {\n \
    \   let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2,\
    \ 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5,\
    \ 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2,\
    \ 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747492
