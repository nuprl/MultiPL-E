language: rs
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 1;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = 2;\n\
    \    while i < n {\n        if n % i == 0 {\n            return n / i;\n     \
    \   }\n        i += 1;\n    }\n    1\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    panic!(\"No\
    \ divisor found for {}\", n);\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    panic!(\"\
    No divisor found for {}\", n);\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 1;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    panic!(\"No divisor found for {}\", n);\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    panic!(\"No\
    \ divisor found for {}\", n);\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = n - 1;\n    while largest_divisor > 0 {\n        if n % largest_divisor ==\
    \ 0 {\n            return largest_divisor;\n        }\n        largest_divisor\
    \ -= 1;\n    }\n    return largest_divisor;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return i;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n\
    \    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100),\
    \ 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 1;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 1;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 1;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return divisor;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    panic!(\"No\
    \ divisor found for {}\", n);\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return i;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 1;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest = i;\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut d = n -\
    \ 1;\n    while d > 0 {\n        if n % d == 0 {\n            return d;\n    \
    \    }\n        d -= 1;\n    }\n    d\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n\
    \    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100),\
    \ 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    for i in (1..n).rev()\
    \ {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 101
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = 2;\n    while n % divisor != 0 {\n        divisor += 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpqsvarhko.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return divisor;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = n - 1;\n    while largest_divisor > 0 {\n        if n % largest_divisor ==\
    \ 0 {\n            return largest_divisor;\n        }\n        largest_divisor\
    \ -= 1;\n    }\n    return largest_divisor;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest_divisor\
    \ = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i;\n        }\n    }\n    largest_divisor\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    0\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut largest\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            largest = i;\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_divisor;\n\
    \    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10),\
    \ 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while divisor > 0 {\n        if n % divisor == 0 {\n         \
    \   return divisor;\n        }\n        divisor -= 1;\n    }\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut divisor\
    \ = n - 1;\n    while n % divisor != 0 {\n        divisor -= 1;\n    }\n    divisor\n\
    }\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
    \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n \
    \   assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
- exit_code: 0
  program: "/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfn largest_divisor(n: isize) -> isize {\n    let mut i = n -\
    \ 1;\n    while i > 0 {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i -= 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7),\
    \ 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n\
    \    assert_eq!(candidate(49), 7);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746582
