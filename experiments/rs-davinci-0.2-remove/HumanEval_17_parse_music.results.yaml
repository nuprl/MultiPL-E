language: rs
name: HumanEval_17_parse_music
results:
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(current_note);\n            current_note = 4;\n        } else\
    \ if c == '|' {\n            current_note /= 2;\n        }\n    }\n    result.push(current_note);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpm6l66k8b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                result.push(current_beat);\n                current_beat = 0;\n\
    \            }\n            '.' => {\n                current_beat += 1;\n   \
    \         }\n            _ => (),\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp_he97hb4.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beats\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(beats);\n                beats = 4;\n    \
    \        }\n            'o' | '|' => {\n                result.push(beats);\n\
    \                beats = 2;\n            }\n            '.' | '|' => {\n     \
    \           result.push(beats);\n                beats = 1;\n            }\n \
    \           _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpytx24_w4.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_note);\n                current_note\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_note);\n\
    \                current_note = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_note);\n                current_note = 1;\n\
    \            }\n            _ => {\n                result.push(current_note);\n\
    \                current_note = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp3nolajbr.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beat_counter\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4 - beat_counter);\n                beat_counter\
    \ = 0;\n            }\n            'o' | '|' => {\n                result.push(2\
    \ - beat_counter);\n                beat_counter = 0;\n            }\n       \
    \     '.' | '|' => {\n                result.push(1 - beat_counter);\n       \
    \         beat_counter = 0;\n            }\n            '.' => {\n           \
    \     result.push(1 - beat_counter);\n                beat_counter = 0;\n    \
    \        }\n            ' ' => {\n                beat_counter += 1;\n       \
    \     }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpterwwpb1.rs:41:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for ch in music_string.chars() {\n        if ch == '|' {\n            current_beat\
    \ += 1;\n            if current_note == \"o\" {\n                result.push(4);\n\
    \            } else if current_note == \"o|\" {\n                result.push(2);\n\
    \            } else if current_note == \".|\" {\n                result.push(1);\n\
    \            }\n            current_note = String::new();\n        } else {\n\
    \            current_note.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpzrg_ptat.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                result.push(current_beat);\n                current_beat = 0;\n\
    \            }\n            _ => current_beat += 1,\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpkx7phvw8.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note\"),\n            }\n            current_note.clear();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphn7kn8qh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index\
    \ = 0;\n    while index < music_string.len() {\n        let mut char_count = 1;\n\
    \        let mut beat_count = 1;\n        let mut is_rest = false;\n        if\
    \ music_string.chars().nth(index).unwrap() == 'o' {\n            beat_count =\
    \ 4;\n        } else if music_string.chars().nth(index).unwrap() == '.' {\n  \
    \          beat_count = 1;\n        } else if music_string.chars().nth(index).unwrap()\
    \ == '|' {\n            beat_count = 0;\n            is_rest = true;\n       \
    \ }\n        if !is_rest {\n            if music_string.chars().nth(index + 1).unwrap()\
    \ == '|' {\n                char_count = 2;\n                beat_count = 2;\n\
    \            }\n        }\n        result.push(beat_count);\n        index +=\
    \ char_count;\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphzge720j.rs:24:52

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpko7fpbxd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut j = i;\n        while j <\
    \ music_string.len() && music_string.chars().nth(j).unwrap() != '|' {\n      \
    \      j += 1;\n        }\n        let note = &music_string[i..j];\n        let\
    \ beats = match note {\n            \"o\" => 4,\n            \"o|\" => 2,\n  \
    \          \".|\" => 1,\n            _ => panic!(\"Invalid note: {}\", note),\n\
    \        };\n        result.push(beats);\n        i = j + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid note: o o o o'', /tmp/tmpaczfk4au.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = 0;\n    let mut current_note_length = 0;\n\
    \    let mut current_note_length_multiplier = 1;\n    let mut current_note_length_divider\
    \ = 1;\n    let mut current_note_length_divider_multiplier = 1;\n    let mut current_note_length_divider_divider\
    \ = 1;\n    let mut current_note_length_divider_divider_multiplier = 1;\n    let\
    \ mut current_note_length_divider_divider_divider = 1;\n    let mut current_note_length_divider_divider_divider_multiplier\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider = 1;\n\
    \    let mut current_note_length_divider_divider_divider_divider_multiplier =\
    \ 1;\n    let mut current_note_length_divider_divider_divider_divider_divider\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_multiplier\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider_multiplier\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider_divider\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider_divider_multiplier\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider_divider_divider\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_divider_divider_divider_divider_multiplier\
    \ = 1;\n    let mut current_note_length_divider_divider_divider_divider_div\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpef4htgf8.rs:30:68\n   |\n\
    30 |     let mut current_note_length_divider_divider_divider_divider_div\n   |\
    \                                                                    ^ help: add\
    \ `;` here\n31 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpef4htgf8.rs:8:41\n  |\n8 | fn parse_music(music_string: String)\
    \ -> Vec<isize> {\n  |    -----------                          ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = 0;\n    let mut current_note_length = 0;\n\
    \    let mut current_note_beats = 0;\n    let mut current_note_beats_length =\
    \ 0;\n    let mut current_note_beats_length_length = 0;\n    let mut current_note_beats_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length = 0;\n    let\
    \ mut current_note_beats_length_length_length_length_length = 0;\n    let mut\
    \ current_note_beats_length_length_length_length_length_length = 0;\n    let mut\
    \ current_note_beats_length_length_length_length_length_length_length = 0;\n \
    \   let mut current_note_beats_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0;\n    let mut current_note_beats_length_length_length_length_length_length\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp75t36qj0.rs:29:73\n   |\n\
    29 |     let mut current_note_beats_length_length_length_length_length_length\n\
    \   |                                                                        \
    \ ^ help: add `;` here\n30 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp75t36qj0.rs:8:41\n  |\n8 | fn parse_music(music_string:\
    \ String) -> Vec<isize> {\n  |    -----------                          ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                result.push(current_beat);\n          \
    \      current_beat = 0;\n            }\n            _ => {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    result.push(current_beat);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpsuh1d9or.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_char: char = ' ';\n    let mut current_char_count: isize = 0;\n\
    \    for c in music_string.chars() {\n        if c == 'o' || c == '.' {\n    \
    \        if current_char == ' ' {\n                current_char = c;\n       \
    \         current_char_count = 1;\n            } else if current_char == c {\n\
    \                current_char_count += 1;\n            } else {\n            \
    \    result.push(current_char_count);\n                current_char = c;\n   \
    \             current_char_count = 1;\n            }\n        } else if c == '|'\
    \ {\n            result.push(current_char_count);\n            current_char =\
    \ ' ';\n            current_char_count = 0;\n        }\n    }\n    if current_char_count\
    \ > 0 {\n        result.push(current_char_count);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6wph_unp.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4 - current_beat);\n                current_beat\
    \ = 0;\n            }\n            'o' | '|' => {\n                result.push(2\
    \ - current_beat);\n                current_beat = 0;\n            }\n       \
    \     '.' | '|' => {\n                result.push(1 - current_beat);\n       \
    \         current_beat = 0;\n            }\n            _ => {\n             \
    \   current_beat += 1;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1rse1cv1.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => {\n                    result.push(4 - current_beat);\n  \
    \                  current_beat = 0;\n                }\n                \"o|\"\
    \ => {\n                    result.push(2 - current_beat);\n                 \
    \   current_beat = 0;\n                }\n                \".|\" => {\n      \
    \              result.push(1 - current_beat);\n                    current_beat\
    \ = 0;\n                }\n                _ => {}\n            }\n          \
    \  current_note = String::new();\n        } else {\n            current_note.push(c);\n\
    \            current_beat += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5s2ijpd9.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                if music_string.chars().nth(i + 1).unwrap()\
    \ == '|' {\n                    result.push(2);\n                    i += 2;\n\
    \                } else {\n                    result.push(4);\n             \
    \       i += 1;\n                }\n            }\n            '.' => {\n    \
    \            result.push(1);\n                i += 2;\n            }\n       \
    \     _ => {\n                i += 1;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp6u2k9q05.rs:14:52

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note = String::new();\n    for c in music_string.chars() {\n   \
    \     if c == '|' {\n            match current_note.as_str() {\n             \
    \   \"o\" => result.push(4),\n                \"o\" => result.push(2),\n     \
    \           \".\" => result.push(1),\n                _ => (),\n            }\n\
    \            current_note = String::new();\n        } else {\n            current_note.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp52922q1n.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut beat_count: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(beat_count);\n      \
    \          beat_count = 4;\n            }\n            'o' | '|' => {\n      \
    \          result.push(beat_count);\n                beat_count = 2;\n       \
    \     }\n            '.' | '|' => {\n                result.push(beat_count);\n\
    \                beat_count = 1;\n            }\n            _ => {}\n       \
    \ }\n    }\n    result.push(beat_count);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpy0zbm8t1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note {}\", current_note),\n           \
    \ }\n            current_note = String::new();\n        } else {\n           \
    \ current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmps14k324v.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        match c {\n \
    \           'o' => {\n                result.push(4);\n                current_note.clear();\n\
    \            }\n            '|' => {\n                if current_note == \"o\"\
    \ {\n                    result.push(2);\n                } else {\n         \
    \           result.push(1);\n                }\n                current_note.clear();\n\
    \            }\n            '.' => {\n                current_note.push(c);\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp34ja0qpv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => {\n                result.push(current_beat);\n      \
    \          current_beat = 4;\n            }\n            'o' | '|' => {\n    \
    \            result.push(current_beat);\n                current_beat = 2;\n \
    \           }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpi3f6x1k1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        match c {\n \
    \           'o' => {\n                if current_note.is_empty() {\n         \
    \           current_note.push(c);\n                } else {\n                \
    \    result.push(get_note_value(&current_note));\n                    current_note.clear();\n\
    \                    current_note.push(c);\n                }\n            }\n\
    \            '|' => {\n                if current_note.is_empty() {\n        \
    \            result.push(0);\n                } else {\n                    result.push(get_note_value(&current_note));\n\
    \                    current_note.clear();\n                }\n            }\n\
    \            '.' => {\n                if current_note.is_empty() {\n        \
    \            current_note.push(c);\n                } else {\n               \
    \     result.push(get_note_value(&current_note));\n                    current_note.clear();\n\
    \                    current_note.push(c);\n                }\n            }\n\
    \            _ => {}\n        }\n    }\n    if !current_note.is_empty() {\n  \
    \      result.push(get_note_value(&current_note));\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_note_value` in this scope\n  -->\
    \ /tmp/tmpb6_dxecu.rs:17:33\n   |\n17 |                     result.push(get_note_value(&current_note));\n\
    \   |                                 ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `get_note_value` in this scope\n  --> /tmp/tmpb6_dxecu.rs:26:33\n\
    \   |\n26 |                     result.push(get_note_value(&current_note));\n\
    \   |                                 ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `get_note_value` in this scope\n  --> /tmp/tmpb6_dxecu.rs:34:33\n\
    \   |\n34 |                     result.push(get_note_value(&current_note));\n\
    \   |                                 ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `get_note_value` in this scope\n  --> /tmp/tmpb6_dxecu.rs:43:21\n\
    \   |\n43 |         result.push(get_note_value(&current_note));\n   |        \
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_note);\n                current_note\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_note);\n\
    \                current_note = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_note);\n                current_note = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_note);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpfqpx1s6f.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => panic!(\"\
    Invalid character in music string\"),\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp8blz2pp5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let c = music_string.chars().nth(i).unwrap();\n\
    \        if c == 'o' {\n            result.push(4);\n            i += 1;\n   \
    \     } else if c == '.' {\n            result.push(1);\n            i += 2;\n\
    \        } else {\n            result.push(2);\n            i += 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 2, 2]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp3vwdhed4.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut beat_count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                beat_count += 4;\n            }\n            'o' | '|'\
    \ => {\n                beat_count += 2;\n            }\n            '.' | '|'\
    \ => {\n                beat_count += 1;\n            }\n            _ => {}\n\
    \        }\n        if c == '|' {\n            beats.push(beat_count);\n     \
    \       beat_count = 0;\n        }\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmppv49n_61.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpko7fpbxd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_string\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_string.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_string.clear();\n\
    \        } else {\n            current_string.push(c);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpgmpzwsp9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8mh77nfj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        current_note.push(c);\n        if\
    \ c == '|' {\n            if current_note == \"o|\" {\n                result.push(current_beat\
    \ + 2);\n                current_beat += 2;\n            } else if current_note\
    \ == \".|\" {\n                result.push(current_beat + 1);\n              \
    \  current_beat += 1;\n            } else if current_note == \"o\" {\n       \
    \         result.push(current_beat + 4);\n                current_beat += 4;\n\
    \            }\n            current_note = String::new();\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnmt1mlcb.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut j = i + 1;\n\
    \        while j < music_string.len() && music_string.chars().nth(j).unwrap()\
    \ != '|' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid note\"),\n        }\n        i = j + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid note'', /tmp/tmpu_sqvj_m.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            '.' => {\n                result.push(1);\n\
    \                i += 2;\n            }\n            _ => {\n                result.push(2);\n\
    \                i += 2;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 2, 2]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpvmqhwkg1.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Unknown note {}\", current_note),\n           \
    \ }\n            current_note = String::new();\n        } else {\n           \
    \ current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmps1fe_nsz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut beats: isize = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            beats += 4;\n        } else if c == '|' {\n            result.push(beats);\n\
    \            beats = 0;\n        } else {\n            beats += 1;\n        }\n\
    \    }\n    result.push(beats);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpe2ijmerw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = ' ';\n    for c in music_string.chars() {\n\
    \        if c == 'o' || c == '.' {\n            current_note = c;\n        } else\
    \ if c == '|' {\n            if current_note == 'o' {\n                result.push(4\
    \ - current_beat);\n                current_beat = 0;\n            } else if current_note\
    \ == '.' {\n                result.push(1 - current_beat);\n                current_beat\
    \ = 0;\n            }\n        } else if c == ' ' {\n            current_beat\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8iudnjve.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(4);\n            count += 4;\n        } else if c == '|' {\n \
    \           result.push(count);\n            count = 0;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0l4s301d.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            'o' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' => {\n              \
    \  result.push(1);\n                i += 2;\n            }\n            _ => {\n\
    \                i += 1;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpj7r6j6ds.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            'o' |\
    \ '|' => result.push(2),\n            '.' | '|' => result.push(1),\n         \
    \   _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpeww0q9ax.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            'o' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' => {\n              \
    \  result.push(1);\n                i += 2;\n            }\n            _ => {\n\
    \                i += 1;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmplydt8aue.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => {}\n    \
    \    }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpok40i65s.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                current_beat = 0;\n      \
    \      }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp46zz51qm.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note: {}\", current_note),\n          \
    \  }\n            current_note = String::new();\n        } else {\n          \
    \  current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpii7emlgf.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_note);\n    \
    \            current_note = 4;\n            }\n            'o' | '|' => {\n  \
    \              result.push(current_note);\n                current_note = 2;\n\
    \            }\n            '.' | '|' => {\n                result.push(current_note);\n\
    \                current_note = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result.push(current_note);\n    result\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmphq0rx81_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => result.push(4),\n                \"o|\" => result.push(2),\n\
    \                \".|\" => result.push(1),\n                _ => (),\n       \
    \     }\n            current_note = String::new();\n        } else {\n       \
    \     current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp86dh0gx_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut note_length = 0;\n    for c in music_string.chars() {\n        match c {\n\
    \            'o' => {\n                note_length += 4;\n            }\n    \
    \        '|' => {\n                result.push(note_length);\n               \
    \ note_length = 0;\n            }\n            '.' => {\n                note_length\
    \ += 1;\n            }\n            _ => {}\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpk658uw9o.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                result.push(current_beat);\n          \
    \      current_beat = 0;\n            }\n            _ => {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    result.push(current_beat);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpsuh1d9or.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(4);\n            count += 4;\n        } else if c == '|' {\n \
    \           result.push(count);\n            count = 0;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0l4s301d.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count = 0;\n    for i in music_string.chars() {\n        if i == 'o' {\n\
    \            count += 4;\n        } else if i == '|' {\n            result.push(count);\n\
    \            count = 0;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpag3jfccu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut note_length\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                note_length += 4;\n            }\n            '|' => {\n\
    \                result.push(note_length);\n                note_length = 0;\n\
    \            }\n            '.' => {\n                note_length += 1;\n    \
    \        }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpr_rf24v7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n            }\n            'o' | '|' => {\n                current_beat\
    \ += 1;\n            }\n            '.' => {}\n            _ => panic!(\"Unexpected\
    \ character {}\", c),\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp6svo_sfx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 4;\n            }\n            'o' | '|' => {\n  \
    \              result.push(current_beat);\n                current_beat = 2;\n\
    \            }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpugpooytl.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => {}\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqj_hlu01.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(4);\n            count += 4;\n        } else if c == '|' {\n \
    \           result.push(count);\n            count = 0;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0l4s301d.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note {}\", current_note),\n           \
    \ }\n            current_note = String::new();\n        } else {\n           \
    \ current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpm9kmc43t.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count = 0;\n    let mut last_char = ' ';\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            result.push(4);\n            count +=\
    \ 4;\n        } else if c == '|' {\n            if last_char == 'o' {\n      \
    \          result.push(2);\n                count += 2;\n            } else if\
    \ last_char == '.' {\n                result.push(1);\n                count +=\
    \ 1;\n            }\n        } else if c == '.' {\n            if last_char ==\
    \ '|' {\n                result.push(1);\n                count += 1;\n      \
    \      }\n        }\n        last_char = c;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 4, 2, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpkw9_2xua.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == 'o' ||\
    \ c == '.' {\n            current_note.push(c);\n        } else if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o|\" => 2,\n                \".|\" => 1,\n        \
    \        _ => 0,\n            });\n            current_note = String::new();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp48xrh62m.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                beats.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                beats.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                beats.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    beats.push(current_beat);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmph8p6ss4f.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4 - current_beat);\n                current_beat\
    \ = 0;\n            }\n            'o' | '|' => {\n                result.push(2\
    \ - current_beat);\n                current_beat = 0;\n            }\n       \
    \     '.' | '|' => {\n                result.push(1 - current_beat);\n       \
    \         current_beat = 0;\n            }\n            _ => current_beat += 1,\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpiy_rvj28.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n            }\n            'o' | '|' => {\n  \
    \              current_beat += 1;\n            }\n            '.' => {\n     \
    \           current_beat += 1;\n                result.push(current_beat);\n \
    \               current_beat = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa2w0ddnz.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut note_length: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                note_length = 4;\n            }\n\
    \            '|' => {\n                result.push(note_length);\n           \
    \     note_length = 0;\n            }\n            '.' => {\n                note_length\
    \ += 1;\n            }\n            _ => {}\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmptrv4lutc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                result.push(current_beat);\n\
    \                current_beat = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbt_7wmri.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n            }\n            'o' | '|' => {\n  \
    \              current_beat += 1;\n            }\n            '.' => {\n     \
    \           current_beat += 1;\n                result.push(current_beat);\n \
    \               current_beat = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa2w0ddnz.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                result.push(current_beat);\n                current_beat = 0;\n\
    \            }\n            _ => {\n                current_beat += 1;\n     \
    \       }\n        }\n    }\n    result.push(current_beat);\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpjl6j1yd6.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => {}\n    \
    \    }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpok40i65s.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp60wakv7w.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' || c == '.' {\n            current_note.push(c);\n  \
    \      } else if c == '|' {\n            if current_note == \"o\" {\n        \
    \        result.push(4);\n            } else if current_note == \"o|\" {\n   \
    \             result.push(2);\n            } else if current_note == \".|\" {\n\
    \                result.push(1);\n            }\n            current_note = String::new();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpmtbzucwu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                result.push(current_beat);\n\
    \                current_beat = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbt_7wmri.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = ' ';\n    for c in music_string.chars() {\n\
    \        if c == '|' {\n            result.push(current_beat);\n            current_beat\
    \ = 0;\n        } else {\n            current_note = c;\n        }\n        match\
    \ current_note {\n            'o' => current_beat += 4,\n            'o' => current_beat\
    \ += 2,\n            '.' => current_beat += 1,\n            _ => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpu4zsj2xw.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp60wakv7w.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp60wakv7w.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut beat_count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                beat_count += 4;\n            }\n            'o' | '|'\
    \ => {\n                beat_count += 2;\n            }\n            '.' | '|'\
    \ => {\n                beat_count += 1;\n            }\n            _ => {\n\
    \                beats.push(beat_count);\n                beat_count = 0;\n  \
    \          }\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqojda2p5.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count: isize = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpkx6dhw1n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8mh77nfj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4);\n                count += 4;\n       \
    \     }\n            'o' | '|' => {\n                result.push(2);\n       \
    \         count += 2;\n            }\n            '.' | '|' => {\n           \
    \     result.push(1);\n                count += 1;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpd5wtug7b.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                result.push(current_beat);\n\
    \                current_beat = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbt_7wmri.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut j = i + 1;\n\
    \        while j < music_string.len() && music_string.chars().nth(j).unwrap()\
    \ != '|' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid note: {}\", note),\n        }\n        i = j + 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid note: o o o o'', /tmp/tmpuukfz10v.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => panic!(\"Unknown note\"),\n            }\n            current_note.clear();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyaora99b.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        if c == '|' {\n            if current_note\
    \ == \"o\" {\n                current_beat += 4;\n            } else if current_note\
    \ == \"o|\" {\n                current_beat += 2;\n            } else if current_note\
    \ == \".|\" {\n                current_beat += 1;\n            }\n           \
    \ result.push(current_beat);\n            current_note = String::new();\n    \
    \    } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1v8jwkz_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o\" => 2,\n                \".\" => 1,\n          \
    \      _ => panic!(\"Unknown note: {}\", current_note),\n            });\n   \
    \         current_note.clear();\n        } else {\n            current_note.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp19k56zyq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut buffer\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match buffer.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Invalid input\"),\n            }\n            buffer.clear();\n\
    \        } else {\n            buffer.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpm9x9npsp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note: {}\", current_note),\n          \
    \  }\n            current_note = String::new();\n        } else {\n          \
    \  current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6fw5y02z.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(current_beat);\n            current_beat = 0;\n        } else\
    \ if c == '|' {\n            current_beat += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp7gx8d6r7.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                result.push(current_beat);\n\
    \                current_beat = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbt_7wmri.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                result.push(current_beat);\n                current_beat = 0;\n\
    \            }\n            _ => {\n                current_beat += 1;\n     \
    \       }\n        }\n    }\n    result.push(current_beat);\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpjl6j1yd6.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4);\n                count += 4;\n       \
    \     }\n            'o' | '|' => {\n                result.push(2);\n       \
    \         count += 2;\n            }\n            '.' | '|' => {\n           \
    \     result.push(1);\n                count += 1;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpd5wtug7b.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter\
    \ = music_string.chars();\n    while let Some(c) = iter.next() {\n        match\
    \ c {\n            'o' => {\n                if let Some('|') = iter.next() {\n\
    \                    result.push(2);\n                } else {\n             \
    \       result.push(4);\n                }\n            }\n            '.' =>\
    \ {\n                if let Some('|') = iter.next() {\n                    result.push(1);\n\
    \                } else {\n                    panic!(\"Invalid input\");\n  \
    \              }\n            }\n            _ => panic!(\"Invalid input\"),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid input'', /tmp/tmpvks5g12f.rs:27:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            if current_note == \"o\" {\n                result.push(4);\n   \
    \         } else if current_note == \"o|\" {\n                result.push(2);\n\
    \            } else if current_note == \".|\" {\n                result.push(1);\n\
    \            }\n            current_note = String::new();\n        } else {\n\
    \            current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp32w5iy6j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                result.push(current_beat);\n          \
    \      current_beat = 0;\n            }\n            _ => {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    result.push(current_beat);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpsuh1d9or.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => panic!(\"\
    Unknown character in music string\"),\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp27s7c4wr.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            'o' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' => {\n              \
    \  result.push(1);\n                i += 2;\n            }\n            _ => {\n\
    \                i += 1;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmplydt8aue.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 4;\n            }\n            'o' | '|' => {\n  \
    \              result.push(current_beat);\n                current_beat = 2;\n\
    \            }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {\n      \
    \          result.push(current_beat);\n                current_beat = 0;\n   \
    \         }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpb2xhvjiv.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => {\n                result.push(current_beat);\n      \
    \          current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp6px_itc6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note: {}\", current_note),\n          \
    \  }\n            current_note = String::new();\n        } else {\n          \
    \  current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpii7emlgf.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n            }\n            '|' => {\n                current_beat += 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyxd67y7s.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4 - current_beat);\n                current_beat\
    \ = 0;\n            }\n            'o' | '|' => {\n                result.push(2\
    \ - current_beat);\n                current_beat = 0;\n            }\n       \
    \     '.' | '|' => {\n                result.push(1 - current_beat);\n       \
    \         current_beat = 0;\n            }\n            _ => {\n             \
    \   current_beat += 1;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1rse1cv1.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => result.push(4),\n                \"o.\" => result.push(2),\n\
    \                \"..\" => result.push(1),\n                _ => (),\n       \
    \     }\n            current_note = String::new();\n        } else {\n       \
    \     current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpuhtv397u.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o\" => 2,\n                \".\" => 1,\n          \
    \      _ => 0,\n            });\n            current_note.clear();\n        }\
    \ else {\n            current_note.push(c);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa6iepx_4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => {}\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpw1yug3ut.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o\" => 2,\n                \".\" => 1,\n          \
    \      _ => 0,\n            });\n            current_note.clear();\n        }\
    \ else {\n            current_note.push(c);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa6iepx_4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o\" => 2,\n                \".\" => 1,\n          \
    \      _ => 0,\n            });\n            current_note.clear();\n        }\
    \ else {\n            current_note.push(c);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa6iepx_4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_note);\n                current_note\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_note);\n\
    \                current_note = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_note);\n                current_note = 1;\n\
    \            }\n            _ => {\n                result.push(current_note);\n\
    \                current_note = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp3nolajbr.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '.' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '|' => {\n    \
    \            result.push(current_beat);\n                current_beat = 1;\n \
    \           }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpo82q5n5y.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 4;\n            }\n            'o' | '|' => {\n  \
    \              result.push(current_beat);\n                current_beat = 2;\n\
    \            }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {\n      \
    \          result.push(current_beat);\n                current_beat = 0;\n   \
    \         }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpb2xhvjiv.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = 0;\n    let mut current_note_length = 0;\n\
    \    let mut current_note_length_string = String::new();\n    let mut current_note_string\
    \ = String::new();\n    let mut current_note_string_length = 0;\n    let mut current_note_string_length_string\
    \ = String::new();\n    let mut current_note_string_length_string_length = 0;\n\
    \    let mut current_note_string_length_string_length_string = String::new();\n\
    \    let mut current_note_string_length_string_length_string_length = 0;\n   \
    \ let mut current_note_string_length_string_length_string_length_string = String::new();\n\
    \    let mut current_note_string_length_string_length_string_length_string_length\
    \ = 0;\n    let mut current_note_string_length_string_length_string_length_string_length_string\
    \ = String::new();\n    let mut current_note_string_length_string_length_string_length_string_length_string_length\
    \ = 0;\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string\
    \ = String::new();\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0;\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = String::new();\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0;\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = String::new();\n    let mut current_note_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0;\n    let mut current_\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy3s0a3z2.rs:30:21\n   |\n\
    30 |     let mut current_\n   |                     ^ help: add `;` here\n31 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy3s0a3z2.rs:8:41\n\
    \  |\n8 | fn parse_music(music_string: String) -> Vec<isize> {\n  |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note: {}\", current_note),\n          \
    \  }\n            current_note = String::new();\n        } else {\n          \
    \  current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpii7emlgf.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        if c == 'o' || c == '.' {\n    \
    \        current_note.push(c);\n        } else if c == '|' {\n            current_beat\
    \ += 1;\n            if current_note == \"o\" {\n                result.push(4);\n\
    \            } else if current_note == \"o|\" {\n                result.push(2);\n\
    \            } else if current_note == \".|\" {\n                result.push(1);\n\
    \            }\n            current_note = String::new();\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpkngdj6kn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                current_note = String::new();\n            }\n            '|'\
    \ => {\n                if current_note == \"o\" {\n                    result.push(2);\n\
    \                } else {\n                    result.push(1);\n             \
    \   }\n                current_note = String::new();\n            }\n        \
    \    '.' => {\n                current_note = String::new();\n            }\n\
    \            _ => {\n                current_note.push(c);\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp4auequ6a.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpko7fpbxd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_length\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_length);\n                current_length\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_length);\n\
    \                current_length = 2;\n            }\n            '.' | '|' =>\
    \ {\n                result.push(current_length);\n                current_length\
    \ = 1;\n            }\n            _ => {}\n        }\n    }\n    result.push(current_length);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpnesg4gct.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => {\n                    result.push(4);\n                 \
    \   current_beat += 4;\n                }\n                \"o\" => {\n      \
    \              result.push(2);\n                    current_beat += 2;\n     \
    \           }\n                \".\" => {\n                    result.push(1);\n\
    \                    current_beat += 1;\n                }\n                _\
    \ => {}\n            }\n            current_note = String::new();\n        } else\
    \ {\n            current_note.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpd25q3_e9.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut j = i;\n        while j <\
    \ music_string.len() && music_string.chars().nth(j).unwrap() != '|' {\n      \
    \      j += 1;\n        }\n        let note = &music_string[i..j];\n        if\
    \ note == \"o\" {\n            result.push(4);\n        } else if note == \"o|\"\
    \ {\n            result.push(2);\n        } else if note == \".|\" {\n       \
    \     result.push(1);\n        }\n        i = j + 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1ajcg8qz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut j = i + 1;\n\
    \        while j < music_string.len() && music_string.chars().nth(j).unwrap()\
    \ != '|' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid note\"),\n        }\n        i = j + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid note'', /tmp/tmpu_sqvj_m.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            'o' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' => {\n              \
    \  result.push(1);\n                i += 2;\n            }\n            _ => {\n\
    \                i += 1;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpj7r6j6ds.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note = String::new();\n    for c in music_string.chars() {\n   \
    \     match c {\n            'o' => {\n                result.push(4);\n     \
    \           current_note = String::new();\n            }\n            '|' => {\n\
    \                if current_note == \"o\" {\n                    result.push(2);\n\
    \                } else {\n                    result.push(1);\n             \
    \   }\n                current_note = String::new();\n            }\n        \
    \    '.' => {\n                current_note = String::new();\n            }\n\
    \            _ => {\n                current_note.push(c);\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpbv013419.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut chars\
    \ = music_string.chars();\n    while let Some(c) = chars.next() {\n        if\
    \ c == 'o' {\n            result.push(4);\n            chars.next();\n       \
    \ } else if c == '.' {\n            result.push(1);\n            chars.next();\n\
    \            chars.next();\n        } else {\n            result.push(2);\n  \
    \          chars.next();\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 2, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp8znkorha.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut j = i;\n   \
    \     while j < music_string.len() && music_string.chars().nth(j).unwrap() !=\
    \ '|' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        if note == \"o\" {\n            result.push(4);\n        } else if note\
    \ == \"o|\" {\n            result.push(2);\n        } else if note == \".|\" {\n\
    \            result.push(1);\n        }\n        i = j + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1jxb4558.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 4;\n            }\n            'o' | '|' => {\n  \
    \              result.push(current_beat);\n                current_beat = 2;\n\
    \            }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpugpooytl.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut beat_count: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                beat_count += 4;\n            }\n\
    \            'o' | '|' => {\n                beat_count += 2;\n            }\n\
    \            '.' | '|' => {\n                beat_count += 1;\n            }\n\
    \            _ => {}\n        }\n    }\n    beats.push(beat_count);\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxk7udyvt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        }\n    }\n    result.push(count);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbzd7bjtu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beat_count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(beat_count);\n                beat_count =\
    \ 4;\n            }\n            'o' | '|' => {\n                result.push(beat_count);\n\
    \                beat_count = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(beat_count);\n                beat_count = 1;\n \
    \           }\n            _ => {}\n        }\n    }\n    result.push(beat_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp82bl_ip_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter\
    \ = music_string.chars();\n    while let Some(c) = iter.next() {\n        match\
    \ c {\n            'o' => {\n                if let Some('|') = iter.next() {\n\
    \                    result.push(2);\n                } else {\n             \
    \       result.push(4);\n                }\n            }\n            '.' =>\
    \ {\n                if let Some('|') = iter.next() {\n                    result.push(1);\n\
    \                } else {\n                    panic!(\"Invalid music string\"\
    );\n                }\n            }\n            _ => panic!(\"Invalid music\
    \ string\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid music string'', /tmp/tmpw555sxg2.rs:27:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => {\n                result.push(current_beat);\n      \
    \          current_beat = 4;\n            }\n            'o' | '|' => {\n    \
    \            result.push(current_beat);\n                current_beat = 2;\n \
    \           }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpi3f6x1k1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => {\n                result.push(current_beat);\n      \
    \          current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp6px_itc6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let ch = music_string.chars().nth(i).unwrap();\n\
    \        if ch == 'o' {\n            result.push(4);\n            i += 1;\n  \
    \      } else if ch == '.' {\n            result.push(1);\n            i += 2;\n\
    \        } else {\n            result.push(2);\n            i += 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 2, 2]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpzttfgvca.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut current_note = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' || c == '.' {\n            current_note.push(c);\n  \
    \      } else if c == '|' {\n            if current_note == \"o\" {\n        \
    \        result.push(4 - current_beat);\n                current_beat = 0;\n \
    \           } else if current_note == \"o|\" {\n                result.push(2\
    \ - current_beat);\n                current_beat = 0;\n            } else if current_note\
    \ == \".|\" {\n                result.push(1 - current_beat);\n              \
    \  current_beat = 0;\n            }\n            current_note = String::new();\n\
    \        } else if c == ' ' {\n            current_beat += 1;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmprscxnybo.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        }\n    }\n    result.push(count);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbzd7bjtu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut j = i;\n        while j <\
    \ music_string.len() && music_string.chars().nth(j).unwrap() != '|' {\n      \
    \      j += 1;\n        }\n        let note = &music_string[i..j];\n        if\
    \ note == \"o\" {\n            result.push(4);\n        } else if note == \"o|\"\
    \ {\n            result.push(2);\n        } else if note == \".|\" {\n       \
    \     result.push(1);\n        }\n        i = j + 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1ajcg8qz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        if c == 'o' || c == '.' {\n    \
    \        current_note.push(c);\n        } else if c == '|' {\n            if current_note\
    \ == \"o\" {\n                current_beat += 4;\n            } else if current_note\
    \ == \"o|\" {\n                current_beat += 2;\n            } else if current_note\
    \ == \".|\" {\n                current_beat += 1;\n            }\n           \
    \ result.push(current_beat);\n            current_note = String::new();\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp094g0lpc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => panic!(\"Unknown character in music string: {}\", c),\n       \
    \ }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp0z2whwy5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note = String::new();\n    for c in music_string.chars() {\n   \
    \     if c == '|' {\n            match current_note.as_str() {\n             \
    \   \"o\" => result.push(4),\n                \"o|\" => result.push(2),\n    \
    \            \".|\" => result.push(1),\n                _ => panic!(\"Invalid\
    \ note\"),\n            }\n            current_note = String::new();\n       \
    \ } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmptn_jd0wo.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => result.push(4),\n                \"o|\" => result.push(2),\n\
    \                \".|\" => result.push(1),\n                _ => (),\n       \
    \     }\n            current_note = String::new();\n        } else {\n       \
    \     current_note.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp86dh0gx_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        }\n    }\n    result.push(count);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbzd7bjtu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count: isize = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpkx6dhw1n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(4);\n                count += 4;\n       \
    \     }\n            'o' | '|' => {\n                result.push(2);\n       \
    \         count += 2;\n            }\n            '.' | '|' => {\n           \
    \     result.push(1);\n                count += 1;\n            }\n          \
    \  _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpd5wtug7b.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        match c {\n \
    \           'o' => {\n                if current_note.len() > 0 {\n          \
    \          result.push(get_note_value(&current_note));\n                    current_note.clear();\n\
    \                }\n                current_note.push(c);\n            }\n   \
    \         '|' => {\n                if current_note.len() > 0 {\n            \
    \        current_note.push(c);\n                }\n            }\n           \
    \ '.' => {\n                if current_note.len() > 0 {\n                    result.push(get_note_value(&current_note));\n\
    \                    current_note.clear();\n                }\n              \
    \  current_note.push(c);\n            }\n            _ => {}\n        }\n    }\n\
    \    if current_note.len() > 0 {\n        result.push(get_note_value(&current_note));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_note_value` in this scope\n  -->\
    \ /tmp/tmpd0sga3kv.rs:15:33\n   |\n15 |                     result.push(get_note_value(&current_note));\n\
    \   |                                 ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `get_note_value` in this scope\n  --> /tmp/tmpd0sga3kv.rs:27:33\n\
    \   |\n27 |                     result.push(get_note_value(&current_note));\n\
    \   |                                 ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `get_note_value` in this scope\n  --> /tmp/tmpd0sga3kv.rs:36:21\n\
    \   |\n36 |         result.push(get_note_value(&current_note));\n   |        \
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {\n                result.push(current_beat);\n\
    \                current_beat = 0;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 0, 4, 0, 4, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpbt_7wmri.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: Vec<char> = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            if current_note.len() == 1 {\n       \
    \         result.push(4);\n            } else if current_note.len() == 2 {\n \
    \               result.push(2);\n            } else if current_note.len() == 3\
    \ {\n                result.push(1);\n            }\n            current_note.clear();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpddp_cypv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                current_beat += 1;\n            }\n   \
    \         _ => {}\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpko7fpbxd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => {\n                result.push(current_beat);\n      \
    \          current_beat = 4;\n            }\n            'o' | '|' => {\n    \
    \            result.push(current_beat);\n                current_beat = 2;\n \
    \           }\n            '.' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 1;\n            }\n            _ => {}\n     \
    \   }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpi3f6x1k1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => {}\n    \
    \    }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpok40i65s.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beats\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   beats += 4;\n        } else if c == '|' {\n            result.push(beats);\n\
    \            beats = 0;\n        } else {\n            beats += 1;\n        }\n\
    \    }\n    result.push(beats);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp2lkj3dy4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(4);\n            }\n            'o' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(2);\n            }\n            '.' | '|'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n                result.push(1);\n            }\n            ' ' => {\n\
    \                current_beat += 1;\n            }\n            _ => {}\n    \
    \    }\n    }\n    result.push(current_beat);\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpok40i65s.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count: isize = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpkx6dhw1n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut last_char: char = ' ';\n    let mut counter: isize = 0;\n    for c in music_string.chars()\
    \ {\n        if c == '|' && last_char == '.' {\n            result.push(counter);\n\
    \            counter = 0;\n        } else if c == '|' && last_char == 'o' {\n\
    \            result.push(counter);\n            counter = 0;\n        } else if\
    \ c == '.' {\n            counter += 1;\n        } else if c == 'o' {\n      \
    \      counter += 4;\n        }\n        last_char = c;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpm7gyi_d6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut count: isize = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            count += 4;\n        } else if c == '|' {\n            result.push(count);\n\
    \            count = 0;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpkx6dhw1n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749045
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut beat_count\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                beats.push(4 - beat_count);\n                beat_count\
    \ = 0;\n            }\n            'o' | '|' => {\n                beats.push(2\
    \ - beat_count);\n                beat_count = 0;\n            }\n           \
    \ '.' | '|' => {\n                beats.push(1 - beat_count);\n              \
    \  beat_count = 0;\n            }\n            _ => beat_count += 1,\n       \
    \ }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpao1tk7tr.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                result.push(current_beat);\n          \
    \      current_beat = 0;\n            }\n            _ => {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    result.push(current_beat);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpsuh1d9or.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            'o' |\
    \ '|' => result.push(2),\n            '.' | '|' => result.push(1),\n         \
    \   _ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpidttvn60.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 0;\n            }\n            'o' | '|' => {\n                current_beat\
    \ += 1;\n            }\n            '.' => {}\n            _ => panic!(\"Unknown\
    \ character {}\", c),\n        }\n    }\n    result.push(current_beat);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpa64hmajy.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut count\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(4);\n            count += 4;\n        } else if c == '|' {\n \
    \           result.push(count);\n            count = 0;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0l4s301d.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            result.push(match current_note.as_str() {\n                \"o\"\
    \ => 4,\n                \"o\" => 2,\n                \".\" => 1,\n          \
    \      _ => 0,\n            });\n            current_note.clear();\n        }\
    \ else {\n            current_note.push(c);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa6iepx_4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut index = 0;\n    while index < music_string.len() {\n        let c = music_string.chars().nth(index).unwrap();\n\
    \        if c == 'o' {\n            result.push(4);\n            index += 1;\n\
    \        } else if c == '.' {\n            result.push(1);\n            index\
    \ += 2;\n        } else if c == 'o' {\n            result.push(2);\n         \
    \   index += 2;\n        } else {\n            index += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpcyg5phj1.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        match c {\n \
    \           'o' => {\n                if current_note.is_empty() {\n         \
    \           current_note.push(c);\n                } else {\n                \
    \    result.push(current_note.len() as isize);\n                    current_note.clear();\n\
    \                    current_note.push(c);\n                }\n            }\n\
    \            '|' => {\n                if current_note.is_empty() {\n        \
    \            result.push(1);\n                } else {\n                    current_note.push(c);\n\
    \                }\n            }\n            '.' => {\n                if current_note.is_empty()\
    \ {\n                    result.push(1);\n                } else {\n         \
    \           current_note.push(c);\n                }\n            }\n        \
    \    _ => {}\n        }\n    }\n    if !current_note.is_empty() {\n        result.push(current_note.len()\
    \ as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5lb1qum9.rs:48:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: String = String::new();\n\
    \    for c in music_string.chars() {\n        if c == '|' {\n            match\
    \ current_note.as_str() {\n                \"o\" => {\n                    result.push(current_beat\
    \ + 4);\n                    current_beat = 0;\n                }\n          \
    \      \"o.\" => {\n                    result.push(current_beat + 2);\n     \
    \               current_beat = 0;\n                }\n                \".o\" =>\
    \ {\n                    result.push(current_beat + 1);\n                    current_beat\
    \ = 0;\n                }\n                _ => {\n                    current_beat\
    \ = 0;\n                }\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n            current_beat\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpvwnhbt00.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(4);\n            }\n\
    \            'o' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(2);\n            }\n\
    \            '.' | '|' => {\n                result.push(current_beat);\n    \
    \            current_beat = 0;\n                result.push(1);\n            }\n\
    \            ' ' => {\n                result.push(current_beat);\n          \
    \      current_beat = 0;\n            }\n            _ => {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    result.push(current_beat);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpsuh1d9or.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => panic!(\"Invalid note!\"),\n            }\n            current_note.clear();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp7hw2c87e.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: -1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut count = 0;\n\
    \        while i < music_string.len() && music_string.chars().nth(i).unwrap()\
    \ == 'o' {\n            count += 1;\n            i += 1;\n        }\n        if\
    \ count > 0 {\n            result.push(count * 4);\n        }\n        if i <\
    \ music_string.len() && music_string.chars().nth(i).unwrap() == '.' {\n      \
    \      result.push(1);\n            i += 1;\n        }\n        if i < music_string.len()\
    \ && music_string.chars().nth(i).unwrap() == '|' {\n            result.push(2);\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749051
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o.\" => result.push(2),\n                \"..\" => result.push(1),\n\
    \                _ => panic!(\"Unexpected note\"),\n            }\n          \
    \  current_note.clear();\n        } else {\n            current_note.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpwki3d7wn.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut chars\
    \ = music_string.chars();\n    while let Some(c) = chars.next() {\n        match\
    \ c {\n            'o' => {\n                if let Some('|') = chars.next() {\n\
    \                    result.push(2);\n                } else {\n             \
    \       result.push(4);\n                }\n            }\n            '.' =>\
    \ {\n                if let Some('|') = chars.next() {\n                    result.push(1);\n\
    \                } else {\n                    result.push(0);\n             \
    \   }\n            }\n            _ => result.push(0),\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 1, 0, 1, 0, 1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpmau0qnld.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(current_beat);\n                current_beat\
    \ = 4;\n            }\n            'o' | '|' => {\n                result.push(current_beat);\n\
    \                current_beat = 2;\n            }\n            '.' | '|' => {\n\
    \                result.push(current_beat);\n                current_beat = 1;\n\
    \            }\n            _ => {}\n        }\n    }\n    result.push(current_beat);\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpxneh7kt7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut j = i;\n   \
    \     while j < music_string.len() && music_string.chars().nth(j).unwrap() !=\
    \ '|' {\n            j += 1;\n        }\n        let note = &music_string[i..j];\n\
    \        match note {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ panic!(\"Invalid note\"),\n        }\n        i = j + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid note'', /tmp/tmp7mxwbaqh.rs:21:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '|' {\n            match current_note.as_str() {\n      \
    \          \"o\" => result.push(4),\n                \"o.\" => result.push(2),\n\
    \                \"..\" => result.push(1),\n                _ => panic!(\"Invalid\
    \ note: {}\", current_note),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmph84yv37s.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut current_note: String = String::new();\n    for c in music_string.chars()\
    \ {\n        if c == '.' || c == 'o' {\n            current_note.push(c);\n  \
    \      } else {\n            match current_note.as_str() {\n                \"\
    o\" => result.push(4),\n                \"o|\" => result.push(2),\n          \
    \      \".|\" => result.push(1),\n                _ => (),\n            }\n  \
    \          current_note = String::new();\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp2ey7d2u9.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749046
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == '|' {\n\
    \            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpyl0an_94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
