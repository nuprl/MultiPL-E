language: rs
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| {\n        \
    \    let a_len = a.len();\n            let b_len = b.len();\n            if a_len\
    \ == b_len {\n                a.cmp(b)\n            } else {\n               \
    \ a_len.cmp(&b_len)\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmp41_jo02m.rs:15:10\n   |\n15 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp41_jo02m.rs:14:17: 14:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let len_a = a.len();\n       \
    \ let len_b = b.len();\n        if len_a == len_b {\n            a.cmp(b)\n  \
    \      } else {\n            len_a.cmp(&len_b)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpo9isv8nd.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| {\n        \
    \    let a_len = a.len();\n            let b_len = b.len();\n            if a_len\
    \ == b_len {\n                a.cmp(b)\n            } else {\n               \
    \ a_len.cmp(&b_len)\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmp41_jo02m.rs:15:10\n   |\n15 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp41_jo02m.rs:14:17: 14:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ new_list: Vec<String> = Vec::new();\n    for i in lst {\n        if i.len()\
    \ % 2 == 0 {\n            new_list.push(i);\n        }\n    }\n    new_list.sort();\n\
    \    new_list\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmpwe5bmefh.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        a.len().cmp(&b.len())\n      \
    \      .then_with(|| a.to_lowercase().cmp(&b.to_lowercase()))\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp2zq37sax.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.sort_by(|a,\
    \ b| a.cmp(&b));\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp4rnye6c8.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ result: Vec<String> = Vec::new();\n    for item in lst {\n        if item.len()\
    \ % 2 == 0 {\n            result.push(item);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmpyibazvtd.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len % 2 == 0 && b_len % 2 == 0 {\n      \
    \      a.cmp(b)\n        } else if a_len % 2 == 0 {\n            Ordering::Less\n\
    \        } else if b_len % 2 == 0 {\n            Ordering::Greater\n        }\
    \ else {\n            a.cmp(b)\n        }\n    });\n    lst\n}\n\nfn main() {\n\
    \    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp1aok0m6o.rs:20:13\n   |\n20 |             Ordering::Less\n   |     \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp1aok0m6o.rs:22:13\n\
    \   |\n22 |             Ordering::Greater\n   |             ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| {\n        \
    \    let a_len = a.len();\n            let b_len = b.len();\n            if a_len\
    \ == b_len {\n                a.cmp(b)\n            } else {\n               \
    \ a_len.cmp(&b_len)\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmp41_jo02m.rs:15:10\n   |\n15 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp41_jo02m.rs:14:17: 14:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        a.len().cmp(&b.len())\n      \
    \      .then_with(|| a.cmp(&b))\n    });\n    lst\n}\n\nfn main() {\n    let candidate\
    \ = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"\
    a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp71kd1x72.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmpmlwzw2iv.rs:15:10\n   |\n15 |         .sorted_by(|a,\
    \ b| a.len().cmp(&b.len()).then(a.cmp(b)))\n   |          ^^^^^^^^^ method not\
    \ found in `Filter<std::vec::IntoIter<String>, [closure@/tmp/tmpmlwzw2iv.rs:14:17:\
    \ 14:37]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|x| x.len() % 2 == 0)\n        .collect::<Vec<String>>()\n}\n\
    \nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"school\", \"AI\", \"asdf\"]`,\n right: `[\"AI\", \"asdf\", \"school\"]`',\
    \ /tmp/tmptieqga4s.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        let a_len =\
    \ a.len();\n        let b_len = b.len();\n        if a_len == b_len {\n      \
    \      a.cmp(b)\n        } else {\n            a_len.cmp(&b_len)\n        }\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpto3ai6ti.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|s| s.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|s| s.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmphnzfauk5.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ result = Vec::new();\n    for i in lst {\n        if i.len() % 2 == 0 {\n  \
    \          result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmpsacih6gq.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        a.len()\n  \
    \          .cmp(&b.len())\n            .then_with(|| a.to_lowercase().cmp(&b.to_lowercase()))\n\
    \    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n  \
    \  assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst.into_iter().filter(|x| x.len() % 2 == 0).collect();\n\
    \    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"aaaa\", \"bbbb\", \"cc\", \"dd\"]`,\n right: `[\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]`', /tmp/tmp5140qw5o.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ sorted_list = lst.clone();\n    sorted_list.sort_by(|a, b| {\n        if a.len()\
    \ == b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    sorted_list\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp4t3wlt_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    lst.into_iter()\n\
    \        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| {\n        \
    \    let a_len = a.len();\n            let b_len = b.len();\n            if a_len\
    \ == b_len {\n                a.cmp(b)\n            } else {\n               \
    \ a_len.cmp(&b_len)\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Filter` in\
    \ the current scope\n  --> /tmp/tmp41_jo02m.rs:15:10\n   |\n15 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp41_jo02m.rs:14:17: 14:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        let a_len = a.len();\n       \
    \ let b_len = b.len();\n        if a_len == b_len {\n            a.cmp(b)\n  \
    \      } else {\n            a_len.cmp(&b_len)\n        }\n    });\n    lst\n\
    }\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmpyrlll9il.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| {\n        if a.len() == b.len() {\n    \
    \        a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n     \
    \   }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmplrjtlu_s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"dcba\", \"abcd\"]`,\n right: `[\"abcd\", \"dcba\"]`', /tmp/tmpzvmdty8s.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 0
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst: Vec<String> = lst\n        .into_iter()\n        .filter(|x| x.len() %\
    \ 2 == 0)\n        .collect();\n    lst.sort_by(|a, b| {\n        if a.len() ==\
    \ b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n\
    \        }\n    });\n    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n\
    \    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"\
    aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]),\
    \ vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"\
    abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"\
    ), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"\
    c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008791
- exit_code: 101
  program: "/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n    let mut\
    \ lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.dedup();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"\
    aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"\
    AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"\
    ), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"\
    abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"\
    ), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"\
    au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"\
    ), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"\
    a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]),\
    \ vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"\
    bbbb\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"aa\", \"aaa\"]`,\n right: `[\"aa\"]`', /tmp/tmp0mtcws67.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008790
