name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\nfn get_closest_vowel(word:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    let mut last_char = ' ';\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         last_vowel = i;\n        } else {\n            if last_vowel > last_consonant\
    \ {\n                result = word[last_vowel..i].to_string();\n            }\n\
    \            last_consonant = i;\n        }\n        last_char = c;\n    }\n \
    \   if last_vowel > last_consonant {\n        result = word[last_vowel..].to_string();\n\
    \    }\n    result", "    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut last_consonant_index = word.len();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    for (i, c) in word.chars().enumerate() {\n       \
    \ if vowels.contains(&c) {\n            if i > last_consonant_index {\n      \
    \          if i - last_consonant_index < closest_vowel_index - last_consonant_index\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else if consonants.contains(&c)\
    \ {\n            last_consonant_index = i;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            closest_vowel_index = i;\n\
    \            closest_vowel = c.to_string();\n        } else if closest_vowel_index\
    \ != word.len() {\n            break;\n        }\n    }\n    closest_vowel", " \
    \   let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut\
    \ last_consonant = 0;\n    let mut last_char = ' ';\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           last_vowel = i;\n        } else {\n            last_consonant = i;\n\
    \        }\n        if last_vowel > last_consonant && last_consonant > 0 && last_vowel\
    \ > 0 {\n            result = word[last_vowel..last_vowel + 1].to_string();\n\
    \        }\n        last_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut last_vowel_char = ' ';\n    let mut last_consonant_char =\
    \ ' ';\n    let mut last_char = ' ';\n    let mut vowel_found = false;\n    let\
    \ mut consonant_found = false;\n    let mut vowel_index = 0;\n    let mut consonant_index\
    \ = 0;\n    let mut vowel_char = ' ';\n    let mut consonant_char = ' ';\n   \
    \ let mut char = ' ';\n    let mut i = 0;\n    for c in word.chars() {\n     \
    \   char = c;\n        if is_vowel(char) {\n            vowel_found = true;\n\
    \            vowel_index = i;\n            vowel_char = char;\n        } else\
    \ {\n            consonant_found = true;\n            consonant_index = i;\n \
    \           consonant_char = char;\n        }\n        if vowel_found && consonant_found\
    \ {\n            if last_vowel_index == 0 {\n                last_vowel_index\
    \ = vowel_index;\n                last_vowel_char = vowel_char;\n            \
    \    last_consonant_index = consonant_index;\n                last_consonant_char\
    \ = consonant_char;\n                last_char = char;\n            } else {\n\
    \                if last_vowel_index < consonant_index {\n                   \
    \ last_vowel_index = vowel_index;\n                    last_vowel_char = vowel_char;\n\
    \                    last_consonant_index = consonant_index;\n               \
    \     last_consonant_char = consonant_char;\n                    last_char = char;\n\
    \                }\n            }\n            vowel_found = false;\n        \
    \    consonant_found = false;\n        }\n        i += 1;\n    }\n    if last_vowel_index\
    \ > 0 {\n        result.push(last_vowel_char);\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_index =\
    \ 0;\n    let mut index = 0;\n    for c in word.chars() {\n        if is_vowel(c)\
    \ {\n            last_vowel = index;\n            last_vowel_index = index;\n\
    \        } else {\n            last_consonant = index;\n            last_consonant_index\
    \ = index;\n        }\n        index += 1;\n    }\n    if last_vowel_index > last_consonant_index\
    \ {\n        result.push(word.chars().nth(last_vowel_index).unwrap());\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut prev_char = '\
    \ ';\n    let mut vowel_found = false;\n    let mut vowel_found_index = 0;\n \
    \   let mut vowel_found_char = ' ';\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char != ' ' && !vowel_found {\n                vowel_found\
    \ = true;\n                vowel_found_index = i;\n                vowel_found_char\
    \ = c;\n            }\n        } else {\n            if vowel_found {\n      \
    \          if i == vowel_found_index + 1 {\n                    result.push(vowel_found_char);\n\
    \                    break;\n                } else {\n                    vowel_found\
    \ = false;\n                }\n            }\n        }\n        prev_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_found =\
    \ false;\n    let mut last_consonant_found = false;\n    let mut last_char_is_vowel\
    \ = false;\n    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant = false;\n    let mut\
    \ last_char_is_vowel_and_consonant_and_found = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first_and_not_last\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first_and_not_last_and_not_last_vowel\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first_and_not_last_and_not_last_vowel_and_not_last_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first_and_not_last_and_not_last_vowel_and_not_last_consonant_and_not_last_vowel_found\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_found_and_not_first_and_not_last_and_not_last_vowel_and_not_last_consonant_and_not_last_vowel_found_and_not_last_consonant_found\
    \ = false;\n    let mut last_char_is_vowel_and_", "    let mut closest_vowel =\
    \ String::new();\n    let mut closest_distance = word.len();\n    let mut last_consonant\
    \ = word.len();\n    let mut last_vowel = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if i > last_consonant && i - last_consonant < closest_distance {\n\
    \                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n            last_vowel = i;\n        } else\
    \ {\n            if i < last_vowel && last_vowel - i < closest_distance {\n  \
    \              closest_distance = last_vowel - i;\n                closest_vowel\
    \ = word[last_vowel..i].chars().next().unwrap().to_string();\n            }\n\
    \            last_consonant = i;\n        }\n    }\n    closest_vowel", "    let\
    \ mut result = String::new();\n    let mut last_vowel = String::new();\n    let\
    \ mut last_consonant = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant =\
    \ false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut last_char_is_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_consonant = false;\n\
    \    let mut last_char_is_vowel_and_consonant_and_consonant = false;\n    let\
    \ mut last_char_is_vowel_or_consonant_and_vowel = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel =\
    \ false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel = false;\n\
    \    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_vowel\
    \ = false;\n    let mut last_char_is_vowel_and_conson", "    let mut last_vowel\
    \ = None;\n    let mut last_consonant = None;\n    let mut result = String::new();\n\
    \    for c in word.chars() {\n        if is_vowel(c) {\n            last_vowel\
    \ = Some(c);\n        } else {\n            if last_vowel.is_some() {\n      \
    \          result.push(last_vowel.unwrap());\n                break;\n       \
    \     }\n            last_consonant = Some(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_vowel = false;\n    let mut\
    \ prev_consonant = false;\n    for c in word.chars().rev() {\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if prev_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \            prev_vowel = true;\n        } else {\n            if prev_vowel {\n\
    \                result.push(c);\n                break;\n            }\n    \
    \        prev_consonant = true;\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_chars:\
    \ Vec<char> = word.chars().collect();\n    let mut word_len = word_chars.len();\n\
    \    let mut i = word_len - 1;\n    let mut j = word_len - 1;\n    let mut k =\
    \ word_len - 1;\n    let mut l = word_len - 1;\n    let mut m = word_len - 1;\n\
    \    let mut n = word_len - 1;\n    let mut o = word_len - 1;\n    let mut p =\
    \ word_len - 1;\n    let mut q = word_len - 1;\n    let mut r = word_len - 1;\n\
    \    let mut s = word_len - 1;\n    let mut t = word_len - 1;\n    let mut u =\
    \ word_len - 1;\n    let mut v = word_len - 1;\n    let mut w = word_len - 1;\n\
    \    let mut x = word_len - 1;\n    let mut y = word_len - 1;\n    let mut z =\
    \ word_len - 1;\n    let mut a = word_len - 1;\n    let mut e = word_len - 1;\n\
    \    let mut i = word_len - 1;\n    let mut o = word_len - 1;\n    let mut u =\
    \ word_len - 1;\n    let mut b = word_len - 1;\n    let mut c = word_len - 1;\n\
    \    let mut d = word_len - 1;\n    let mut f = word_len - 1;\n    let mut g =\
    \ word_len - 1;\n    let mut h = word_len - 1;\n    let mut j = word_len - 1;\n\
    \    let mut k = word_", "    let mut result = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_char\
    \ = String::new();\n    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut\
    \ last_char_is_vowel_or_consonant_or_empty = false;\n    let mut last_char_is_empty\
    \ = false;\n    let mut last_char_is_vowel_or_empty = false;\n    let mut last_char_is_consonant_or_empty\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_end = false;\n\
    \    let mut last_char_is_vowel_or_consonant_or_end = false;\n    let mut last_char_is_vowel_or_end\
    \ = false;\n    let mut last_char_is_consonant_or_end = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_start = false;\n  \
    \  let mut last_char_is_vowel_or_start = false;\n    let mut last_char_is_consonant_or_start\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start_or_end\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_start_or_end = false;\n\
    \    let mut last_char_is_vowel_or_start_or_end = false;\n    let mut last_char_is_consonant_or_start_or_end\
    \ = false;\n    let mut last_char_is_start = false;\n    let mut last_char_is_",
  "    let mut result = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_char_index = 0;\n    let mut index = 0;\n    let mut found = false;\n\
    \    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut consonants\
    \ = vec![\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    for c in word.chars() {\n        let s = c.to_string();\n        if vowels.contains(&s.as_str())\
    \ {\n            last_vowel = s;\n            last_vowel_index = index;\n    \
    \    }\n        if consonants.contains(&s.as_str()) {\n            last_consonant\
    \ = s;\n            last_consonant_index = index;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            if last_vowel_index < index {\n      \
    \          result = last_vowel;\n                found = true;\n            }\n\
    \        }\n        last_char = s;\n        last_char_index = index;\n       \
    \ index += 1;\n    }\n    if !found {\n        if last_vowel_index > last_consonant_index\
    \ {\n            result = last_vowel;\n        }\n    }\n    result", "    let\
    \ mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonant_found\
    \ = false;\n    for (i, c) in word.chars().enumerate() {\n        if consonant_found\
    \ && vowels.contains(&c) {\n            if i < closest_distance {\n          \
    \      closest_distance = i;\n                closest_vowel = c.to_string();\n\
    \            }\n        }\n        if !vowels.contains(&c) {\n            consonant_found\
    \ = true;\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let word = word.chars().collect::<Vec<char>>();\n    let\
    \ mut result = String::new();\n    let mut index = 0;\n    let mut found = false;\n\
    \    for i in (0..word.len()).rev() {\n        if vowels.contains(&word[i]) {\n\
    \            if i == word.len() - 1 {\n                continue;\n           \
    \ }\n            if !vowels.contains(&word[i + 1]) {\n                index =\
    \ i;\n                found = true;\n                break;\n            }\n \
    \       }\n    }\n    if found {\n        result.push(word[index]);\n    }\n \
    \   result", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    let mut vowel_index\
    \ = 0;\n    let mut vowel_found = false;\n    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            vowel_index = i;\n            vowel_found = true;\n        }\
    \ else {\n            if vowel_found && vowel_index > last_consonant_index {\n\
    \                if vowel_index - last_consonant_index < closest_vowel_distance\
    \ {\n                    closest_vowel_distance = vowel_index - last_consonant_index;\n\
    \                    closest_vowel = c.to_string();\n                }\n     \
    \       }\n            last_consonant_index = i;\n        }\n    }\n    closest_vowel",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = 0;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let mut word = word.chars().collect::<Vec<char>>();\n\
    \    let mut i = word.len() - 1;\n    let mut vowel = String::new();\n    let\
    \ mut consonant = String::new();\n    while i > 0 {\n        if word[i].is_vowel()\
    \ {\n            vowel = word[i].to_string();\n            break;\n        }\n\
    \        i -= 1;\n    }\n    if vowel.is_empty() {\n        return vowel;\n  \
    \  }\n    i -= 1;\n    while i > 0 {\n        if word[i].is_consonant() {\n  \
    \          consonant = word[i].to_string();\n            break;\n        }\n \
    \       i -= 1;\n    }\n    if consonant.is_empty() {\n        return consonant;\n\
    \    }\n    vowel", "    let mut result = String::new();\n    let mut vowels =\
    \ Vec::new();\n    let mut consonants = Vec::new();\n    let mut index = 0;\n\
    \    for c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' {\n            vowels.push(index);\n        } else {\n  \
    \          consonants.push(index);\n        }\n        index += 1;\n    }\n  \
    \  for i in 0..consonants.len() {\n        if i == 0 {\n            if vowels.len()\
    \ > 0 && vowels[0] < consonants[i] {\n                result = vowels[0].to_string();\n\
    \            }\n        } else {\n            if vowels.len() > 0 && vowels[0]\
    \ > consonants[i-1] && vowels[0] < consonants[i] {\n                result = vowels[0].to_string();\n\
    \            }\n        }\n    }\n    if vowels.len() > 0 && vowels[0] > consonants[consonants.len()-1]\
    \ {\n        result = vowels[0].to_string();\n    }\n    result", "    let mut\
    \ closest_vowel = String::new();\n    let mut vowel_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut last_consonant_index = 0;\n    let mut last_consonant_found\
    \ = false;\n    let mut current_index = 0;\n    for c in word.chars() {\n    \
    \    if is_vowel(c) {\n            if last_consonant_found {\n               \
    \ vowel_found = true;\n                vowel_index = current_index;\n        \
    \        break;\n            }\n        } else {\n            last_consonant_found\
    \ = true;\n            last_consonant_index = current_index;\n        }\n    \
    \    current_index += 1;\n    }\n    if vowel_found {\n        closest_vowel.push(word.chars().nth(vowel_index).unwrap());\n\
    \    }\n    closest_vowel", "    let mut vowel_index = 0;\n    let mut vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    let mut last_consonant_distance\
    \ = word.len();\n    let mut result = String::new();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            if i - last_consonant_index < vowel_distance\
    \ {\n                vowel_distance = i - last_consonant_index;\n            \
    \    vowel_index = i;\n            }\n        } else {\n            if i - vowel_index\
    \ < last_consonant_distance {\n                last_consonant_distance = i - vowel_index;\n\
    \                last_consonant_index = i;\n            }\n        }\n    }\n\
    \    if vowel_distance < last_consonant_distance {\n        result.push(word.chars().nth(vowel_index).unwrap());\n\
    \    }\n    result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut index = word.len();\n\
    \    let mut vowel_index = 0;\n    let mut vowel_found = false;\n    let mut vowel_distance\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_consonant_found\
    \ = false;\n    let mut last_consonant_distance = 0;\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for c\
    \ in word.chars().rev() {\n        index -= 1;\n        if !vowel_found {\n  \
    \          if vowels.contains(&c) {\n                vowel_found = true;\n   \
    \             vowel_index = index;\n                vowel_distance = word.len()\
    \ - index;\n            }\n        }\n        if !last_consonant_found {\n   \
    \         if consonants.contains(&c) {\n                last_consonant_found =\
    \ true;\n                last_consonant_index = index;\n                last_consonant_distance\
    \ = word.len() - index;\n            }\n        }\n        if vowel_found && last_consonant_found\
    \ {\n            break;\n        }\n    }\n    if vowel_found && last_consonant_found\
    \ && vowel_index > last_consonant_index {\n        return word[vowel_index..vowel_index+1].to_string();\n\
    \    }\n    return \"\".to_string();", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    let mut last_consonant_index\
    \ = word.len();\n    let mut vowel_found = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if is_vowel(c) {\n            if i < last_consonant_index {\n   \
    \             closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i;\n                vowel_found = true;\n            }\n        } else {\n\
    \            last_consonant_index = i;\n        }\n    }\n    if vowel_found {\n\
    \        closest_vowel\n    } else {\n        String::new()\n    }", "    let\
    \ mut result = String::new();\n    let mut prev_char = ' ';\n    let mut prev_vowel\
    \ = ' ';\n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            if prev_char != ' ' && prev_char\
    \ != 'a' && prev_char != 'e' && prev_char != 'i' && prev_char != 'o' && prev_char\
    \ != 'u' {\n                result.push(c);\n                break;\n        \
    \    }\n            prev_vowel = c;\n        }\n        prev_char = c;\n    }\n\
    \    if result.is_empty() {\n        result.push(prev_vowel);\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_vowel = false;\n    let mut\
    \ prev_consonant = false;\n    for c in word.chars().rev() {\n        if is_vowel(c)\
    \ {\n            if prev_consonant {\n                result.push(c);\n      \
    \          break;\n            }\n            prev_vowel = true;\n        } else\
    \ {\n            if prev_vowel {\n                result.push(c);\n          \
    \      break;\n            }\n            prev_consonant = true;\n        }\n\
    \    }\n    result.chars().rev().collect()", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut found = false;\n    for i in\
    \ 0..word.len() {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u' {\n            if i > 0 && i < word.len()\
    \ - 1 {\n                if word[i - 1] != 'a' && word[i - 1] != 'e' && word[i\
    \ - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i + 1] != 'a'\
    \ && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i\
    \ + 1] != 'u' {\n                    result.push(word[i]);\n                 \
    \   found = true;\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    if found {\n        result\n    } else {\n        String::new()\n\
    \    }", "    let mut chars = word.chars().rev().peekable();\n    let mut result\
    \ = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ found_vowel = false;\n    while let Some(c) = chars.next() {\n        if vowels.contains(&c)\
    \ {\n            result.push(c);\n            found_vowel = true;\n        } else\
    \ if found_vowel {\n            break;\n        }\n    }\n    result.chars().rev().collect()",
  "    let mut closest_vowel = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_char = String::new();\n\
    \    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant =\
    \ false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut last_char_is_vowel_or_consonant_or_other\
    \ = false;\n    let mut last_char_is_other = false;\n    let mut last_char_is_vowel_or_other\
    \ = false;\n    let mut last_char_is_consonant_or_other = false;\n    let mut\
    \ last_char_is_vowel_or_consonant_or_other = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other_or_other_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other_or_other_or_other_or_other_or_other\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_other_or_other_or_other_or_other_or_other_or_other_or_other_or_other\
    \ = false;\n    let mut", "    let mut closest_vowel = String::new();\n    let\
    \ mut closest_vowel_index = word.len();\n    let mut last_consonant_index = word.len();\n\
    \    let mut vowel_found = false;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if is_vowel(c) {\n            if i < last_consonant_index {\n   \
    \             vowel_found = true;\n                if i < closest_vowel_index\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant_index = i;\n        }\n    }\n    if vowel_found {\n  \
    \      closest_vowel\n    } else {\n        String::new()\n    }", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..].to_string();\n            break;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char != ' ' && prev_char != 'a' && prev_char != 'e' && prev_char\
    \ != 'i' && prev_char != 'o' && prev_char != 'u' {\n                result = c.to_string();\n\
    \                break;\n            }\n            prev_vowel = c;\n        }\n\
    \        prev_char = c;\n    }\n    if result.is_empty() {\n        result = prev_vowel.to_string();\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut vowels\
    \ = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut vowel_count = 0;\n    let\
    \ mut consonant_count = 0;\n    let mut vowel_distance = 0;\n    let mut consonant_distance\
    \ = 0;\n    let mut distance = 0;\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_consonant = String::new();\n    let mut closest_distance\
    \ = 0;\n    let mut closest_vowel_index = 0;\n    let mut closest_consonant_index\
    \ = 0;\n    let mut closest_vowel_count = 0;\n    let mut closest_consonant_count\
    \ = 0;\n    let mut closest_vowel_distance = 0;\n    let mut closest_consonant_distance\
    \ = 0;\n    let mut word_chars: Vec<char> = word.chars().collect();\n    let mut\
    \ word_length = word_chars.len();\n    let mut word_index = 0;\n    let mut word_char\
    \ = ' ';\n    let mut word_char_string = String::new();\n    let mut word_char_string_lower\
    \ = String::new();\n    let mut word_char_string_upper = String::new();\n    let\
    \ mut vowel_char = ' ';\n    let mut vowel_char_string = String::new();\n    let\
    \ mut vowel_char_string_lower = String::new();\n    let mut vowel_char_string_upper\
    \ = String::new();\n    let mut consonant_char = ' ';\n    let mut consonant_char_string\
    \ = String::new();\n    let mut consonant_char_string_lower = String::new();\n\
    \    let mut consonant_char_string_upper = String::new();\n    let mut vowel_char_index\
    \ = 0;\n    let mut consonant_char_index = 0;\n    let mut vowel_char_count =\
    \ 0;\n    let mut consonant_char_count = 0;\n    let mut vowel_char_distance =\
    \ 0;\n    let mut", "    let mut closest_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_char\
    \ = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut last_char_index = 0;\n    let mut vowel_index = 0;\n    let\
    \ mut consonant_index = 0;\n    let mut char_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut char_found = false;\n\
    \    let mut vowel_distance = 0;\n    let mut consonant_distance = 0;\n    let\
    \ mut char_distance = 0;\n    let mut vowel_distance_min = 0;\n    let mut consonant_distance_min\
    \ = 0;\n    let mut char_distance_min = 0;\n    let mut vowel_distance_min_index\
    \ = 0;\n    let mut consonant_distance_min_index = 0;\n    let mut char_distance_min_index\
    \ = 0;\n    let mut vowel_distance_min_found = false;\n    let mut consonant_distance_min_found\
    \ = false;\n    let mut char_distance_min_found = false;\n    let mut vowel_distance_min_index_found\
    \ = false;\n    let mut consonant_distance_min_index_found = false;\n    let mut\
    \ char_distance_min_index_found = false;\n    let mut vowel_distance_min_index_found_first\
    \ = false;\n    let mut consonant_distance_min_index_found_first = false;\n  \
    \  let mut char_distance_min_index_found_first = false;\n    let mut vowel_distance_min_index_found_second\
    \ = false;\n    let mut consonant_distance_min_index_found_second = false;\n \
    \   let mut char_distance_min_index_found_second = false;\n    let mut vowel_distance_min_index_found_third\
    \ = false;\n    let mut consonant_distance_min_index_found_third = false;\n  \
    \  let mut char_", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut i = 0;\n    while i < word.len()\
    \ {\n        if word[i].is_vowel() {\n            result.push(word[i]);\n    \
    \        break;\n        }\n        i += 1;\n    }\n    result", "    let mut\
    \ vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_vowel_distance = 0;\n    let mut last_consonant_distance\
    \ = 0;\n    let mut result = String::new();\n    let mut i = 0;\n    for c in\
    \ word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            vowel_index = i;\n            if last_consonant_index\
    \ != 0 {\n                last_vowel_distance = vowel_index - last_consonant_index;\n\
    \                if last_vowel_index == 0 {\n                    last_vowel_index\
    \ = vowel_index;\n                } else {\n                    if last_vowel_distance\
    \ < last_consonant_distance {\n                        last_vowel_index = vowel_index;\n\
    \                    }\n                }\n            }\n        } else {\n \
    \           if vowel_index != 0 {\n                last_consonant_index = i;\n\
    \                last_consonant_distance = last_consonant_index - vowel_index;\n\
    \            }\n        }\n        i += 1;\n    }\n    if last_vowel_index !=\
    \ 0 {\n        result.push(word.chars().nth(last_vowel_index).unwrap());\n   \
    \ }\n    result", "    let vowels = \"aeiou\";\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..].to_string();\n        }\n    }\n  \
    \  result", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if is_vowel(c) {\n            if i >\
    \ last_consonant_index {\n                if i - last_consonant_index < closest_vowel_index\
    \ - last_consonant_index {\n                    closest_vowel = c.to_string();\n\
    \                    closest_vowel_index = i;\n                }\n           \
    \ }\n        } else {\n            last_consonant_index = i;\n        }\n    }\n\
    \    closest_vowel", "    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel_index = 0;\n \
    \   let mut last_consonant_index = 0;\n    let mut vowel_found = false;\n    let\
    \ mut consonant_found = false;\n    let mut index = 0;\n    for c in word.chars()\
    \ {\n        if is_vowel(c) {\n            last_vowel = c as u8;\n           \
    \ last_vowel_index = index;\n            vowel_found = true;\n        } else {\n\
    \            last_consonant = c as u8;\n            last_consonant_index = index;\n\
    \            consonant_found = true;\n        }\n        if vowel_found && consonant_found\
    \ {\n            if last_vowel_index > last_consonant_index {\n              \
    \  result.push(last_vowel as char);\n                break;\n            }\n \
    \       }\n        index += 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_vowel_pos = 0;\n    let mut last_consonant_pos = 0;\n    let\
    \ mut last_char_is_vowel = false;\n    let mut last_char_is_consonant = false;\n\
    \    let mut last_char_is_vowel_pos = 0;\n    let mut last_char_is_consonant_pos\
    \ = 0;\n    let mut last_char_is_vowel_pos_result = 0;\n    let mut last_char_is_consonant_pos_result\
    \ = 0;\n    let mut last_char_is_vowel_result = false;\n    let mut last_char_is_consonant_result\
    \ = false;\n    let mut last_char_is_vowel_result_pos = 0;\n    let mut last_char_is_consonant_result_pos\
    \ = 0;\n    let mut last_char_is_vowel_result_pos_result = 0;\n    let mut last_char_is_consonant_result_pos_result\
    \ = 0;\n    let mut last_char_is_vowel_result_result = false;\n    let mut last_char_is_consonant_result_result\
    \ = false;\n    let mut last_char_is_vowel_result_result_pos = 0;\n    let mut\
    \ last_char_is_consonant_result_result_pos = 0;\n    let mut last_char_is_vowel_result_result_pos_result\
    \ = 0;\n    let mut last_char_is_consonant_result_result_pos_result = 0;\n   \
    \ let mut last_char_is_vowel_result_result_result = false;\n    let mut last_char_is_consonant_result_result_result\
    \ = false;\n    let mut last_char_is_vowel_result_result_result_pos = 0;\n   \
    \ let mut last_char_is_consonant_result_result_result_pos = 0;\n    let mut last_char_is_vowel_result_result_result_pos_",
  "    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    let mut last_vowel = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if \"aeiou\".contains(c)\
    \ {\n            last_vowel = i;\n            if last_consonant < i {\n      \
    \          let distance = i - last_consonant;\n                if distance < closest_distance\
    \ {\n                    closest_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant = i;\n        }\n    }\n    closest_vowel", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_char = String::new();\n    for c in word.chars() {\n       \
    \ if vowels.contains(&c) {\n            last_vowel = c.to_string();\n        }\
    \ else {\n            last_consonant = c.to_string();\n        }\n        if last_vowel\
    \ != \"\" && last_consonant != \"\" {\n            result = last_vowel.clone();\n\
    \            break;\n        }\n        last_char = c.to_string();\n    }\n  \
    \  if result == \"\" {\n        result = last_char;\n    }\n    result", "   \
    \ let mut result = String::new();\n    let mut vowel_pos = 0;\n    let mut prev_consonant_pos\
    \ = 0;\n    let mut next_consonant_pos = 0;\n    let mut vowel_found = false;\n\
    \    let mut prev_consonant_found = false;\n    let mut next_consonant_found =\
    \ false;\n    let mut vowel_distance = 0;\n    let mut prev_consonant_distance\
    \ = 0;\n    let mut next_consonant_distance = 0;\n    let mut min_distance = 0;\n\
    \    let mut min_distance_vowel = 0;\n    let mut min_distance_prev_consonant\
    \ = 0;\n    let mut min_distance_next_consonant = 0;\n    let mut min_distance_found\
    \ = false;\n    let mut vowel_list = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ consonant_list = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_chars =\
    \ word.chars().collect::<Vec<char>>();\n    let mut word_len = word_chars.len();\n\
    \    for i in 0..word_len {\n        if vowel_list.contains(&word_chars[i]) {\n\
    \            vowel_found = true;\n            vowel_pos = i;\n            if prev_consonant_found\
    \ {\n                prev_consonant_distance = vowel_pos - prev_consonant_pos;\n\
    \            }\n            if next_consonant_found {\n                next_consonant_distance\
    \ = next_consonant_pos - vowel_pos;\n            }\n            if prev_consonant_found\
    \ && next_consonant_found {\n                if prev_consonant_distance < next_consonant_distance\
    \ {\n                    vowel_distance = prev_consonant_distance;\n         \
    \       } else {\n                    vowel_distance = next", "    let mut result\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ is_consonant = false;\n    for c in word.chars() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c.to_string();\n            if is_consonant {\n\
    \                result = last_vowel.clone();\n                break;\n      \
    \      }\n        } else {\n            last_consonant = c.to_string();\n    \
    \        is_consonant = true;\n        }\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut found = false;\n    let mut prev_char = ' ';\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if !found {\n             \
    \   result.push(c);\n                found = true;\n            }\n        } else\
    \ {\n            if found && prev_char != ' ' {\n                break;\n    \
    \        }\n        }\n        prev_char = c;\n    }\n    result.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = c.to_string();\n        }\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_char = String::new();\n    let mut last_vowel_index = 0;\n \
    \   let mut last_consonant_index = 0;\n    let mut vowel_index = 0;\n    let mut\
    \ consonant_index = 0;\n    let mut vowel_found = false;\n    let mut consonant_found\
    \ = false;\n    let mut vowel_found_first = false;\n    let mut consonant_found_first\
    \ = false;\n    let mut vowel_found_second = false;\n    let mut consonant_found_second\
    \ = false;\n    let mut vowel_found_third = false;\n    let mut consonant_found_third\
    \ = false;\n    let mut vowel_found_fourth = false;\n    let mut consonant_found_fourth\
    \ = false;\n    let mut vowel_found_fifth = false;\n    let mut consonant_found_fifth\
    \ = false;\n    let mut vowel_found_sixth = false;\n    let mut consonant_found_sixth\
    \ = false;\n    let mut vowel_found_seventh = false;\n    let mut consonant_found_seventh\
    \ = false;\n    let mut vowel_found_eighth = false;\n    let mut consonant_found_eighth\
    \ = false;\n    let mut vowel_found_ninth = false;\n    let mut consonant_found_ninth\
    \ = false;\n    let mut vowel_found_tenth = false;\n    let mut consonant_found_tenth\
    \ = false;\n    let mut vowel_found_eleventh = false;\n    let mut consonant_found_eleventh\
    \ = false;\n    let mut vowel_found_twelfth = false;\n    let mut consonant_found_twelfth\
    \ = false;\n    let mut vowel_found_thirteenth = false;\n    let mut consonant_found_thirteenth\
    \ = false;\n    let mut vowel_found_fourteenth = false;\n    let mut consonant_found_fourteenth\
    \ = false;\n    let mut vowel_found_fifteenth = false;\n    let mut conson", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..].to_string();\n            break;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut index = word.len() - 1;\n    let mut vowel_index = 0;\n    let mut vowel_distance\
    \ = 0;\n    let mut consonant_count = 0;\n    let mut vowel_count = 0;\n    let\
    \ mut vowel_flag = false;\n    let mut consonant_flag = false;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_index_found\
    \ = false;\n    let mut consonant_index_found = false;\n    let mut vowel_index_found_flag\
    \ = false;\n    let mut consonant_index_found_flag = false;\n    let mut vowel_index_found_flag_2\
    \ = false;\n    let mut consonant_index_found_flag_2 = false;\n    let mut vowel_index_found_flag_3\
    \ = false;\n    let mut consonant_index_found_flag_3 = false;\n    let mut vowel_index_found_flag_4\
    \ = false;\n    let mut consonant_index_found_flag_4 = false;\n    let mut vowel_index_found_flag_5\
    \ = false;\n    let mut consonant_index_found_flag_5 = false;\n    let mut vowel_index_found_flag_6\
    \ = false;\n    let mut consonant_index_found_flag_6 = false;\n    let mut vowel_index_found_flag_7\
    \ = false;\n    let mut consonant_index_found_flag_7 = false;\n    let mut vowel_index_found_flag_8\
    \ = false;\n    let mut consonant_index_found_flag_8 = false;\n    let mut vowel_index_found_flag_9\
    \ = false;\n    let mut consonant_index_found_flag_9 = false;\n    let mut vowel_index_found_flag_10\
    \ = false;\n    let mut consonant_index_found_flag_10 = false;\n    let mut vowel_index_found_flag_11\
    \ = false;\n    let mut consonant_index_found_flag_11 = false;\n    let mut vowel_index_found_flag_12\
    \ = false;\n    let mut consonant", "    let mut result = String::new();\n   \
    \ let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    let\
    \ mut last_char_is_vowel = false;\n    let mut last_char_is_consonant = false;\n\
    \    let mut last_char_is_vowel_index = 0;\n    let mut last_char_is_consonant_index\
    \ = 0;\n    let mut last_char_is_vowel_index_temp = 0;\n    let mut last_char_is_consonant_index_temp\
    \ = 0;\n    let mut last_char_is_vowel_index_temp_temp = 0;\n    let mut last_char_is_consonant_index_temp_temp\
    \ = 0;\n    let mut last_char_is_vowel_index_temp_temp_temp = 0;\n    let mut\
    \ last_char_is_consonant_index_temp_temp_temp = 0;\n    let mut last_char_is_vowel_index_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_is_consonant_index_temp_temp_temp_temp = 0;\n  \
    \  let mut last_char_is_vowel_index_temp_temp_temp_temp_temp = 0;\n    let mut\
    \ last_char_is_consonant_index_temp_temp_temp_temp_temp = 0;\n    let mut last_char_is_vowel_index_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_is_consonant_index_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_is_vowel_index_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_is_consonant_index_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_is_vowel_index_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    let mut last_char_", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut index = word.len() - 1;\n  \
    \  let mut prev_is_vowel = false;\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            if prev_is_vowel {\n          \
    \      break;\n            } else {\n                result.push(c);\n       \
    \         prev_is_vowel = true;\n            }\n        } else {\n           \
    \ prev_is_vowel = false;\n        }\n        index -= 1;\n    }\n    result.chars().rev().collect()",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            if i > last_consonant_index {\n        \
    \        if i - last_consonant_index < closest_vowel_distance {\n            \
    \        closest_vowel = c.to_string();\n                    closest_vowel_distance\
    \ = i - last_consonant_index;\n                }\n            }\n        } else\
    \ {\n            last_consonant_index = i;\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_char = ' ';\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           last_vowel = i;\n        } else {\n            last_consonant = i;\n\
    \        }\n        if last_vowel > last_consonant && last_char != c {\n     \
    \       result = c.to_string();\n        }\n        last_char = c;\n    }\n  \
    \  result", "    let mut result = String::new();\n    let mut index = word.len()\
    \ - 1;\n    let mut found_consonant = false;\n    let mut found_vowel = false;\n\
    \    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n \
    \       if !found_consonant && !is_vowel(c) {\n            found_consonant = true;\n\
    \        } else if found_consonant && is_vowel(c) {\n            result.push(c);\n\
    \            found_vowel = true;\n            break;\n        }\n        index\
    \ -= 1;\n    }\n    if !found_vowel {\n        result = String::new();\n    }\n\
    \    result", "    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant = word.len();\n    let mut last_vowel\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c)\
    \ {\n            if i > last_consonant {\n                if i - last_consonant\
    \ < closest_distance {\n                    closest_distance = i - last_consonant;\n\
    \                    closest_vowel = c.to_string();\n                }\n     \
    \       }\n            last_vowel = i;\n        } else {\n            if i > last_vowel\
    \ {\n                if i - last_vowel < closest_distance {\n                \
    \    closest_distance = i - last_vowel;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n            last_consonant = i;\n        }\n\
    \    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_distance =\
    \ 0;\n    let mut consonant_distance = 0;\n    let mut distance = 0;\n    let\
    \ mut closest_distance = 0;\n    let mut closest_vowel_index = 0;\n    let mut\
    \ closest_consonant_index = 0;\n    let mut vowel_count = 0;\n    let mut consonant_count\
    \ = 0;\n    let mut vowel_consonant_distance = 0;\n    let mut closest_vowel_consonant_distance\
    \ = 0;\n    let mut vowel_consonant_distance_found = false;\n    let mut closest_vowel_consonant_distance_found\
    \ = false;\n    let mut vowel_consonant_distance_index = 0;\n    let mut closest_vowel_consonant_distance_index\
    \ = 0;\n    let mut vowel_consonant_distance_count = 0;\n    let mut closest_vowel_consonant_distance_count\
    \ = 0;\n    let mut vowel_consonant_distance_index_found = false;\n    let mut\
    \ closest_vowel_consonant_distance_index_found = false;\n    let mut vowel_consonant_distance_index_count\
    \ = 0;\n    let mut closest_vowel_consonant_distance_index_count = 0;\n    let\
    \ mut vowel_consonant_distance_index_found_count = 0;\n    let mut closest_vowel_consonant_distance_index_found_count\
    \ = 0;\n    let mut vowel_consonant_distance_index_found_count_found = false;\n\
    \    let mut closest_vowel_consonant_distance_index_found_count_found = false;",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    let mut last_consonant_index = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if i > last_consonant_index {\n                if i - last_consonant_index\
    \ < closest_vowel_index {\n                    closest_vowel = c.to_string();\n\
    \                    closest_vowel_index = i - last_consonant_index;\n       \
    \         }\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut index = 0;\n    for c in word.chars() {\n        if is_vowel(c) {\n\
    \            last_vowel = c.to_string();\n            last_vowel_index = index;\n\
    \        } else {\n            last_consonant = c.to_string();\n            last_consonant_index\
    \ = index;\n        }\n        index += 1;\n    }\n    if last_vowel_index > last_consonant_index\
    \ {\n        result = last_vowel;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_char\
    \ = ' ';\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_vowel < last_consonant {\n            result\
    \ = word[last_vowel..last_consonant].to_string();\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut index = 0;\n    for\
    \ c in word.chars() {\n        if is_vowel(c) {\n            last_vowel = c as\
    \ u8;\n            last_vowel_index = index;\n        } else {\n            last_consonant\
    \ = c as u8;\n            last_consonant_index = index;\n        }\n        index\
    \ += 1;\n    }\n    if last_vowel_index > last_consonant_index {\n        result.push(last_vowel\
    \ as char);\n    }\n    result", "    let mut closest_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut consonant_found = false;\n    let mut vowel_distance =\
    \ 0;\n    let mut consonant_distance = 0;\n    let mut distance = 0;\n    let\
    \ mut vowel_distance_index = 0;\n    let mut consonant_distance_index = 0;\n \
    \   let mut distance_index = 0;\n    let mut vowel_distance_found = false;\n \
    \   let mut consonant_distance_found = false;\n    let mut distance_found = false;\n\
    \    let mut vowel_distance_index_found = false;\n    let mut consonant_distance_index_found\
    \ = false;\n    let mut distance_index_found = false;\n    let mut vowel_distance_index_found_first\
    \ = false;\n    let mut consonant_distance_index_found_first = false;\n    let\
    \ mut distance_index_found_first = false;\n    let mut vowel_distance_index_found_second\
    \ = false;\n    let mut consonant_distance_index_found_second = false;\n    let\
    \ mut distance_index_found_second = false;\n    let mut vowel_distance_index_found_third\
    \ = false;\n    let mut consonant_distance_index_found_third = false;\n    let\
    \ mut distance_index_found_third = false;\n    let mut vowel_distance_index_found_fourth\
    \ = false;\n    let mut consonant_distance_index_found_fourth = false;\n    let\
    \ mut distance_index_found_fourth = false;\n    let mut vowel_distance_index_found_fifth\
    \ = false;\n    let mut consonant_distance_index_found_fifth = false;\n    let\
    \ mut distance_index_found_fifth = false;\n    let mut vowel_distance_index_found_sixth\
    \ = false;\n    let mut consonant_distance", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut prev_is_consonant = false;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n    \
    \        if prev_is_consonant {\n                if i < closest_distance {\n \
    \                   closest_distance = i;\n                    closest_vowel =\
    \ c.to_string();\n                }\n            }\n            prev_is_consonant\
    \ = false;\n        } else {\n            prev_is_consonant = true;\n        }\n\
    \    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if i < closest_vowel_index {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = c.to_string();\n            }\n      \
    \  }\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    for (index, letter) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&letter) {\n            last_vowel_index = index;\n\
    \        } else {\n            last_consonant_index = index;\n        }\n    \
    \    if last_vowel_index > last_consonant_index {\n            result = word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n        }\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    let mut last_consonant\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if i - last_consonant\
    \ < closest_distance {\n                closest_distance = i - last_consonant;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ {\n            last_consonant = i;\n        }\n    }\n    closest_vowel", " \
    \   let mut vowel_pos = 0;\n    let mut vowel_dist = word.len();\n    let mut\
    \ prev_consonant = false;\n    for (i, c) in word.chars().enumerate() {\n    \
    \    if is_vowel(c) {\n            if prev_consonant && i < vowel_dist {\n   \
    \             vowel_pos = i;\n                vowel_dist = i;\n            }\n\
    \            prev_consonant = false;\n        } else {\n            prev_consonant\
    \ = true;\n        }\n    }\n    if vowel_dist == word.len() {\n        return\
    \ String::new();\n    }\n    word.chars().nth(vowel_pos).unwrap().to_string()",
  "    let mut result = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in word.chars() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = c.to_string();\n        } else {\n            last_consonant\
    \ = c.to_string();\n        }\n        if last_vowel != \"\" && last_consonant\
    \ != \"\" {\n            result = last_vowel.clone();\n            break;\n  \
    \      }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ last_consonant = false;\n    let mut last_vowel = false;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut index = 0;\n    for\
    \ c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if last_consonant {\n                if result.is_empty()\
    \ {\n                    result.push(c);\n                    last_vowel_index\
    \ = index;\n                } else {\n                    if index - last_consonant_index\
    \ < last_vowel_index - last_consonant_index {\n                        result.clear();\n\
    \                        result.push(c);\n                        last_vowel_index\
    \ = index;\n                    }\n                }\n            }\n        \
    \    last_vowel = true;\n        } else {\n            if last_vowel {\n     \
    \           last_consonant_index = index;\n            }\n            last_consonant\
    \ = true;\n        }\n        index += 1;\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant_index < closest_vowel_distance {\n    \
    \            closest_vowel = c.to_string();\n                closest_vowel_distance\
    \ = i - last_consonant_index;\n            }\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_char = String::new();\n    let mut last_last_char = String::new();\n\
    \    let mut last_last_last_char = String::new();\n    let mut last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_char = String::new();\n\
    \    let mut last_last_last_last_last_last_char = String::new();\n    let mut\
    \ last_last_last_last_last_last_last_char = String::new();\n    let mut last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::new();\n    let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_char\
    \ = String::", "    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant = word.len();\n    let mut first_vowel\
    \ = word.len();\n    let mut vowels = String::from(\"aeiou\");\n    let mut consonants\
    \ = String::from(\"bcdfghjklmnpqrstvwxyz\");\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i < first_vowel {\n     \
    \           first_vowel = i;\n            }\n            if i - last_consonant\
    \ < closest_distance {\n                closest_distance = i - last_consonant;\n\
    \                closest_vowel = c.to_string();\n            }\n        } else\
    \ if consonants.contains(c) {\n            last_consonant = i;\n        }\n  \
    \  }\n    if closest_distance == word.len() || closest_distance == first_vowel\
    \ {\n        String::new()\n    } else {\n        closest_vowel\n    }", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance = 0;\n\
    \    let mut last_consonant_index = 0;\n    let mut vowel_found = false;\n   \
    \ for (index, character) in word.chars().enumerate() {\n        if vowels.contains(&character)\
    \ {\n            if vowel_found {\n                if index - last_consonant_index\
    \ < closest_vowel_distance {\n                    closest_vowel_distance = index\
    \ - last_consonant_index;\n                    closest_vowel_index = index;\n\
    \                }\n            } else {\n                vowel_found = true;\n\
    \                closest_vowel_distance = index - last_consonant_index;\n    \
    \            closest_vowel_index = index;\n            }\n        } else {\n \
    \           last_consonant_index = index;\n        }\n    }\n    if vowel_found\
    \ {\n        closest_vowel.push(word.chars().nth(closest_vowel_index).unwrap());\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut i = 0;\n    for c in\
    \ word.chars() {\n        if is_vowel(c) {\n            last_vowel = i;\n    \
    \        last_vowel_index = i;\n        } else {\n            last_consonant =\
    \ i;\n            last_consonant_index = i;\n        }\n        i += 1;\n    }\n\
    \    if last_vowel_index > last_consonant_index {\n        for c in word.chars()\
    \ {\n            if is_vowel(c) {\n                result.push(c);\n         \
    \   }\n        }\n    }\n    result", "    let mut result = String::new();\n \
    \   let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_char = String::new();\n    let mut last_char_is_vowel = false;\n\
    \    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty = false;\n  \
    \  let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation = false;\n\
    \    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit_or_letter\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit_or_letter_or_symbol\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit_or_letter_or_symbol_or_whitespace\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit_or_letter_or_symbol_or_whitespace_or_control\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_punctuation_or_space_or_digit_or_letter_or_symbol_or_whitespace_or_control_or_formfeed\
    \ = false;\n    let", "    let mut result = String::new();\n    let mut last_consonant\
    \ = 0;\n    let mut last_vowel = 0;\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut index = 0;\n    for c in word.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {\n       \
    \         if last_consonant_index != 0 {\n                    if last_vowel_index\
    \ == 0 {\n                        last_vowel_index = index;\n                \
    \        last_vowel = index - last_consonant_index;\n                    } else\
    \ {\n                        if index - last_consonant_index < last_vowel {\n\
    \                            last_vowel_index = index;\n                     \
    \       last_vowel = index - last_consonant_index;\n                        }\n\
    \                    }\n                }\n            }\n            _ => {\n\
    \                if last_vowel_index != 0 {\n                    if last_consonant_index\
    \ == 0 {\n                        last_consonant_index = index;\n            \
    \            last_consonant = index - last_vowel_index;\n                    }\
    \ else {\n                        if index - last_vowel_index < last_consonant\
    \ {\n                            last_consonant_index = index;\n             \
    \               last_consonant = index - last_vowel_index;\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        index += 1;\n    }\n    if last_vowel_index != 0 {\n        result =\
    \ word[last_vowel_index..last_vowel_index + 1].to_string();\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    let mut last_char = ' ';\n    let mut is_last_char_vowel\
    \ = false;\n    let mut is_last_char_consonant = false;\n    let mut is_last_char_vowel_found\
    \ = false;\n    let mut is_last_char_consonant_found = false;\n    let mut is_last_char_consonant_found_first\
    \ = false;\n    let mut is_last_char_consonant_found_second = false;\n    let\
    \ mut is_last_char_vowel_found_first = false;\n    let mut is_last_char_vowel_found_second\
    \ = false;\n    let mut is_last_char_vowel_found_third = false;\n    let mut is_last_char_vowel_found_fourth\
    \ = false;\n    let mut is_last_char_vowel_found_fifth = false;\n    let mut is_last_char_vowel_found_sixth\
    \ = false;\n    let mut is_last_char_vowel_found_seventh = false;\n    let mut\
    \ is_last_char_vowel_found_eighth = false;\n    let mut is_last_char_vowel_found_ninth\
    \ = false;\n    let mut is_last_char_vowel_found_tenth = false;\n    let mut is_last_char_vowel_found_eleventh\
    \ = false;\n    let mut is_last_char_vowel_found_twelfth = false;\n    let mut\
    \ is_last_char_vowel_found_thirteenth = false;\n    let mut is_last_char_vowel_found_fourteenth\
    \ = false;\n    let mut is_last_char_vowel_found_fifteenth = false;\n    let mut\
    \ is_last_char_vowel_", "    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    let mut is_consonant = false;\n    let mut is_vowel =\
    \ false;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    while index >=\
    \ 0 {\n        if vowels.contains(&word.chars().nth(index).unwrap()) {\n     \
    \       if is_consonant {\n                result.push(word.chars().nth(index).unwrap());\n\
    \                break;\n            }\n            is_vowel = true;\n       \
    \ } else {\n            if is_vowel {\n                is_consonant = true;\n\
    \            }\n        }\n        index -= 1;\n    }\n    result", "    let vowels\
    \ = \"aeiou\";\n    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            let mut distance = word.len() - i;\n            if i > 0 {\n\
    \                distance -= 1;\n            }\n            if distance < closest_distance\
    \ {\n                closest_distance = distance;\n                closest_vowel\
    \ = c.to_string();\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let mut result = String::new();\n    let mut last_vowel = String::new();\n \
    \   let mut last_consonant = String::new();\n    let mut found = false;\n    for\
    \ c in word.chars() {\n        if is_vowel(c) {\n            last_vowel = c.to_string();\n\
    \        } else {\n            last_consonant = c.to_string();\n            if\
    \ !last_vowel.is_empty() {\n                found = true;\n                break;\n\
    \            }\n        }\n    }\n    if found {\n        result = last_vowel;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_char\
    \ = String::new();\n    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut\
    \ last_char_is_vowel_or_consonant_or_empty = false;\n    let mut last_char_is_consonant_or_empty\
    \ = false;\n    let mut last_char_is_vowel_or_empty = false;\n    let mut last_char_is_empty\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start = false;\n\
    \    let mut last_char_is_consonant_or_empty_or_start = false;\n    let mut last_char_is_vowel_or_empty_or_start\
    \ = false;\n    let mut last_char_is_empty_or_start = false;\n    let mut last_char_is_start\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start_or_end\
    \ = false;\n    let mut last_char_is_consonant_or_empty_or_start_or_end = false;\n\
    \    let mut last_char_is_vowel_or_empty_or_start_or_end = false;\n    let mut\
    \ last_char_is_empty_or_start_or_end = false;\n    let mut last_char_is_start_or_end\
    \ = false;\n    let mut last_char_is_end = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start_or_end_or_end\
    \ = false;\n    let mut last_char_is_consonant_or_empty_or_start_or_end_or_end\
    \ = false;\n    let mut", "    let mut result = String::new();\n    let mut last_vowel\
    \ = 0;\n    let mut last_consonant = 0;\n    let mut last_char = ' ';\n    for\
    \ c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            last_vowel = last_consonant;\n        } else {\n\
    \            last_consonant += 1;\n        }\n        if last_consonant > last_vowel\
    \ && last_char != ' ' {\n            result = c.to_string();\n        }\n    \
    \    last_char = c;\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate().rev() {\n        if\
    \ vowels.contains(&c) {\n            if closest_index - i > 1 {\n            \
    \    closest_index = i;\n                closest_vowel = c.to_string();\n    \
    \        }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            if prev_char != ' ' && !is_vowel(prev_char)\
    \ {\n                result = prev_vowel.to_string();\n                break;\n\
    \            }\n            prev_vowel = c;\n        }\n        prev_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_char = '\
    \ ';\n    let mut last_consonant_char = ' ';\n    let mut is_vowel = false;\n\
    \    let mut is_consonant = false;\n    let mut is_first_vowel = false;\n    let\
    \ mut is_first_consonant = false;\n    let mut is_last_vowel = false;\n    let\
    \ mut is_last_consonant = false;\n    let mut is_first_char = true;\n    let mut\
    \ is_last_char = false;\n    let mut is_first_vowel_found = false;\n    let mut\
    \ is_first_consonant_found = false;\n    let mut is_last_vowel_found = false;\n\
    \    let mut is_last_consonant_found = false;\n    let mut is_first_vowel_consonant_found\
    \ = false;\n    let mut is_last_vowel_consonant_found = false;\n    let mut is_first_consonant_vowel_found\
    \ = false;\n    let mut is_last_consonant_vowel_found = false;\n    let mut is_first_vowel_consonant_vowel_found\
    \ = false;\n    let mut is_last_vowel_consonant_vowel_found = false;\n    let\
    \ mut is_first_consonant_vowel_consonant_found = false;\n    let mut is_last_consonant_vowel_consonant_found\
    \ = false;\n    let mut is_first_vowel_consonant_vowel_consonant_found = false;\n\
    \    let mut is_last_vowel_consonant_vowel_consonant_found = false;\n    let mut\
    \ is_first_consonant_vowel_consonant_vowel_found = false;\n    let mut is_last_consonant_vowel_",
  "    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_found = false;\n    let\
    \ mut last_consonant_found = false;\n    let mut last_vowel_char = ' ';\n    let\
    \ mut last_consonant_char = ' ';\n    let mut last_char = ' ';\n    let mut last_char_is_vowel\
    \ = false;\n    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space = false;\n  \
    \  let mut last_char_is_space = false;\n    let mut last_char_is_space_or_vowel\
    \ = false;\n    let mut last_char_is_space_or_consonant = false;\n    let mut\
    \ last_char_is_space_or_vowel_or_consonant = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space\
    \ = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space_or_vowel\
    \ = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space_or_consonant\
    \ = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space_or_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space_or_vowel_or_consonant_or_space\
    \ = false;\n    let mut last_char_is_space_or_vowel_or_consonant_or_space_or_vowel_or_consonant_or_space_or_vowel\
    \ = false;\n    let", "    let mut index = word.len();\n    let mut vowel_index\
    \ = 0;\n    let mut vowel_found = false;\n    let mut last_vowel_index = 0;\n\
    \    let mut last_vowel_found = false;\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut last_char = ' ';\n    let mut last_vowel = ' ';\n    for\
    \ (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n   \
    \         last_vowel = c;\n            last_vowel_index = i;\n            last_vowel_found\
    \ = true;\n        } else {\n            if last_vowel_found && !vowel_found {\n\
    \                vowel_index = last_vowel_index;\n                vowel_found\
    \ = true;\n            }\n            last_vowel_found = false;\n        }\n \
    \       if !vowels.contains(&c) && !vowels.contains(&last_char) {\n          \
    \  index = i;\n            break;\n        }\n        last_char = c;\n    }\n\
    \    if vowel_found {\n        return word[vowel_index..index].to_string();\n\
    \    }\n    return \"\".to_string();", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut last_vowel = 0;\n  \
    \  let mut last_consonant = 0;\n    let mut last_char = ' ';\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = i;\n        } else {\n            if last_char != ' ' && vowels.contains(&last_char)\
    \ {\n                last_consonant = i;\n            }\n        }\n        last_char\
    \ = c;\n    }\n    if last_consonant > last_vowel {\n        result = word[last_vowel..last_consonant].to_string();\n\
    \    }\n    result", "    let mut word = word.chars().collect::<Vec<char>>();\n\
    \    word.reverse();\n    let mut result = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut found_vowel = false;\n    for (i, c) in word.iter().enumerate()\
    \ {\n        if vowels.contains(c) {\n            found_vowel = true;\n      \
    \      result.push(*c);\n        } else if found_vowel {\n            break;\n\
    \        }\n    }\n    result.chars().rev().collect::<String>()", "    let mut\
    \ result = String::new();\n    let mut index = word.len() - 1;\n    let mut found_consonant\
    \ = false;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    while index >=\
    \ 0 {\n        if vowels.contains(&word.chars().nth(index).unwrap()) {\n     \
    \       if found_consonant {\n                result.push(word.chars().nth(index).unwrap());\n\
    \                break;\n            }\n        } else {\n            found_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..=last_vowel_index].to_string();\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ vowels = Vec::new();\n    let mut consonants = Vec::new();\n    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut vowel_found = false;\n \
    \   let mut consonant_found = false;\n    let mut vowel_distance = 0;\n    let\
    \ mut consonant_distance = 0;\n    let mut distance = 0;\n    let mut min_distance\
    \ = 0;\n    let mut min_index = 0;\n    let mut min_distance_found = false;\n\
    \    let mut vowel_index_found = false;\n    let mut consonant_index_found = false;\n\
    \    let mut vowel_index_distance = 0;\n    let mut consonant_index_distance =\
    \ 0;\n    let mut vowel_index_min_distance = 0;\n    let mut consonant_index_min_distance\
    \ = 0;\n    let mut vowel_index_min_index = 0;\n    let mut consonant_index_min_index\
    \ = 0;\n    let mut vowel_index_min_distance_found = false;\n    let mut consonant_index_min_distance_found\
    \ = false;\n    let mut vowel_index_distance_found = false;\n    let mut consonant_index_distance_found\
    \ = false;\n    let mut vowel_index_min_distance_found = false;\n    let mut consonant_index_min_distance_found\
    \ = false;\n    let mut vowel_index_min_index_found = false;\n    let mut consonant_index_min_index_found\
    \ = false;\n    let mut vowel_index_min_distance_found = false;\n    let mut consonant_index_min_distance_found\
    \ = false;\n    let mut vowel_index_min_index_found = false;\n    let mut consonant_index_min_index_found\
    \ = false;\n    let mut vowel_index_min_distance_found = false;\n    let mut consonant_index_min_distance_found\
    \ = false;\n    let mut vowel_index_min_index_found = false;\n    let mut consonant_index_min_index_found\
    \ = false;\n    let mut vowel_index_min", "    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_char = ' ';\n\
    \    let mut index = 0;\n    for c in word.chars() {\n        if is_vowel(c) {\n\
    \            last_vowel = c;\n            last_vowel_index = index;\n        }\
    \ else {\n            last_consonant = c;\n            last_consonant_index =\
    \ index;\n        }\n        if last_vowel != 0 && last_consonant != 0 && last_char\
    \ != ' ' {\n            if last_vowel_index > last_consonant_index {\n       \
    \         result.push(last_vowel);\n                break;\n            }\n  \
    \      }\n        last_char = c;\n        index += 1;\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_found = false;\n    let\
    \ mut last_consonant_found = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            last_vowel_index = i;\n           \
    \ last_vowel_found = true;\n        } else {\n            last_consonant_index\
    \ = i;\n            last_consonant_found = true;\n        }\n        if last_vowel_found\
    \ && last_consonant_found {\n            if last_vowel_index > last_consonant_index\
    \ {\n                result = word[last_vowel_index..last_vowel_index + 1].to_string();\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut word_vec:\
    \ Vec<char> = word.chars().collect();\n    let mut vowel_index = 0;\n    let mut\
    \ consonant_index = 0;\n    let mut vowel_count = 0;\n    let mut consonant_count\
    \ = 0;\n    let mut vowel_index_vec = Vec::new();\n    let mut consonant_index_vec\
    \ = Vec::new();\n    for i in (0..word_vec.len()).rev() {\n        for j in 0..vowels.len()\
    \ {\n            if word_vec[i] == vowels[j] {\n                vowel_index =\
    \ i;\n                vowel_count += 1;\n                vowel_index_vec.push(vowel_index);\n\
    \            }\n        }\n        for k in 0..consonants.len() {\n          \
    \  if word_vec[i] == consonants[k] {\n                consonant_index = i;\n \
    \               consonant_count += 1;\n                consonant_index_vec.push(consonant_index);\n\
    \            }\n        }\n    }\n    if vowel_count == 0 || consonant_count ==\
    \ 0 {\n        return result;\n    }\n    let mut vowel_index_vec_len = vowel_index_vec.len();\n\
    \    let mut consonant_index_vec_len = consonant_index_vec.len();\n    for i in\
    \ 0..vowel_index_vec_len {\n        for j in 0..consonant_index_vec_len {\n  \
    \          if vowel_index_vec[i] > consonant_index_vec[j] {\n                result\
    \ = word_vec[vowel_index_vec[i]].to_string();\n                return result;\n\
    \            }", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel_index = i;\n        } else {\n            last_consonant_index\
    \ = i;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result = word[last_vowel_index..].to_string();\n            break;\n\
    \        }\n    }\n    result", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_distance = word.len();\n    let mut last_consonant_index\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if i - last_consonant_index\
    \ < closest_vowel_distance {\n                closest_vowel = c.to_string();\n\
    \                closest_vowel_distance = i - last_consonant_index;\n        \
    \    }\n        } else {\n            last_consonant_index = i;\n        }\n \
    \   }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = 0;\n\
    \    let mut last_vowel = 0;\n    let mut last_char = ' ';\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' {\n            if last_char != ' ' && last_char != 'a' &&\
    \ last_char != 'e' && last_char != 'i' && last_char != 'o' && last_char != 'u'\
    \ {\n                let distance = i - last_consonant;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n            last_vowel = i;\n        } else {\n            if last_char\
    \ != ' ' && last_char != 'a' && last_char != 'e' && last_char != 'i' && last_char\
    \ != 'o' && last_char != 'u' {\n                last_consonant = i;\n        \
    \    }\n        }\n        last_char = c;\n    }\n    closest_vowel", "    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_vowel_char = ' ';\n    let mut last_consonant_char = ' ';\n  \
    \  let mut last_index = 0;\n    let mut last_char = ' ';\n    let mut index =\
    \ 0;\n    let mut char = ' ';\n    let mut is_vowel = false;\n    let mut is_consonant\
    \ = false;\n    let mut is_first_char = true;\n    let mut is_first_vowel = true;\n\
    \    let mut is_first_consonant = true;\n    let mut is_last_char = false;\n \
    \   let mut is_last_vowel = false;\n    let mut is_last_consonant = false;\n \
    \   let mut is_last_vowel_found = false;\n    let mut is_last_consonant_found\
    \ = false;\n    let mut is_last_char_found = false;\n    let mut is_last_vowel_before_consonant\
    \ = false;\n    let mut is_last_consonant_before_vowel = false;\n    let mut is_last_char_before_vowel\
    \ = false;\n    let mut is_last_char_before_consonant = false;\n    let mut is_last_char_before_vowel_found\
    \ = false;\n    let mut is_last_char_before_consonant_found = false;\n    let\
    \ mut is_last_vowel_before_consonant_found = false;\n    let mut is_last_consonant_before_vowel_found\
    \ = false;\n    let mut is_last_vowel_before_consonant_found_first = false;\n\
    \    let mut is_last_consonant_before_vowel_found_first = false;\n    let mut\
    \ is_last_char_before_vowel_found_first = false;\n", "    let mut closest_vowel\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_char = String::new();\n    let mut closest_distance\
    \ = 0;\n    let mut current_distance = 0;\n    let mut is_vowel = false;\n   \
    \ let mut is_consonant = false;\n    let mut is_first_char = true;\n    let mut\
    \ is_last_char = false;\n    let mut is_first_vowel = true;\n    let mut is_first_consonant\
    \ = true;\n    let mut is_first_distance = true;\n    let mut is_closest_vowel\
    \ = false;\n    let mut is_last_vowel = false;\n    let mut is_last_consonant\
    \ = false;\n    let mut is_last_distance = false;\n    let mut is_current_distance\
    \ = false;\n    let mut is_closest_distance = false;\n    let mut is_first_char_vowel\
    \ = false;\n    let mut is_first_char_consonant = false;\n    let mut is_last_char_vowel\
    \ = false;\n    let mut is_last_char_consonant = false;\n    let mut is_last_char_consonant_vowel\
    \ = false;\n    let mut is_last_char_vowel_consonant = false;\n    let mut is_last_char_consonant_consonant\
    \ = false;\n    let mut is_last_char_vowel_vowel = false;\n    let mut is_last_char_consonant_vowel_consonant\
    \ = false;\n    let mut is_last_char_vowel_consonant_vowel = false;\n    let mut\
    \ is_last_char_consonant_vowel_vowel = false;\n    let mut is_last_char_vowel_vowel_consonant\
    \ = false;\n    let mut is_last_char_consonant_consonant_vowel = false;\n    let\
    \ mut", "    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant = word.len();\n    let mut last_vowel\
    \ = word.len();\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c)\
    \ {\n            last_vowel = i;\n            if last_consonant < i {\n      \
    \          let distance = i - last_consonant;\n                if distance < closest_distance\
    \ {\n                    closest_distance = distance;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n        } else {\n     \
    \       last_consonant = i;\n        }\n    }\n    if last_vowel < last_consonant\
    \ {\n        closest_vowel\n    } else {\n        String::new()\n    }", "   \
    \ let vowels = \"aeiou\";\n    let mut result = String::new();\n    let mut last_consonant\
    \ = 0;\n    let mut last_vowel = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            last_vowel = i;\n        } else\
    \ {\n            last_consonant = i;\n        }\n        if last_consonant > last_vowel\
    \ {\n            result = word[last_vowel..last_consonant].to_string();\n    \
    \    }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_char = '\
    \ ';\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n\
    \            last_vowel = i;\n        } else {\n            last_consonant = i;\n\
    \        }\n        if last_vowel > last_consonant && last_consonant != 0 {\n\
    \            result = word[last_vowel..=last_vowel].to_string();\n        }\n\
    \        last_char = c;\n    }\n    result", "    let vowels = \"aeiou\";\n  \
    \  let mut result = String::new();\n    let mut last_consonant = 0;\n    let mut\
    \ last_vowel = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_consonant > last_vowel {\n            result\
    \ = word[last_vowel..last_consonant].to_string();\n        }\n    }\n    result",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index = 0;\n\
    \    let mut index = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut found_vowel = false;\n    let mut found_consonant = false;\n\
    \    let mut found_vowel_after_consonant = false;\n    let mut found_consonant_after_vowel\
    \ = false;\n    let mut found_vowel_before_consonant = false;\n    let mut found_consonant_before_vowel\
    \ = false;\n    let mut found_vowel_after_consonant_before_consonant = false;\n\
    \    let mut found_consonant_after_vowel_before_vowel = false;\n    let mut found_vowel_after_consonant_before_vowel\
    \ = false;\n    let mut found_consonant_after_vowel_before_consonant = false;\n\
    \    let mut found_vowel_after_consonant_before_consonant_before_vowel = false;\n\
    \    let mut found_consonant_after_vowel_before_consonant_before_consonant = false;\n\
    \    let mut found_vowel_after_consonant_before_consonant_before_consonant = false;\n\
    \    let mut found_consonant_after_vowel_before_consonant_before_vowel = false;\n\
    \    let mut found_vowel_after_consonant_before_vowel_before_consonant = false;\n\
    \    let mut found_consonant_after_vowel_before_vowel_before_vowel = false;\n\
    \    let mut found_vowel_after_consonant_before_vowel_before_vowel = false;\n\
    \    let mut found_consonant_after_vowel_before_vowel_before_consonant = false;\n\
    \    let mut found_vowel_after_consonant_", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i > last_consonant_index\
    \ && i - last_consonant_index < closest_vowel_index {\n                closest_vowel_index\
    \ = i - last_consonant_index;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            last_consonant_index = i;\n    \
    \    }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = word.len();\n\
    \    let mut first_vowel = word.len();\n    let mut i = word.len() - 1;\n    while\
    \ i >= 0 {\n        if word.chars().nth(i).unwrap().is_vowel() {\n           \
    \ first_vowel = i;\n            if last_consonant - first_vowel < closest_distance\
    \ {\n                closest_distance = last_consonant - first_vowel;\n      \
    \          closest_vowel = word.chars().nth(i).unwrap().to_string();\n       \
    \     }\n        } else {\n            last_consonant = i;\n        }\n      \
    \  i -= 1;\n    }\n    closest_vowel", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut last_vowel = 0;\n  \
    \  let mut last_consonant = 0;\n    let mut last_char = ' ';\n    for (i, c) in\
    \ word.chars().enumerate() {\n        if vowels.contains(&c) {\n            last_vowel\
    \ = i;\n        } else {\n            if last_vowel != 0 && last_consonant !=\
    \ 0 {\n                if last_vowel > last_consonant {\n                    result.push(last_char);\n\
    \                    break;\n                }\n            }\n            last_consonant\
    \ = i;\n            last_char = c;\n        }\n    }\n    result", "    let mut\
    \ closest_vowel = String::new();\n    let mut closest_vowel_index = 0;\n    let\
    \ mut closest_consonant_index = 0;\n    let mut vowel_found = false;\n    let\
    \ mut consonant_found = false;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let word_chars: Vec<char>\
    \ = word.chars().collect();\n    for (i, c) in word_chars.iter().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            vowel_found = true;\n      \
    \      closest_vowel_index = i;\n        }\n        if consonants.contains(c)\
    \ && vowel_found {\n            consonant_found = true;\n            closest_consonant_index\
    \ = i;\n            break;\n        }\n    }\n    if vowel_found && consonant_found\
    \ {\n        for i in closest_consonant_index..closest_vowel_index + 1 {\n   \
    \         closest_vowel.push(word_chars[i]);\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_index = 0;\n    let mut is_vowel = false;\n    let mut\
    \ is_consonant = false;\n    let mut is_first = true;\n    let mut is_last = false;\n\
    \    let mut is_found = false;\n    let mut is_last_vowel = false;\n    let mut\
    \ is_last_consonant = false;\n    let mut is_last_found = false;\n    let mut\
    \ is_first_vowel = false;\n    let mut is_first_consonant = false;\n    let mut\
    \ is_first_found = false;\n    let mut is_first_last = false;\n    let mut is_last_first\
    \ = false;\n    let mut is_first_last_found = false;\n    let mut is_last_first_found\
    \ = false;\n    let mut is_first_last_vowel = false;\n    let mut is_last_first_vowel\
    \ = false;\n    let mut is_first_last_consonant = false;\n    let mut is_last_first_consonant\
    \ = false;\n    let mut is_first_last_consonant_found = false;\n    let mut is_last_first_consonant_found\
    \ = false;\n    let mut is_first_last_vowel_found = false;\n    let mut is_last_first_vowel_found\
    \ = false;\n    let mut is_first_last_consonant_vowel = false;\n    let mut is_last_first_consonant_vowel\
    \ = false;\n    let mut is_first_last_consonant_vowel_found = false;\n    let\
    \ mut is_last_first_consonant_vowel_found = false;\n    let mut is_first_last_consonant_vowel_consonant\
    \ = false;\n    let mut is_last_first_consonant_vowel_consonant = false;\n   \
    \ let mut is_first_last_consonant_", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index = word.len();\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    for (i, c) in word.chars().enumerate().rev() {\n        if !vowels.contains(&c)\
    \ && last_vowel_index < i {\n            result.push(word.chars().nth(i - 1).unwrap());\n\
    \            break;\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_char = '\
    \ ';\n    let mut last_consonant_char = ' ';\n    let mut last_char = ' ';\n \
    \   for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = i;\n            last_vowel_char = c;\n       \
    \ } else {\n            last_consonant_index = i;\n            last_consonant_char\
    \ = c;\n        }\n        if last_vowel_index > last_consonant_index {\n    \
    \        result.push(last_vowel_char);\n            break;\n        }\n      \
    \  last_char = c;\n    }\n    if last_vowel_index == 0 && last_consonant_index\
    \ == 0 {\n        result.push(last_char);\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let\
    \ mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let mut vowel_distance\
    \ = 0;\n    let mut consonant_distance = 0;\n    let mut vowel_distance_index\
    \ = 0;\n    let mut consonant_distance_index = 0;\n    let mut vowel_distance_count\
    \ = 0;\n    let mut consonant_distance_count = 0;\n    let mut vowel_distance_index_count\
    \ = 0;\n    let mut consonant_distance_index_count = 0;\n    let mut vowel_distance_index_count_index\
    \ = 0;\n    let mut consonant_distance_index_count_index = 0;\n    let mut vowel_distance_index_count_index_index\
    \ = 0;\n    let mut consonant_distance_index_count_index_index = 0;\n    let mut\
    \ vowel_distance_index_count_index_index_index = 0;\n    let mut consonant_distance_index_count_index_index_index\
    \ = 0;\n    let mut vowel_distance_index_count_index_index_index_index = 0;\n\
    \    let mut consonant_distance_index_count_index_index_index_index = 0;\n   \
    \ let mut vowel_distance_index_count_index_index_index_index_index = 0;\n    let\
    \ mut consonant_distance_index_count_index_index_index_index_index = 0;\n    let\
    \ mut vowel_distance_index_count_index_index_index_index_index_index = 0;\n  \
    \  let mut consonant_distance_index_count_index_index_index_index_index_index\
    \ = 0;\n    let mut vowel_distance_index_count_index_index_index_index_index_index_index\
    \ = 0;\n    let mut consonant_distance_index_count_index", "    let mut closest_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut index = 0;\n    for c in word.chars() {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            last_vowel =\
    \ c.to_string();\n            last_vowel_index = index;\n        } else {\n  \
    \          last_consonant = c.to_string();\n            last_consonant_index =\
    \ index;\n        }\n        index += 1;\n    }\n    if last_vowel_index > last_consonant_index\
    \ {\n        closest_vowel = last_vowel;\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = 0;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let mut closest_vowel = String::new();\n    let\
    \ mut closest_distance = word.len();\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut last_vowel_index = None;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = Some(i);\n\
    \        } else if let Some(last_vowel_index) = last_vowel_index {\n         \
    \   if i - last_vowel_index < closest_distance {\n                closest_distance\
    \ = i - last_vowel_index;\n                closest_vowel = word[last_vowel_index..i].to_string();\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut found_vowel = false;\n    let mut\
    \ found_consonant = false;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    while index >= 0 {\n\
    \        if vowels.contains(&word.chars().nth(index).unwrap()) {\n           \
    \ last_vowel_index = index;\n            found_vowel = true;\n        }\n    \
    \    if consonants.contains(&word.chars().nth(index).unwrap()) {\n           \
    \ last_consonant_index = index;\n            found_consonant = true;\n       \
    \ }\n        if found_vowel && found_consonant {\n            if last_vowel_index\
    \ > last_consonant_index {\n                result.push(word.chars().nth(last_vowel_index).unwrap());\n\
    \            }\n            break;\n        }\n        index -= 1;\n    }\n  \
    \  result", "    let mut last_vowel = None;\n    let mut last_consonant = None;\n\
    \    let mut last_vowel_index = None;\n    let mut last_consonant_index = None;\n\
    \    let mut result = String::new();\n    let mut index = 0;\n    for c in word.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           last_vowel = Some(c);\n            last_vowel_index = Some(index);\n\
    \        } else {\n            last_consonant = Some(c);\n            last_consonant_index\
    \ = Some(index);\n        }\n        index += 1;\n    }\n    if last_vowel.is_some()\
    \ && last_consonant.is_some() {\n        if last_vowel_index.unwrap() > last_consonant_index.unwrap()\
    \ {\n            result.push(last_vowel.unwrap());\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_char = ' ';\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           last_vowel = i;\n        } else {\n            last_consonant = i;\n\
    \        }\n        if last_vowel > last_consonant && last_char != c {\n     \
    \       result = word[last_vowel..].to_string();\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut index = word.len();\n    let mut vowel_index\
    \ = 0;\n    let mut vowel_found = false;\n    let mut vowel_count = 0;\n    let\
    \ mut last_vowel_index = 0;\n    let mut last_vowel_count = 0;\n    let mut last_vowel_found\
    \ = false;\n    let mut last_vowel = String::new();\n    let mut vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    let mut consonant = String::new();\n\
    \    let mut last_consonant_index = 0;\n    let mut last_consonant_count = 0;\n\
    \    let mut last_consonant_found = false;\n    let mut consonant_index = 0;\n\
    \    let mut consonant_count = 0;\n    let mut consonant_found = false;\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let mut word_chars: Vec<char> = word.chars().collect();\n\
    \    for i in (0..word.len()).rev() {\n        if vowels.contains(&word_chars[i])\
    \ {\n            vowel_count += 1;\n            vowel_index = i;\n           \
    \ vowel_found = true;\n            vowel = word_chars[i].to_string();\n      \
    \  }\n        if consonants.contains(&word_chars[i]) {\n            consonant_count\
    \ += 1;\n            consonant_index = i;\n            consonant_found = true;\n\
    \            consonant = word_chars[i].to_string();\n        }\n        if vowel_found\
    \ && consonant_found {\n            if last_vowel_count == 0 {\n             \
    \   last_vowel_count = vowel_count;\n                last_vowel_index =", "  \
    \  let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if is_vowel(c) {\n            if i >\
    \ last_consonant_index {\n                if i - last_consonant_index < closest_vowel_distance\
    \ {\n                    closest_vowel = c.to_string();\n                    closest_vowel_distance\
    \ = i - last_consonant_index;\n                }\n            }\n        } else\
    \ {\n            last_consonant_index = i;\n        }\n    }\n    closest_vowel",
  "    let mut result = String::new();\n    let mut index = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_vowel = 0;\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut found_vowel = false;\n    let mut\
    \ found_consonant = false;\n    let mut found_vowel_after_consonant = false;\n\
    \    let mut found_consonant_after_vowel = false;\n    let mut found_consonant_before_vowel\
    \ = false;\n    let mut found_vowel_before_consonant = false;\n    let mut found_vowel_after_consonant_index\
    \ = 0;\n    let mut found_consonant_after_vowel_index = 0;\n    let mut found_consonant_before_vowel_index\
    \ = 0;\n    let mut found_vowel_before_consonant_index = 0;\n    let mut found_vowel_before_consonant_after_vowel\
    \ = false;\n    let mut found_vowel_before_consonant_after_vowel_index = 0;\n\
    \    let mut found_consonant_after_vowel_before_consonant = false;\n    let mut\
    \ found_consonant_after_vowel_before_consonant_index = 0;\n    let mut found_vowel_before_consonant_after_vowel_before_consonant\
    \ = false;\n    let mut found_vowel_before_consonant_after_vowel_before_consonant_index\
    \ = 0;\n    let mut found_vowel_before_consonant_after_vowel_before_consonant_after_vowel\
    \ = false;\n    let mut found_vowel_before_consonant_after_vowel_before_consonant_after_vowel_index\
    \ = 0;\n    let mut found_consonant_after_vowel_before_consonant_after_vowel =\
    \ false;", "    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_vowel_found =\
    \ false;\n    let mut last_consonant_found = false;\n    let mut last_vowel_char\
    \ = ' ';\n    let mut last_consonant_char = ' ';\n    let mut last_char = ' ';\n\
    \    let mut last_char_is_vowel = false;\n    let mut last_char_is_consonant =\
    \ false;\n    let mut last_char_is_vowel_or_consonant = false;\n    let mut last_char_is_vowel_or_consonant_or_space\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit_or_symbol\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit_or_symbol_or_control\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit_or_symbol_or_control_or_whitespace\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit_or_symbol_or_control_or_whitespace_or_newline\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_space_or_punctuation_or_digit_or_symbol_or_control_or_whitespace_or_newline_or_tab\
    \ = false;\n    let mut", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if is_vowel(c) {\n            if !is_vowel(prev_char) {\n       \
    \         result = c.to_string();\n                break;\n            }\n   \
    \         prev_vowel = c;\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_distance\
    \ = word.len();\n    let mut last_consonant_index = 0;\n    let mut last_consonant_found\
    \ = false;\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c)\
    \ {\n            if last_consonant_found {\n                let distance = i -\
    \ last_consonant_index;\n                if distance < closest_vowel_distance\
    \ {\n                    closest_vowel_distance = distance;\n                \
    \    closest_vowel = c.to_string();\n                }\n            }\n      \
    \  } else {\n            last_consonant_index = i;\n            last_consonant_found\
    \ = true;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut index = 0;\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut found_vowel = false;\n    let mut found_consonant = false;\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars();\n\
    \    while let Some(c) = word_chars.next() {\n        if vowels.contains(&c) {\n\
    \            last_vowel_index = index;\n            found_vowel = true;\n    \
    \    } else {\n            if found_vowel {\n                last_consonant_index\
    \ = index;\n                found_consonant = true;\n            }\n        }\n\
    \        index += 1;\n    }\n    if found_vowel && found_consonant {\n       \
    \ result.push(word.chars().nth(last_vowel_index).unwrap());\n    }\n    result",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut is_consonant = false;\n    while\
    \ index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n        if\
    \ vowels.contains(&c) {\n            if is_consonant {\n                result.push(c);\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        index -= 1;\n    }\n    result", "    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut next_char = ' ';\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            if i == 0 {\n             \
    \   continue;\n            }\n            if i == word.len() - 1 {\n         \
    \       continue;\n            }\n            prev_char = word.chars().nth(i -\
    \ 1).unwrap();\n            next_char = word.chars().nth(i + 1).unwrap();\n  \
    \          if !vowels.contains(&prev_char) && !vowels.contains(&next_char) {\n\
    \                result = c.to_string();\n                break;\n           \
    \ }\n        }\n    }\n    result", "    let mut result = String::new();\n   \
    \ let mut found_consonant = false;\n    let mut found_vowel = false;\n    let\
    \ mut found_consonant_again = false;\n    let mut found_vowel_again = false;\n\
    \    let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let mut consonant_index_again\
    \ = 0;\n    let mut vowel_index_again = 0;\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut\
    \ n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let\
    \ mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n   \
    \ let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n\
    \    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n\
    \    let mut h = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk\
    \ = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let\
    \ mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n\
    \    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv\
    \ = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let\
    \ mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n\
    \    let mut dd = 0;\n    let mut ee", "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate().rev() {\n        if vowels.contains(&c) {\n    \
    \        if i < last_consonant_index && last_consonant_index - i < closest_vowel_index\
    \ {\n                closest_vowel_index = last_consonant_index - i;\n       \
    \         closest_vowel = c.to_string();\n            }\n        } else {\n  \
    \          last_consonant_index = i;\n        }\n    }\n    closest_vowel", " \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut prev_is_consonant = false;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if prev_is_consonant {\n                if i < closest_distance\
    \ {\n                    closest_distance = i;\n                    closest_vowel\
    \ = c.to_string();\n                }\n            }\n            prev_is_consonant\
    \ = false;\n        } else {\n            prev_is_consonant = true;\n        }\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ last_consonant = false;\n    let mut last_vowel = false;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut index = 0;\n    for\
    \ c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if last_consonant {\n                last_vowel =\
    \ true;\n                last_vowel_index = index;\n            }\n        } else\
    \ {\n            if last_vowel {\n                last_consonant = true;\n   \
    \             last_consonant_index = index;\n            }\n        }\n      \
    \  index += 1;\n    }\n    if last_consonant && last_vowel {\n        result =\
    \ word[last_vowel_index..last_consonant_index].to_string();\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    let mut found_vowel = false;\n    let mut found_consonant\
    \ = false;\n    let mut found_vowel_between_consonants = false;\n    let mut found_consonant_between_vowels\
    \ = false;\n    let mut found_vowel_between_consonants_index = 0;\n    let mut\
    \ found_consonant_between_vowels_index = 0;\n    let mut found_vowel_between_consonants_char\
    \ = ' ';\n    let mut found_consonant_between_vowels_char = ' ';\n    let mut\
    \ found_vowel_between_consonants_distance = 0;\n    let mut found_consonant_between_vowels_distance\
    \ = 0;\n    let mut distance = 0;\n    let mut distance_between_vowels = 0;\n\
    \    let mut distance_between_consonants = 0;\n    let mut distance_between_vowels_and_consonants\
    \ = 0;\n    let mut distance_between_consonants_and_vowels = 0;\n    let mut distance_between_vowels_and_consonants_index\
    \ = 0;\n    let mut distance_between_consonants_and_vowels_index = 0;\n    let\
    \ mut distance_between_vowels_and_consonants_char = ' ';\n    let mut distance_between_consonants_and_vowels_char\
    \ = ' ';\n    let mut distance_between_vowels_and_consonants_distance = 0;\n \
    \   let mut distance_between_consonants_and_vowels_distance = 0;\n    let mut\
    \ distance_between_vowels_and_consonants_distance_index = 0;\n    let mut distance_between_consonants_and_vowels_distance_index\
    \ = 0;\n    let mut", "    let vowels = \"aeiou\";\n    let mut result = String::new();\n\
    \    let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n  \
    \  let mut last_consonant_found = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(c) {\n            last_vowel_index = i;\n    \
    \    } else {\n            if last_consonant_found {\n                if last_vowel_index\
    \ > last_consonant_index {\n                    result = word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n                    break;\n                }\n         \
    \   }\n            last_consonant_index = i;\n            last_consonant_found\
    \ = true;\n        }\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = word[last_vowel_index..last_vowel_index\
    \ + 1].to_string();\n        }\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n    let mut\
    \ closest_vowel_index = word.len();\n    let mut last_consonant_index = 0;\n \
    \   for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n\
    \            if i - last_consonant_index > 1 && i - last_consonant_index < closest_vowel_index\
    \ {\n                closest_vowel = c.to_string();\n                closest_vowel_index\
    \ = i;\n            }\n        } else {\n            last_consonant_index = i;\n\
    \        }\n    }\n    closest_vowel", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if \"aeiou\".contains(c)\
    \ {\n            if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_char_is_vowel\
    \ = false;\n    let mut last_char_is_consonant = false;\n    let mut last_char_index\
    \ = 0;\n    let mut last_char = ' ';\n    let mut i = 0;\n    for c in word.chars()\
    \ {\n        if is_vowel(c) {\n            last_vowel_index = i;\n           \
    \ last_char_is_vowel = true;\n            last_char_is_consonant = false;\n  \
    \      } else {\n            last_consonant_index = i;\n            last_char_is_vowel\
    \ = false;\n            last_char_is_consonant = true;\n        }\n        if\
    \ last_char_is_vowel && last_char_is_consonant {\n            result = word[last_vowel_index..=last_vowel_index].to_string();\n\
    \            break;\n        }\n        last_char = c;\n        last_char_index\
    \ = i;\n        i += 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_is_consonant = false;\n    let mut next_is_consonant = false;\n\
    \    let mut vowel_index = 0;\n    let mut vowel_index_found = false;\n    let\
    \ mut vowel_index_found_prev = false;\n    let mut vowel_index_found_next = false;\n\
    \    let mut vowel_index_found_prev_index = 0;\n    let mut vowel_index_found_next_index\
    \ = 0;\n    let mut vowel_index_found_prev_index_found = false;\n    let mut vowel_index_found_next_index_found\
    \ = false;\n    let mut vowel_index_found_prev_index_found_prev = false;\n   \
    \ let mut vowel_index_found_next_index_found_next = false;\n    let mut vowel_index_found_prev_index_found_prev_index\
    \ = 0;\n    let mut vowel_index_found_next_index_found_next_index = 0;\n    let\
    \ mut vowel_index_found_prev_index_found_prev_index_found = false;\n    let mut\
    \ vowel_index_found_next_index_found_next_index_found = false;\n    let mut vowel_index_found_prev_index_found_prev_index_found_prev\
    \ = false;\n    let mut vowel_index_found_next_index_found_next_index_found_next\
    \ = false;\n    let mut vowel_index_found_prev_index_found_prev_index_found_prev_index\
    \ = 0;\n    let mut vowel_index_found_next_index_found_next_index_found_next_index\
    \ = 0;\n    let mut vowel_index_found_prev_index_found_prev_index_found_prev_index_found\
    \ = false;\n    let mut vowel_index_found_next_index_found_next_index_found_next_index_found\
    \ = false;\n    let mut vowel_index_found_prev_index_found_prev_index_found_prev_index_found_prev\
    \ = false;\n    let mut vowel_index_found_next_index_found_next_index_found_next_",
  "    let mut vowels = Vec::new();\n    let mut consonants = Vec::new();\n    for\
    \ c in word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            vowels.push(c);\n        } else {\n            consonants.push(c);\n\
    \        }\n    }\n    if vowels.len() == 0 || consonants.len() == 0 {\n     \
    \   return String::from(\"\");\n    }\n    let mut closest_vowel = vowels[0];\n\
    \    let mut closest_distance = word.len();\n    for i in 0..vowels.len() {\n\
    \        let vowel = vowels[i];\n        let mut distance = word.len();\n    \
    \    for j in 0..consonants.len() {\n            let consonant = consonants[j];\n\
    \            let mut found = false;\n            for k in 0..word.len() {\n  \
    \              if word.chars().nth(k).unwrap() == vowel {\n                  \
    \  for l in k..word.len() {\n                        if word.chars().nth(l).unwrap()\
    \ == consonant {\n                            found = true;\n                \
    \            distance = l - k;\n                            break;\n         \
    \               }\n                    }\n                    if found {\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n            if distance < closest_distance {\n                closest_distance\
    \ = distance;\n                closest_vowel = vowel;\n            }\n       \
    \ }\n    }\n    closest_vowel.to_string()", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut result = String::new();\n    let mut found = false;\n    for i in\
    \ 0..word.len() {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u' {\n            if i == 0 {\n           \
    \     break;\n            }\n            if word[i - 1] != 'a' && word[i - 1]\
    \ != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' {\n\
    \                result.push(word[i]);\n                found = true;\n      \
    \          break;\n            }\n        }\n    }\n    if found {\n        result\n\
    \    } else {\n        String::new()\n    }", "    let mut result = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut last_char = String::new();\n    let mut last_char_is_vowel = false;\n\
    \    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant = false;\n    let mut\
    \ last_char_is_vowel_or_consonant_and_consonant = false;\n    let mut last_char_is_vowel_and_consonant_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel = false;\n \
    \   let mut last_char_is_vowel_and_consonant_and_vowel = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel =\
    \ false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel = false;\n\
    \    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_and_consonant_and_vowel_and_vowel_and_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_and_vowel_and_vowel_and_vowel\
    \ = false;\n    let mut last_char_is_vowel_and_conson", "    let mut result =\
    \ String::new();\n    let mut last_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_char = String::new();\n    let mut last_char_is_vowel\
    \ = false;\n    let mut last_char_is_consonant = false;\n    let mut last_char_is_vowel_or_consonant\
    \ = false;\n    let mut last_char_is_vowel_or_consonant_or_empty = false;\n  \
    \  let mut last_char_is_consonant_or_empty = false;\n    let mut last_char_is_vowel_or_empty\
    \ = false;\n    let mut last_char_is_empty = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start\
    \ = false;\n    let mut last_char_is_consonant_or_empty_or_start = false;\n  \
    \  let mut last_char_is_vowel_or_empty_or_start = false;\n    let mut last_char_is_empty_or_start\
    \ = false;\n    let mut last_char_is_start = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start_or_end\
    \ = false;\n    let mut last_char_is_consonant_or_empty_or_start_or_end = false;\n\
    \    let mut last_char_is_vowel_or_empty_or_start_or_end = false;\n    let mut\
    \ last_char_is_empty_or_start_or_end = false;\n    let mut last_char_is_start_or_end\
    \ = false;\n    let mut last_char_is_end = false;\n    let mut last_char_is_vowel_or_consonant_or_empty_or_start_or_end_or_end\
    \ = false;\n    let mut last_char_is_consonant_or_empty_or_start_or_end_or_end\
    \ = false;\n    let mut", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowels.contains(&c) {\n            if i - last_consonant < closest_distance\
    \ {\n                closest_distance = i - last_consonant;\n                closest_vowel\
    \ = c.to_string();\n            }\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = word.chars().collect::<Vec<char>>();\n\
    \    let mut i = chars.len() - 1;\n    while i > 0 {\n        if vowels.contains(&chars[i])\
    \ {\n            if !vowels.contains(&chars[i - 1]) {\n                result.push(chars[i]);\n\
    \                break;\n            }\n        }\n        i -= 1;\n    }\n  \
    \  result", "    let mut result = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut last_consonant = String::new();\n    for c in word.chars() {\n  \
    \      if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n       \
    \     last_vowel = c.to_string();\n        } else {\n            last_consonant\
    \ = c.to_string();\n        }\n        if !last_vowel.is_empty() && !last_consonant.is_empty()\
    \ {\n            result = last_vowel.clone();\n            break;\n        }\n\
    \    }\n    result", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < word.len() {\n        if is_vowel(word[i])\
    \ {\n            if i + 1 < word.len() && is_vowel(word[i + 1]) {\n          \
    \      i += 1;\n            } else {\n                break;\n            }\n\
    \        }\n        i += 1;\n    }\n    if i == word.len() {\n        return String::new();\n\
    \    }\n    word[i].to_string()", "    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut last_consonant = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < last_consonant && last_consonant\
    \ - i < closest_distance {\n                closest_distance = last_consonant\
    \ - i;\n                closest_vowel = c.to_string();\n            }\n      \
    \  } else {\n            last_consonant = i;\n        }\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index = word.len();\n\
    \    let mut last_consonant_index = word.len();\n    let mut found_vowel = false;\n\
    \    for (index, character) in word.chars().enumerate() {\n        if is_vowel(character)\
    \ {\n            found_vowel = true;\n            if index - last_consonant_index\
    \ < closest_vowel_index - last_consonant_index {\n                closest_vowel_index\
    \ = index;\n            }\n        } else {\n            last_consonant_index\
    \ = index;\n        }\n    }\n    if found_vowel {\n        closest_vowel.push(word.chars().nth(closest_vowel_index).unwrap());\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ prev_char = ' ';\n    let mut prev_vowel = ' ';\n    let mut vowel_found = false;\n\
    \    for c in word.chars().rev() {\n        if is_vowel(c) {\n            prev_vowel\
    \ = c;\n            if vowel_found {\n                result.push(prev_vowel);\n\
    \                break;\n            }\n        } else {\n            if is_vowel(prev_char)\
    \ {\n                vowel_found = true;\n            }\n        }\n        prev_char\
    \ = c;\n    }\n    result.chars().rev().collect()", "    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut is_vowel = false;\n\
    \    let mut is_consonant = false;\n    let mut is_first_letter = true;\n    let\
    \ mut is_last_letter = false;\n    let mut is_first_vowel = false;\n    let mut\
    \ is_first_consonant = false;\n    let mut is_last_vowel = false;\n    let mut\
    \ is_last_consonant = false;\n    let mut is_first_vowel_found = false;\n    let\
    \ mut is_first_consonant_found = false;\n    let mut is_last_vowel_found = false;\n\
    \    let mut is_last_consonant_found = false;\n    let mut is_first_vowel_found_index\
    \ = 0;\n    let mut is_first_consonant_found_index = 0;\n    let mut is_last_vowel_found_index\
    \ = 0;\n    let mut is_last_consonant_found_index = 0;\n    let mut is_first_vowel_found_index_temp\
    \ = 0;\n    let mut is_first_consonant_found_index_temp = 0;\n    let mut is_last_vowel_found_index_temp\
    \ = 0;\n    let mut is_last_consonant_found_index_temp = 0;\n    let mut is_first_vowel_found_temp\
    \ = false;\n    let mut is_first_consonant_found_temp = false;\n    let mut is_last_vowel_found_temp\
    \ = false;\n    let mut is_last_consonant_found_temp = false;\n    let mut is_first_vowel_found_index_temp_temp\
    \ = 0;\n    let mut is_first_consonant_found_index_temp_temp = 0;\n    let mut\
    \ is_last_vowel_found_", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut index = 0;\n    for c in word.chars() {\n        if vowels.contains(&c)\
    \ {\n            last_vowel = index;\n        } else {\n            last_consonant\
    \ = index;\n        }\n        index += 1;\n    }\n    if last_vowel == 0 || last_consonant\
    \ == 0 {\n        return result;\n    }\n    let mut index = 0;\n    for c in\
    \ word.chars() {\n        if vowels.contains(&c) {\n            if index > last_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n        index += 1;\n    }\n    result", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ > last_consonant_index {\n            result = word[last_vowel_index..].to_string();\n\
    \            break;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_vowel = String::new();\n    let mut last_consonant = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in word.chars() {\n\
    \        if vowels.contains(&c) {\n            last_vowel = c.to_string();\n \
    \       } else {\n            last_consonant = c.to_string();\n        }\n   \
    \     if last_vowel != \"\" && last_consonant != \"\" {\n            result =\
    \ last_vowel.clone();\n            break;\n        }\n    }\n    result", "  \
    \  let mut result = String::new();\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            last_vowel = i;\n       \
    \     vowel_found = true;\n        } else {\n            last_consonant = i;\n\
    \            consonant_found = true;\n        }\n        if vowel_found && consonant_found\
    \ {\n            result = word[last_vowel..last_consonant].to_string();\n    \
    \        vowel_found = false;\n            consonant_found = false;\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_is_vowel\
    \ = false;\n    let mut prev_is_consonant = false;\n    let mut prev_char = '\
    \ ';\n    for c in word.chars() {\n        if is_vowel(c) {\n            if prev_is_consonant\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \            prev_is_vowel = true;\n        } else {\n            if prev_is_vowel\
    \ {\n                prev_is_consonant = true;\n            }\n        }\n   \
    \     prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut last_char\
    \ = ' ';\n    for (i, c) in word.chars().enumerate() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            last_vowel = i;\n\
    \        } else {\n            last_consonant = i;\n        }\n        if last_vowel\
    \ > last_consonant && last_char != c {\n            result = c.to_string();\n\
    \        }\n        last_char = c;\n    }\n    result", "    let mut vowels =\
    \ vec![];\n    let mut consonants = vec![];\n    let mut result = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj =\
    \ 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut\
    \ nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n   \
    \ let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu =\
    \ 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut\
    \ yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n   \
    \ let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff =\
    \ 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let\
    \ mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm =\
    \ 0;\n    let", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    let mut first_vowel_index\
    \ = word.len();\n    let mut current_vowel_index = word.len();\n    let mut current_vowel\
    \ = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for (i,\
    \ c) in word.chars().enumerate() {\n        if vowels.contains(&c) {\n       \
    \     if first_vowel_index == word.len() {\n                first_vowel_index\
    \ = i;\n            }\n            current_vowel_index = i;\n            current_vowel\
    \ = c.to_string();\n        } else {\n            if current_vowel_index < last_consonant_index\
    \ {\n                last_consonant_index = i;\n                if last_consonant_index\
    \ - current_vowel_index < closest_vowel_index {\n                    closest_vowel_index\
    \ = last_consonant_index - current_vowel_index;\n                    closest_vowel\
    \ = current_vowel;\n                }\n            }\n        }\n    }\n    if\
    \ closest_vowel_index == word.len() {\n        return String::new();\n    }\n\
    \    if closest_vowel_index == first_vowel_index {\n        return String::new();\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ last_consonant = false;\n    let mut last_vowel = false;\n    let mut last_vowel_pos\
    \ = 0;\n    let mut last_consonant_pos = 0;\n    let mut pos = 0;\n    for c in\
    \ word.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            if last_consonant {\n                if last_vowel {\n\
    \                    if pos - last_consonant_pos < last_vowel_pos - last_consonant_pos\
    \ {\n                        result = c.to_string();\n                    }\n\
    \                } else {\n                    result = c.to_string();\n     \
    \           }\n                last_vowel = true;\n                last_vowel_pos\
    \ = pos;\n            }\n        } else {\n            if last_vowel {\n     \
    \           last_consonant = true;\n                last_consonant_pos = pos;\n\
    \            }\n        }\n        pos += 1;\n    }\n    result", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let\
    \ mut last_vowel = 0;\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n        }\n        if last_vowel >\
    \ last_consonant {\n            result = c.to_string();\n        }\n    }\n  \
    \  result", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut consonants = vec!['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'];\n    consonants.append(&mut vowels);\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if consonants.contains(&c) {\n            if last_consonant_index\
    \ - i > 1 && closest_vowel_index - i > 1 {\n                return closest_vowel;\n\
    \            }\n            last_consonant_index = i;\n        } else {\n    \
    \        if last_consonant_index - i < closest_vowel_index - i {\n           \
    \     closest_vowel = c.to_string();\n                closest_vowel_index = i;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut result = String::new();\n\
    \    let mut last_vowel_pos = 0;\n    let mut last_consonant_pos = 0;\n    let\
    \ mut last_char_is_vowel = false;\n    let mut last_char_is_consonant = false;\n\
    \    let mut last_char_pos = 0;\n    let mut last_char = ' ';\n    let mut found_vowel\
    \ = false;\n    let mut found_consonant = false;\n    let mut found_vowel_pos\
    \ = 0;\n    let mut found_consonant_pos = 0;\n    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut i = 0;\n    for c in word.chars() {\n        if\
    \ vowels.contains(&c) {\n            if last_char_is_consonant {\n           \
    \     found_vowel = true;\n                found_vowel_pos = i;\n            }\n\
    \            last_char_is_vowel = true;\n            last_char_is_consonant =\
    \ false;\n            last_vowel_pos = i;\n        } else {\n            if last_char_is_vowel\
    \ {\n                found_consonant = true;\n                found_consonant_pos\
    \ = i;\n            }\n            last_char_is_vowel = false;\n            last_char_is_consonant\
    \ = true;\n            last_consonant_pos = i;\n        }\n        last_char =\
    \ c;\n        last_char_pos = i;\n        i += 1;\n    }\n    if found_vowel &&\
    \ found_consonant {\n        if found_vowel_pos > found_consonant_pos {\n    \
    \        result.push(word.chars().nth(found_vowel_pos).unwrap());\n        } else\
    \ {\n            result.push(word.chars().nth(found_consonant_pos).unwrap());\n\
    \        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let mut closest_vowel\
    \ = String::new();\n    let mut closest_distance = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.contains(c) {\n           \
    \ if i > 0 && i < word.len() - 1 {\n                let distance = word.len()\
    \ - i;\n                if distance < closest_distance {\n                   \
    \ closest_distance = distance;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut index = word.len() - 1;\n    let mut prev_vowel = false;\n    let\
    \ mut prev_consonant = false;\n    while index >= 0 {\n        let c = word.chars().nth(index).unwrap();\n\
    \        if vowels.contains(&c) {\n            if prev_consonant {\n         \
    \       result.push(c);\n                break;\n            }\n            prev_vowel\
    \ = true;\n        } else {\n            if prev_vowel {\n                result.push(c);\n\
    \                break;\n            }\n            prev_consonant = true;\n \
    \       }\n        index -= 1;\n    }\n    result.chars().rev().collect()", " \
    \   let mut word = word.chars().collect::<Vec<char>>();\n    word.reverse();\n\
    \    let mut result = String::new();\n    let mut prev_is_consonant = false;\n\
    \    for c in word {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            if prev_is_consonant {\n                result.push(c);\n\
    \                break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut prev_vowel = ' ';\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_char != ' ' && prev_char != 'a' && prev_char != 'e' && prev_char\
    \ != 'i' && prev_char != 'o' && prev_char != 'u' {\n                result.push(c);\n\
    \                break;\n            }\n            prev_vowel = c;\n        }\n\
    \        prev_char = c;\n    }\n    if result.is_empty() {\n        result.push(prev_vowel);\n\
    \    }\n    result", "    let mut last_vowel = None;\n    let mut last_consonant\
    \ = None;\n    for c in word.chars().rev() {\n        if c.is_vowel() {\n    \
    \        last_vowel = Some(c);\n        } else if last_vowel.is_some() {\n   \
    \         last_consonant = Some(c);\n            break;\n        }\n    }\n  \
    \  if last_vowel.is_some() && last_consonant.is_some() {\n        last_vowel.unwrap().to_string()\n\
    \    } else {\n        \"\".to_string()\n    }", "    let mut closest_vowel =\
    \ String::new();\n    let mut last_vowel = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_vowel_pos = 0;\n    let mut last_consonant_pos\
    \ = 0;\n    let mut i = 0;\n    for c in word.chars() {\n        if is_vowel(c)\
    \ {\n            last_vowel = c.to_string();\n            last_vowel_pos = i;\n\
    \        } else {\n            last_consonant = c.to_string();\n            last_consonant_pos\
    \ = i;\n        }\n        i += 1;\n    }\n    if last_vowel_pos > last_consonant_pos\
    \ {\n        closest_vowel = last_vowel;\n    }\n    closest_vowel", "    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let word = word.chars().collect::<Vec<char>>();\n\
    \    let mut index = word.len() - 1;\n    let mut result = String::new();\n  \
    \  while index > 0 {\n        if vowels.contains(&word[index]) {\n           \
    \ if !vowels.contains(&word[index - 1]) {\n                result.push(word[index]);\n\
    \                break;\n            }\n        }\n        index -= 1;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    let mut last_index = 0;\n \
    \   let mut index = 0;\n    let mut is_vowel = false;\n    let mut is_consonant\
    \ = false;\n    let mut is_first_vowel = false;\n    let mut is_first_consonant\
    \ = false;\n    let mut is_last_vowel = false;\n    let mut is_last_consonant\
    \ = false;\n    let mut is_last_vowel_first = false;\n    let mut is_last_consonant_first\
    \ = false;\n    let mut is_last_vowel_last = false;\n    let mut is_last_consonant_last\
    \ = false;\n    let mut is_first_vowel_first = false;\n    let mut is_first_consonant_first\
    \ = false;\n    let mut is_first_vowel_last = false;\n    let mut is_first_consonant_last\
    \ = false;\n    let mut is_first_vowel_first_last = false;\n    let mut is_first_consonant_first_last\
    \ = false;\n    let mut is_last_vowel_first_last = false;\n    let mut is_last_consonant_first_last\
    \ = false;\n    let mut is_first_vowel_first_last_first = false;\n    let mut\
    \ is_first_consonant_first_last_first = false;\n    let mut is_last_vowel_first_last_first\
    \ = false;\n    let mut is_last_consonant_first_last_first = false;\n    let mut\
    \ is_first_vowel_first_last_last = false;\n    let mut is_first_consonant_first_last_last\
    \ = false;\n    let mut is_last_vowel_first_last_last = false;\n    let mut is_last_",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_vowel_index = word.len();\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(&c) {\n            if i < closest_vowel_index\
    \ {\n                closest_vowel_index = i;\n                closest_vowel =\
    \ c.to_string();\n            }\n        } else {\n            if !closest_vowel.is_empty()\
    \ {\n                break;\n            }\n        }\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    let mut last_vowel = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n    \
    \        last_vowel = i;\n            let distance = last_consonant - last_vowel;\n\
    \            if distance < closest_distance && distance > 1 {\n              \
    \  closest_distance = distance;\n                closest_vowel = c.to_string();\n\
    \            }\n        } else {\n            last_consonant = i;\n        }\n\
    \    }\n    closest_vowel", "    let mut result = String::new();\n    let mut\
    \ vowel_index = 0;\n    let mut vowel_distance = 0;\n    let mut prev_is_consonant\
    \ = false;\n    let mut prev_is_vowel = false;\n    let mut prev_vowel_index =\
    \ 0;\n    let mut prev_vowel_distance = 0;\n    let mut prev_consonant_index =\
    \ 0;\n    let mut prev_consonant_distance = 0;\n    let mut prev_char = ' ';\n\
    \    let mut prev_prev_char = ' ';\n    let mut prev_prev_is_consonant = false;\n\
    \    let mut prev_prev_is_vowel = false;\n    let mut prev_prev_vowel_index =\
    \ 0;\n    let mut prev_prev_vowel_distance = 0;\n    let mut prev_prev_consonant_index\
    \ = 0;\n    let mut prev_prev_consonant_distance = 0;\n    for (index, c) in word.chars().enumerate()\
    \ {\n        let is_vowel = match c {\n            'a' | 'e' | 'i' | 'o' | 'u'\
    \ => true,\n            _ => false,\n        };\n        let is_consonant = !is_vowel;\n\
    \        if is_vowel {\n            if prev_is_consonant {\n                vowel_index\
    \ = index;\n                vowel_distance = index - prev_consonant_index;\n \
    \           }\n            if prev_prev_is_consonant {\n                prev_vowel_index\
    \ = index;\n                prev_vowel_distance = index - prev_prev_consonant_index;\n\
    \            }\n        }\n        if is_consonant {\n            if prev_is_vowel\
    \ {\n                consonant_index = index;\n                consonant_distance\
    \ = index - prev_vowel_index;\n            }\n            if prev_prev_is_vowel\
    \ {\n                prev_consonant_index = index;\n                prev_consonant_distance\
    \ = index - prev_prev_vowel_index;\n           ", "    let mut result = String::new();\n\
    \    let mut vowel_pos = word.len();\n    let mut consonant_pos = word.len();\n\
    \    let mut i = word.len() - 1;\n    while i >= 0 {\n        let c = word.chars().nth(i).unwrap();\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       vowel_pos = i;\n            if consonant_pos != word.len() {\n       \
    \         break;\n            }\n        } else {\n            consonant_pos =\
    \ i;\n            if vowel_pos != word.len() {\n                break;\n     \
    \       }\n        }\n        i -= 1;\n    }\n    if vowel_pos != word.len() &&\
    \ consonant_pos != word.len() {\n        result.push(word.chars().nth(vowel_pos).unwrap());\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_consonant\
    \ = 0;\n    let mut last_vowel = 0;\n    let mut last_vowel_index = 0;\n    let\
    \ mut last_consonant_index = 0;\n    let mut index = 0;\n    for c in word.chars()\
    \ {\n        if is_vowel(c) {\n            last_vowel = index;\n            last_vowel_index\
    \ = index;\n        } else {\n            last_consonant = index;\n          \
    \  last_consonant_index = index;\n        }\n        index += 1;\n    }\n    if\
    \ last_vowel_index > last_consonant_index {\n        result = word.chars().nth(last_vowel_index).unwrap().to_string();\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_vowel\
    \ = false;\n    let mut prev_consonant = false;\n    for c in word.chars().rev()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if prev_consonant {\n                result.push(c);\n           \
    \     break;\n            }\n            prev_vowel = true;\n        } else {\n\
    \            if prev_vowel {\n                result.push(c);\n              \
    \  break;\n            }\n            prev_consonant = true;\n        }\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut last_consonant\
    \ = String::new();\n    let mut last_vowel = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = c.to_string();\n\
    \            last_vowel_index = i;\n        } else {\n            last_consonant\
    \ = c.to_string();\n        }\n        if last_consonant != \"\" && last_vowel\
    \ != \"\" {\n            result = last_vowel;\n            break;\n        }\n\
    \    }\n    if last_vowel_index == word.len() - 1 {\n        result = String::new();\n\
    \    }\n    result", "    let mut closest_vowel = String::new();\n    let mut\
    \ closest_distance = word.len();\n    let mut last_consonant = word.len();\n \
    \   let mut last_vowel = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            last_vowel = i;\n            if last_consonant\
    \ != word.len() {\n                let distance = last_vowel - last_consonant;\n\
    \                if distance < closest_distance {\n                    closest_distance\
    \ = distance;\n                    closest_vowel = c.to_string();\n          \
    \      }\n            }\n        } else {\n            last_consonant = i;\n \
    \       }\n    }\n    closest_vowel", "    let mut result = String::new();\n \
    \   let mut last_vowel_index = 0;\n    let mut last_consonant_index = 0;\n   \
    \ let mut last_vowel_char = ' ';\n    let mut last_consonant_char = ' ';\n   \
    \ let mut found_vowel = false;\n    let mut found_consonant = false;\n    let\
    \ mut found_vowel_between_consonants = false;\n    let mut found_consonant_between_vowels\
    \ = false;\n    let mut found_vowel_between_consonants_index = 0;\n    let mut\
    \ found_consonant_between_vowels_index = 0;\n    let mut found_vowel_between_consonants_char\
    \ = ' ';\n    let mut found_consonant_between_vowels_char = ' ';\n    let mut\
    \ found_vowel_between_consonants_distance = 0;\n    let mut found_consonant_between_vowels_distance\
    \ = 0;\n    let mut distance = 0;\n    let mut distance_between_vowels = 0;\n\
    \    let mut distance_between_consonants = 0;\n    let mut distance_between_vowels_and_consonants\
    \ = 0;\n    let mut distance_between_consonants_and_vowels = 0;\n    let mut distance_between_vowels_and_consonants_index\
    \ = 0;\n    let mut distance_between_consonants_and_vowels_index = 0;\n    let\
    \ mut distance_between_vowels_and_consonants_char = ' ';\n    let mut distance_between_consonants_and_vowels_char\
    \ = ' ';\n    let mut distance_between_vowels_and_consonants_distance = 0;\n \
    \   let mut distance_between_consonants_and_vowels_distance = 0;\n    let mut\
    \ distance_between_vowels_and_consonants_distance_index = 0;\n    let mut distance_between_consonants_and_vowels_distance_index\
    \ = 0;\n    let mut", "    let mut result = String::new();\n    let mut last_vowel_pos\
    \ = 0;\n    let mut last_consonant_pos = 0;\n    let mut last_char_is_vowel =\
    \ false;\n    let mut last_char_is_consonant = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if is_vowel(c) {\n            last_vowel_pos = i;\n            last_char_is_vowel\
    \ = true;\n            last_char_is_consonant = false;\n        } else {\n   \
    \         last_consonant_pos = i;\n            last_char_is_vowel = false;\n \
    \           last_char_is_consonant = true;\n        }\n        if last_char_is_vowel\
    \ && last_char_is_consonant {\n            result = word[last_vowel_pos..last_vowel_pos+1].to_string();\n\
    \            break;\n        }\n    }\n    result", "    let vowels = \"aeiou\"\
    ;\n    let mut result = String::new();\n    let mut last_vowel_pos = 0;\n    let\
    \ mut last_consonant_pos = 0;\n    let mut last_vowel_char = ' ';\n    let mut\
    \ last_consonant_char = ' ';\n    let mut last_char = ' ';\n    let mut last_char_pos\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            last_vowel_pos = i;\n            last_vowel_char = c;\n     \
    \   } else {\n            last_consonant_pos = i;\n            last_consonant_char\
    \ = c;\n        }\n        if last_vowel_pos > last_consonant_pos {\n        \
    \    if last_vowel_pos - last_consonant_pos < last_char_pos - last_consonant_pos\
    \ {\n                last_char = last_vowel_char;\n                last_char_pos\
    \ = last_vowel_pos;\n            }\n        }\n    }\n    if last_char_pos > last_consonant_pos\
    \ {\n        result.push(last_char);\n    }\n    result", "    let mut closest_vowel\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut last_vowel_index = 0;\n    let mut last_consonant_index\
    \ = 0;\n    let mut index = 0;\n    for c in word.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_vowel() {\n                last_vowel = c.to_string();\n\
    \                last_vowel_index = index;\n            } else {\n           \
    \     last_consonant = c.to_string();\n                last_consonant_index =\
    \ index;\n            }\n        }\n        index += 1;\n    }\n    if last_vowel_index\
    \ > last_consonant_index {\n        closest_vowel = last_vowel;\n    }\n    closest_vowel",
  "    let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = word.len();\n    let mut last_vowel = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n    \
    \        last_vowel = i;\n            if last_consonant < last_vowel {\n     \
    \           let distance = last_vowel - last_consonant;\n                if distance\
    \ < closest_distance {\n                    closest_distance = distance;\n   \
    \                 closest_vowel = c.to_string();\n                }\n        \
    \    }\n        } else {\n            last_consonant = i;\n        }\n    }\n\
    \    closest_vowel", "    let mut result = String::new();\n    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut chars = word.chars().collect::<Vec<char>>();\n\
    \    let mut last_vowel = 0;\n    let mut last_consonant = 0;\n    let mut index\
    \ = 0;\n    for c in chars.iter() {\n        if vowels.contains(c) {\n       \
    \     last_vowel = index;\n        } else {\n            last_consonant = index;\n\
    \        }\n        index += 1;\n    }\n    if last_vowel > last_consonant {\n\
    \        result.push(chars[last_vowel]);\n    }\n    result", "    let mut res\
    \ = String::new();\n    let mut last_vowel_pos = 0;\n    let mut last_consonant_pos\
    \ = 0;\n    for (i, c) in word.chars().enumerate() {\n        if is_vowel(c) {\n\
    \            last_vowel_pos = i;\n        } else {\n            last_consonant_pos\
    \ = i;\n        }\n        if last_vowel_pos > last_consonant_pos {\n        \
    \    res = word[last_vowel_pos..=last_vowel_pos].to_string();\n        }\n   \
    \ }\n    res", "    let mut closest_vowel = String::new();\n    let mut closest_vowel_index\
    \ = word.len();\n    let mut last_consonant_index = word.len();\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            if i > last_consonant_index && i - last_consonant_index\
    \ < closest_vowel_index {\n                closest_vowel = c.to_string();\n  \
    \              closest_vowel_index = i - last_consonant_index;\n            }\n\
    \        } else {\n            last_consonant_index = i;\n        }\n    }\n \
    \   closest_vowel", "    let mut closest_vowel = String::new();\n    let mut closest_distance\
    \ = word.len();\n    let mut last_consonant = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           if i - last_consonant < closest_distance {\n                closest_distance\
    \ = i - last_consonant;\n                closest_vowel = c.to_string();\n    \
    \        }\n        } else {\n            last_consonant = i;\n        }\n   \
    \ }\n    closest_vowel", "    let mut result = String::new();\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut last_vowel = 0;\n    let mut last_consonant\
    \ = 0;\n    let mut last_char = ' ';\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel = i;\n        }\
    \ else {\n            last_consonant = i;\n            if last_vowel < last_consonant\
    \ {\n                result = word[last_vowel..last_consonant].to_string();\n\
    \            }\n        }\n        last_char = c;\n    }\n    if last_vowel <\
    \ last_consonant {\n        result = word[last_vowel..last_consonant].to_string();\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_consonant\
    \ = 0;\n    let mut last_vowel = 0;\n    let mut last_vowel_pos = 0;\n    let\
    \ mut last_consonant_pos = 0;\n    let mut vowel_pos = 0;\n    let mut consonant_pos\
    \ = 0;\n    let mut vowel_found = false;\n    let mut consonant_found = false;\n\
    \    let mut vowel_count = 0;\n    let mut consonant_count = 0;\n    let mut vowel_pos_count\
    \ = 0;\n    let mut consonant_pos_count = 0;\n    let mut vowel_pos_arr = [0;\
    \ 10];\n    let mut consonant_pos_arr = [0; 10];\n    let mut vowel_arr = [0;\
    \ 10];\n    let mut consonant_arr = [0; 10];\n    let mut vowel_pos_arr_count\
    \ = 0;\n    let mut consonant_pos_arr_count = 0;\n    let mut vowel_arr_count\
    \ = 0;\n    let mut consonant_arr_count = 0;\n    let mut vowel_pos_arr_index\
    \ = 0;\n    let mut consonant_pos_arr_index = 0;\n    let mut vowel_arr_index\
    \ = 0;\n    let mut consonant_arr_index = 0;\n    let mut vowel_pos_arr_index_count\
    \ = 0;\n    let mut consonant_pos_arr_index_count = 0;\n    let mut vowel_arr_index_count\
    \ = 0;\n    let mut consonant_arr_index_count = 0;\n    let mut vowel_pos_arr_index_count_arr\
    \ = [0; 10];\n    let mut consonant_pos_arr_index_count_arr = [0; 10];\n    let\
    \ mut vowel_arr_index_count_arr = [0; 10];\n    let mut consonant_arr_index_count_arr\
    \ = [0; 10];\n    let mut vowel_pos_arr_index_count_arr_count = 0;\n    let mut\
    \ consonant_pos_arr_index_count_arr_count = 0;\n    let mut vowel_arr_index_count",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel = String::new();\n\
    \    let mut closest_distance = word.len();\n    let mut last_consonant = None;\n\
    \    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(&c)\
    \ {\n            if let Some(last_consonant) = last_consonant {\n            \
    \    if i - last_consonant < closest_distance {\n                    closest_distance\
    \ = i - last_consonant;\n                    closest_vowel = c.to_string();\n\
    \                }\n            }\n        } else {\n            last_consonant\
    \ = Some(i);\n        }\n    }\n    closest_vowel", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            last_vowel_index = i;\n   \
    \     } else {\n            last_consonant_index = i;\n        }\n        if last_vowel_index\
    \ < last_consonant_index {\n            result = word[last_vowel_index..last_consonant_index].to_string();\n\
    \        }\n    }\n    result", "    let vowels = \"aeiou\";\n    let mut res\
    \ = String::new();\n    let mut last_consonant = 0;\n    let mut last_vowel =\
    \ 0;\n    for (i, c) in word.chars().enumerate() {\n        if vowels.contains(c)\
    \ {\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n        if last_consonant > last_vowel {\n            res =\
    \ word[last_vowel..last_consonant].to_string();\n        }\n    }\n    res", " \
    \   let mut closest_vowel = String::new();\n    let mut closest_distance = word.len();\n\
    \    let mut last_consonant = 0;\n    let mut last_vowel = 0;\n    for (i, c)\
    \ in word.chars().enumerate() {\n        if is_vowel(c) {\n            last_vowel\
    \ = i;\n            if last_vowel - last_consonant < closest_distance {\n    \
    \            closest_distance = last_vowel - last_consonant;\n               \
    \ closest_vowel = c.to_string();\n            }\n        } else {\n          \
    \  last_consonant = i;\n        }\n    }\n    closest_vowel"]
stop_tokens:
- "\n}"
