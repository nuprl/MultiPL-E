language: rs
name: HumanEval_122_add_elements
results:
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv_ror948.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n\
    \        if n > 99 {\n            n = 99;\n        }\n        sum += n;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp_jm912fu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv_ror948.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut result = 0;\n    for i in 0..k {\n        let x = arr[i as usize];\n\
    \        if x < 10 {\n            result += x;\n        } else if x < 100 {\n\
    \            result += x / 10 + x % 10;\n        } else {\n            result\
    \ += x / 100 + (x % 100) / 10 + x % 10;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp1_pmjudh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp9f9f8zn2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n\
    \        if n > 99 {\n            n = 99;\n        }\n        sum += n;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp_jm912fu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n\
    \        if n > 99 {\n            n = 99;\n        }\n        sum += n;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp_jm912fu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp9f9f8zn2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 1
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpybcoxqxw.rs:8:49\n  |\n8 |\
    \     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n  |            \
    \                                     ^^^\n  |                               \
    \                  |\n  |                                                 expected\
    \ `&isize`, found integer\n  |                                               \
    \  help: consider borrowing here: `&100`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008748
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 9 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sum += num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n\
    \    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpas1_nu59.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100\
    \ {\n            result += arr[i as usize];\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n % 10 + n / 10;\n        } else {\n            sum += n % 10\
    \ + n / 10 % 10 + n / 100;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp_562ck7k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut n = arr[i as usize];\n\
    \        if n > 99 {\n            n = 99;\n        }\n        sum += n;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmp_jm912fu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut result = 0;\n    for i in 0..k {\n        if arr[i as usize] < 100\
    \ {\n            result += arr[i as usize];\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 1
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n}\n\nfn main() {\n\
    \    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpybcoxqxw.rs:8:49\n  |\n8 |\
    \     arr.iter().take(k as usize).filter(|&x| x < 100).sum()\n  |            \
    \                                     ^^^\n  |                               \
    \                  |\n  |                                                 expected\
    \ `&isize`, found integer\n  |                                               \
    \  help: consider borrowing here: `&100`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008748
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 0
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 100 {\n            sum += n;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += 1;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmppgse9o83.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp9f9f8zn2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n % 10 + n / 10;\n        } else {\n            sum += n % 10\
    \ + n / 10 % 10 + n / 100;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp_562ck7k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-4`', /tmp/tmp9f9f8zn2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] / 10 + arr[i as usize] % 10;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n   \
    \ assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n   \
    \ assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp0984xi_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut result = 0;\n    for i in 0..k {\n        let x = arr[i as usize];\n\
    \        if x < 10 {\n            result += x;\n        } else if x < 100 {\n\
    \            result += x / 10 + x % 10;\n        } else {\n            result\
    \ += x / 100 + (x % 100) / 10 + x % 10;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp1_pmjudh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmppm5cmuds.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv_ror948.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n\
    \        if num > 99 {\n            num = 99;\n        }\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `0`', /tmp/tmppm5cmuds.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut result = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            result += n;\n        } else if n < 100 {\n\
    \            result += n / 10 + n % 10;\n        } else {\n            result\
    \ += n / 100 + (n % 100) / 10 + n % 10;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp26l3_yhk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv_ror948.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let num = arr[i as usize];\n\
    \        if num < 10 {\n            sum += num;\n        } else if num < 100 {\n\
    \            sum += num / 10 + num % 10;\n        } else {\n            sum +=\
    \ num / 100 + (num % 100) / 10 + num % 10;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111,\
    \ 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpw5yh4cvc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n % 10 + n / 10;\n        } else {\n            sum += n % 10\
    \ + n / 10 % 10 + n / 100;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmp_562ck7k.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        let n = arr[i as usize];\n\
    \        if n < 10 {\n            sum += n;\n        } else if n < 100 {\n   \
    \         sum += n / 10 + n % 10;\n        } else {\n            sum += n / 100\
    \ + (n % 100) / 10 + n % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000,\
    \ 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),\
    \ 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpjurzqo36.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
- exit_code: 101
  program: "/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n\
    \    let mut sum = 0;\n    for i in 0..k {\n        if arr[i as usize] < 10 {\n\
    \            sum += arr[i as usize];\n        } else if arr[i as usize] < 100\
    \ {\n            sum += arr[i as usize] % 10;\n            sum += arr[i as usize]\
    \ / 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add_elements;\n\
    \    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n\
    \    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `125`', /tmp/tmp7pko1xt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008749
