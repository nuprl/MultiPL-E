name: HumanEval_145_order_by_points
language: rs
prompt: "/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
  \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
  \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
  \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
  \ 23, 6, 6]);\n}\n"
completions: ["    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum\
    \ = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n   \
    \     let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    nums.iter()\n        .enumerate()\n\
    \        .map(|(i, n)| (i, n, sum_digits(*n)))\n        .sorted_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .into_iter()\n        .map(|(_, n, _)| *n)\n        .collect()", "  \
    \  let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let sum_a = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let sum_b = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        sum_a.cmp(&sum_b)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a.cmp(&b)\n    });\n    nums", "    let mut nums =\
    \ nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n    \
    \    let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n\
    \        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut sum_vec: Vec<(isize, isize)> = Vec::new();\n    for (i,\
    \ n) in nums.iter().enumerate() {\n        let mut sum = 0;\n        let mut n\
    \ = *n;\n        while n > 0 {\n            sum += n % 10;\n            n /= 10;\n\
    \        }\n        sum_vec.push((sum, i as isize));\n    }\n    sum_vec.sort();\n\
    \    let mut res: Vec<isize> = Vec::new();\n    for (_, i) in sum_vec {\n    \
    \    res.push(nums[i as usize]);\n    }\n    res", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n   \
    \ nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum\
    \ = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum ==\
    \ b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a = sum_digits(*a);\n\
    \        let b = sum_digits(*b);\n        a.cmp(&b)\n    });\n    nums", "   \
    \ let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ sum_a = sum_digits(*a);\n        let sum_b = sum_digits(*b);\n        sum_a.cmp(&sum_b)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n    \
    \    if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n           \
    \ a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        a.cmp(&b)\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_of_digits(*a);\n        let\
    \ b_sum = sum_of_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n\
    \        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    nums.iter()\n        .enumerate()\n        .map(|(i, x)| (i,\
    \ x, x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum()))\n\
    \        .sorted_by(|(_, _, a), (_, _, b)| a.cmp(b))\n        .map(|(_, x, _)|\
    \ *x)\n        .collect()", "    let mut result = nums.clone();\n    result.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    result", "    let mut nums =\
    \ nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    nums.iter()\n        .enumerate()\n\
    \        .map(|(i, n)| (i, n, n.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum()))\n        .sorted_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .map(|(_, n, _)| *n)\n        .collect()", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    nums.iter()\n        .enumerate()\n\
    \        .map(|(i, n)| (i, n, n.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum()))\n        .collect::<Vec<_>>()\n        .sort_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .into_iter()\n        .map(|(_, n, _)| *n)\n        .collect()", "  \
    \  let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ sum_a = sum_digits(*a);\n        let sum_b = sum_digits(*b);\n        if sum_a\
    \ == sum_b {\n            a.cmp(b)\n        } else {\n            sum_a.cmp(&sum_b)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_of_digits(*a);\n        let b_sum = sum_of_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a.cmp(&b)\n    });\n    nums", "    // TODO: implement\
    \ this function\n    unimplemented!();", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  let mut sums = Vec::new();\n    for i in 0..nums.len() {\n        let mut sum\
    \ = 0;\n        let mut num = nums[i];\n        while num > 0 {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums.push(sum);\n \
    \   }\n    for i in 0..nums.len() {\n        for j in i..nums.len() {\n      \
    \      if sums[i] > sums[j] {\n                sums.swap(i, j);\n            \
    \    nums.swap(i, j);\n            }\n        }\n    }\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (i,\
    \ n, n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum()))\n\
    \        .collect::<Vec<_>>()\n        .sort_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .into_iter()\n        .map(|(_, n, _)| *n)\n        .collect()", "  \
    \  let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_of_digits(*a);\n        let\
    \ b_sum = sum_of_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n\
    \        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum: isize = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_of_digits(*a);\n        let b_sum = sum_of_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n   \
    \ nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum\
    \ = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n   \
    \     let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    nums.iter()\n        .enumerate()\n\
    \        .map(|(i, &n)| (n, i))\n        .collect::<Vec<(isize, usize)>>()\n \
    \       .sort_by(|a, b| {\n            let (a_num, a_index) = a;\n           \
    \ let (b_num, b_index) = b;\n            let a_sum = a_num.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n            let b_sum = b_num.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n            a_sum.cmp(&b_sum).then(a_index.cmp(&b_index))\n\
    \        })\n        .iter()\n        .map(|(n, _)| *n)\n        .collect()",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum: isize =\
    \ a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n   \
    \     let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        a.cmp(&b)\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum: isize = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        let b_sum: isize = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        a.cmp(&b)\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        let b = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        a.cmp(&b)\n    });\n    nums",
  "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a = sum_digits(*a);\n\
    \        let b = sum_digits(*b);\n        a.cmp(&b)\n    });\n    nums", "   \
    \ let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum: isize =\
    \ a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n   \
    \     let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum: isize = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        let b_sum: isize = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum: isize = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut\
    \ nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut sum_vec: Vec<(isize,\
    \ isize)> = vec![];\n    for (i, n) in nums.iter().enumerate() {\n        let\
    \ mut sum = 0;\n        let mut n = *n;\n        while n > 0 {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sum_vec.push((sum, i as\
    \ isize));\n    }\n    sum_vec.sort();\n    let mut res: Vec<isize> = vec![];\n\
    \    for (_, i) in sum_vec {\n        res.push(nums[i as usize]);\n    }\n   \
    \ res", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum\
    \ = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n   \
    \     let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_of_digits(*a);\n        let\
    \ b_sum = sum_of_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        a.cmp(&b)\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let sum_a = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let sum_b = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        sum_a.cmp(&sum_b)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut result = nums.clone();\n    result.sort_by(|a, b| {\n\
    \        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        a_sum.cmp(&b_sum)\n\
    \    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n  \
    \      let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n    \
    \    if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n           \
    \ a_sum.cmp(&b_sum)\n        }\n    });\n    nums", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = sum_of_digits(*a);\n        let\
    \ b_sum = sum_of_digits(*b);\n        a_sum.cmp(&b_sum)\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n\
    \        let b_sum = sum_digits(*b);\n        if a_sum == b_sum {\n          \
    \  a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n        if a_sum\
    \ == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n\
    \        }\n    });\n    nums", "    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (i,\
    \ n, sum_digits(*n)))\n        .sorted_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .map(|(_, n, _)| *n)\n        .collect()", "    let mut nums = nums;\n\
    \    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = sum_digits(*a);\n        let b_sum\
    \ = sum_digits(*b);\n        if a_sum == b_sum {\n            a.cmp(b)\n     \
    \   } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums", " \
    \   let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    nums", "    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums", "    let mut nums = nums;\n  \
    \  nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    nums"]
stop_tokens:
- "\n}"
