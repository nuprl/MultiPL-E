language: rs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    let mut last = l[0];\n    for i in l {\n       \
    \ if i < last {\n            increasing = false;\n        }\n        if i > last\
    \ {\n            decreasing = false;\n        }\n        last = i;\n    }\n  \
    \  increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    let mut prev = l[0];\n    for i in 1..l.len() {\n        if l[i]\
    \ < prev {\n            inc = false;\n        }\n        if l[i] > prev {\n  \
    \          dec = false;\n        }\n        prev = l[i];\n    }\n    inc || dec\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i - 1] > l[i]\
    \ {\n            increasing = false;\n        }\n        if l[i - 1] < l[i] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        increasing = increasing\
    \ && l[i] >= l[i - 1];\n        decreasing = decreasing && l[i] <= l[i - 1];\n\
    \    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut direction = 0;\n    for i in\
    \ 1..l.len() {\n        let d = l[i] - l[i - 1];\n        if d == 0 {\n      \
    \      return false;\n        }\n        if direction == 0 {\n            direction\
    \ = d;\n        } else if direction * d < 0 {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6pb1or4q.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut monotonic = true;\n    let\
    \ mut prev = l[0];\n    for i in l {\n        if i != prev {\n            if monotonic\
    \ && i < prev {\n                monotonic = false;\n            } else if !monotonic\
    \ && i > prev {\n                return false;\n            }\n        }\n   \
    \     prev = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n\
    \    let mut increasing = true;\n    let mut decreasing = true;\n    while j <\
    \ l.len() {\n        if l[i] < l[j] {\n            decreasing = false;\n     \
    \   } else if l[i] > l[j] {\n            increasing = false;\n        }\n    \
    \    i += 1;\n        j += 1;\n    }\n    increasing || decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        increasing = increasing\
    \ && l[i] >= l[i - 1];\n        decreasing = decreasing && l[i] <= l[i - 1];\n\
    \    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut increasing\
    \ = true;\n    let mut decreasing = true;\n    while i < l.len() - 1 {\n     \
    \   if l[i] > l[i + 1] {\n            increasing = false;\n        }\n       \
    \ if l[i] < l[i + 1] {\n            decreasing = false;\n        }\n        i\
    \ += 1;\n    }\n    increasing || decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in l {\n        if i > prev {\n            if !increasing\
    \ {\n                return false;\n            }\n        } else if i < prev\
    \ {\n            if increasing {\n                increasing = false;\n      \
    \      }\n        }\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if prev == l[i] {\n            return\
    \ false;\n        }\n        if increasing {\n            if prev > l[i] {\n \
    \               increasing = false;\n            }\n        } else {\n       \
    \     if prev < l[i] {\n                return false;\n            }\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpripiif4x.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n\
    \    let mut inc = true;\n    let mut dec = true;\n    while j < l.len() {\n \
    \       if l[i] > l[j] {\n            inc = false;\n        }\n        if l[i]\
    \ < l[j] {\n            dec = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            decreasing = false;\n        } else if l[i] < l[i - 1] {\n  \
    \          increasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n         \
    \   dec = false;\n        } else if l[i] < l[i - 1] {\n            inc = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n         \
    \   dec = false;\n        } else if l[i] < l[i - 1] {\n            inc = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in l.iter().skip(1) {\n        if *i > prev {\n         \
    \   if !increasing {\n                return false;\n            }\n        }\
    \ else if *i < prev {\n            if increasing {\n                increasing\
    \ = false;\n            }\n        } else {\n            return false;\n     \
    \   }\n        prev = *i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbs3alyi0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for x in l {\n        if x > prev {\n            if !increasing\
    \ {\n                return false;\n            }\n        } else if x < prev\
    \ {\n            if increasing {\n                increasing = false;\n      \
    \      }\n        }\n        prev = x;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    let mut last = l[0];\n    for i in l {\n       \
    \ if i < last {\n            increasing = false;\n        }\n        if i > last\
    \ {\n            decreasing = false;\n        }\n        last = i;\n    }\n  \
    \  increasing || decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in l.iter().skip(1) {\n        if *i < prev {\n         \
    \   increasing = false;\n            break;\n        }\n        prev = *i;\n \
    \   }\n    if increasing {\n        return true;\n    }\n    let mut prev = l[0];\n\
    \    for i in l.iter().skip(1) {\n        if *i > prev {\n            return false;\n\
    \        }\n        prev = *i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in l {\n        if i > prev {\n            if !increasing\
    \ {\n                return false;\n            }\n        } else if i < prev\
    \ {\n            if increasing {\n                increasing = false;\n      \
    \      }\n        }\n        prev = i;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut m = 0;\n    for i in 0..l.len()\
    \ - 1 {\n        if l[i] < l[i + 1] {\n            if m == -1 {\n            \
    \    return false;\n            }\n            m = 1;\n        } else if l[i]\
    \ > l[i + 1] {\n            if m == 1 {\n                return false;\n     \
    \       }\n            m = -1;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut increasing\
    \ = true;\n    for i in l {\n        if i < last {\n            increasing = false;\n\
    \        }\n        if i > last && !increasing {\n            return false;\n\
    \        }\n        last = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut monotonic = true;\n    let\
    \ mut direction = 0;\n    for i in 1..l.len() {\n        let diff = l[i] - l[i\
    \ - 1];\n        if diff == 0 {\n            continue;\n        }\n        if\
    \ direction == 0 {\n            direction = diff;\n        } else if diff * direction\
    \ < 0 {\n            monotonic = false;\n            break;\n        }\n    }\n\
    \    monotonic\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n\
    \    }\n    let mut prev = l[0];\n    let mut increasing = true;\n    for i in\
    \ 1..l.len() {\n        if l[i] < prev {\n            increasing = false;\n  \
    \          break;\n        }\n        prev = l[i];\n    }\n    if increasing {\n\
    \        return true;\n    }\n    let mut prev = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > prev {\n            return false;\n        }\n        prev\
    \ = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut inc = true;\n\
    \    let mut dec = true;\n    while i < l.len() - 1 {\n        if l[i] > l[i +\
    \ 1] {\n            inc = false;\n        }\n        if l[i] < l[i + 1] {\n  \
    \          dec = false;\n        }\n        i += 1;\n    }\n    inc || dec\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut inc = true;\n\
    \    let mut dec = true;\n    while i < l.len() - 1 {\n        if l[i] > l[i +\
    \ 1] {\n            inc = false;\n        }\n        if l[i] < l[i + 1] {\n  \
    \          dec = false;\n        }\n        i += 1;\n    }\n    inc || dec\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            decreasing = false;\n        } else if l[i] < l[i - 1] {\n  \
    \          increasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut increasing\
    \ = true;\n    for i in l {\n        if i < last {\n            increasing = false;\n\
    \        }\n        if i > last && !increasing {\n            return false;\n\
    \        }\n        last = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut inc = true;\n\
    \    let mut dec = true;\n    while i < l.len() - 1 {\n        if l[i] < l[i +\
    \ 1] {\n            dec = false;\n        } else if l[i] > l[i + 1] {\n      \
    \      inc = false;\n        }\n        i += 1;\n    }\n    inc || dec\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            decreasing = false;\n        } else if l[i] < l[i - 1] {\n  \
    \          increasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1]\
    \ {\n            decreasing = false;\n        } else if l[i] < l[i - 1] {\n  \
    \          increasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut prev = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] > prev {\n            if\
    \ !increasing {\n                return false;\n            }\n        } else\
    \ if l[i] < prev {\n            if increasing {\n                increasing =\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkn8a6dgp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut increasing\
    \ = true;\n    let mut decreasing = true;\n    for i in l {\n        if i > last\
    \ {\n            decreasing = false;\n        } else if i < last {\n         \
    \   increasing = false;\n        }\n        last = i;\n    }\n    increasing ||\
    \ decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut is_increasing = true;\n   \
    \ let mut is_decreasing = true;\n    for i in 1..l.len() {\n        if l[i] <\
    \ l[i - 1] {\n            is_increasing = false;\n        }\n        if l[i] >\
    \ l[i - 1] {\n            is_decreasing = false;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut last = l[0];\n    let mut increasing\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] == last {\n            return\
    \ false;\n        }\n        if increasing {\n            if l[i] < last {\n \
    \               increasing = false;\n            }\n        } else {\n       \
    \     if l[i] > last {\n                return false;\n            }\n       \
    \ }\n        last = l[i];\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpous4gkws.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n\
    \    let mut increasing = true;\n    let mut decreasing = true;\n    while j <\
    \ l.len() {\n        if l[i] < l[j] {\n            decreasing = false;\n     \
    \   } else if l[i] > l[j] {\n            increasing = false;\n        }\n    \
    \    i += 1;\n        j += 1;\n    }\n    increasing || decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut increasing = true;\n    let\
    \ mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1]\
    \ {\n            increasing = false;\n        }\n        if l[i] > l[i - 1] {\n\
    \            decreasing = false;\n        }\n    }\n    increasing || decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        inc &= l[i] >= l[i - 1];\n     \
    \   dec &= l[i] <= l[i - 1];\n    }\n    inc || dec\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut inc = true;\n    let mut dec\
    \ = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n         \
    \   inc = false;\n        }\n        if l[i] > l[i - 1] {\n            dec = false;\n\
    \        }\n    }\n    inc || dec\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Return True is list elements are monotonically increasing or decreasing.\n\
    fn monotonic(l: Vec<isize>) -> bool {\n    let mut m = 0;\n    for i in 0..l.len()\
    \ - 1 {\n        if l[i] < l[i + 1] {\n            if m == -1 {\n            \
    \    return false;\n            }\n            m = 1;\n        } else if l[i]\
    \ > l[i + 1] {\n            if m == 1 {\n                return false;\n     \
    \       }\n            m = -1;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
