language: rs
name: HumanEval_80_is_happy
results:
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev_prev {\n            return false;\n        }\n        prev_prev\
    \ = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpx8cs0l0n.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = false;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    let mut\
    \ prev_prev_prev = chars.next();\n    while let Some(c) = chars.next() {\n   \
    \     if prev_prev_prev != Some(c) && prev_prev != Some(c) && prev != Some(c)\
    \ {\n            happy = true;\n        } else {\n            happy = false;\n\
    \            break;\n        }\n        prev_prev_prev = prev_prev;\n        prev_prev\
    \ = prev;\n        prev = Some(c);\n    }\n    happy\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4tjl1nek.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev_char = chars.next();\n\
    \    let mut prev_prev_char = chars.next();\n    for c in chars {\n        if\
    \ prev_char == Some(c) || prev_prev_char == Some(c) {\n            return false;\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = Some(c);\n\
    \    }\n    s.len() >= 3\n}\n\nfn main() {\n    let candidate = is_happy;\n  \
    \  assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut a = chars.next().unwrap();\n\
    \    let mut b = chars.next().unwrap();\n    let mut c = chars.next().unwrap();\n\
    \    for d in chars {\n        if a == b && b == c {\n            return false;\n\
    \        }\n        a = b;\n        b = c;\n        c = d;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpe3a6ahgx.rs:8:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev_prev && c == prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp6bixt542.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while let Some(c) = chars.next() {\n        if prev == curr && curr == next\
    \ {\n            return false;\n        }\n        prev = curr;\n        curr\
    \ = next;\n        next = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpx89y0rr3.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    while\
    \ chars.next().is_some() {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdrbzzubm.rs:19:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut second_last = chars.next();\n    let mut third_last = chars.next();\n\
    \    for c in chars {\n        if last == second_last && second_last == third_last\
    \ {\n            return false;\n        }\n        last = second_last;\n     \
    \   second_last = third_last;\n        third_last = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe13hyqe6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while next != '\\0' {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpja15xfd3.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    let mut last_last_last = chars.next();\n\
    \    for c in chars {\n        if last == last_last && last_last == last_last_last\
    \ {\n            return false;\n        }\n        last = last_last;\n       \
    \ last_last = last_last_last;\n        last_last_last = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzmwwg69t.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next().unwrap();\n\
    \    let mut last_last = chars.next().unwrap();\n    let mut last_last_last =\
    \ chars.next().unwrap();\n    for c in chars {\n        if last == last_last &&\
    \ last_last == last_last_last {\n            return false;\n        }\n      \
    \  last_last_last = last_last;\n        last_last = last;\n        last = c;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmppukw__nv.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev_prev {\n            return false;\n        }\n        prev_prev\
    \ = prev;\n        prev = c;\n    }\n    s.len() >= 3\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpa6uxypm4.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut middle = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while next != '\\0' {\n        if prev == middle || middle == next || prev\
    \ == next {\n            return false;\n        }\n        prev = middle;\n  \
    \      middle = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_6r0i2ok.rs:8:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let s = s.as_bytes();\n    let len = s.len();\n    if len < 3\
    \ {\n        return false;\n    }\n    for i in 0..len - 2 {\n        if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    let mut happy = true;\n    while happy && chars.next().is_some() {\n    \
    \    happy = prev != next && prev != next_next && next != next_next;\n       \
    \ prev = next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp16n5m_ku.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<_>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6rufeyjb.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let s = s.as_bytes();\n    s.len() >= 3 && s.windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last2 = chars.next();\n    for c in chars {\n        if last == Some(c)\
    \ || last2 == Some(c) {\n            return false;\n        }\n        last =\
    \ last2;\n        last2 = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxg8grocx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last_char = chars.next().unwrap();\n\
    \    let mut last_last_char = chars.next().unwrap();\n    for c in chars {\n \
    \       if c == last_char || c == last_last_char {\n            return false;\n\
    \        }\n        last_last_char = last_char;\n        last_char = c;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpvw7iw178.rs:8:43

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<_>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6rufeyjb.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next().unwrap();\n\
    \    let mut last_last = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == last || c == last_last {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpjyd4e1yw.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut iter = s.chars();\n    let mut a = iter.next().unwrap();\n\
    \    let mut b = iter.next().unwrap();\n    let mut c = iter.next().unwrap();\n\
    \    for d in iter {\n        if a == b && b == c {\n            return false;\n\
    \        }\n        a = b;\n        b = c;\n        c = d;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp1d6crf1z.rs:8:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || first == third || second\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    for c in\
    \ chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n            happy\
    \ = false;\n            break;\n        }\n        prev_prev = prev;\n       \
    \ prev = Some(c);\n    }\n    happy && s.len() >= 3\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 1
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.len() < 3 {\n      \
    \  return false;\n    }\n    let mut prev = chars.next().unwrap();\n    let mut\
    \ prev_prev = chars.next().unwrap();\n    for c in chars {\n        if c == prev\
    \ || c == prev_prev {\n            return false;\n        }\n        prev_prev\
    \ = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmp8kb54cta.rs:7:14\n  |\n7 |     if chars.len() < 3 {\n  |\
    \              ^^^ method not found in `Chars<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while next != '\\0' {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpgcr9u_d2.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut last_char = chars.next().unwrap();\n    let mut last_last_char\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == last_char ||\
    \ c == last_last_char {\n            return false;\n        }\n        last_last_char\
    \ = last_char;\n        last_char = c;\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    let mut last_last_last = chars.next();\n\
    \    while let Some(c) = chars.next() {\n        if last == last_last && last_last\
    \ == last_last_last {\n            return false;\n        }\n        last = last_last;\n\
    \        last_last = last_last_last;\n        last_last_last = Some(c);\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo0jst6k6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || first == third || second\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while let Some(n) = chars.next() {\n        if prev == curr || curr == next\
    \ || prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = n;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp9ezs0bxl.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while let Some(c) = chars.next() {\n        if prev == curr && curr == next\
    \ {\n            return false;\n        }\n        prev = curr;\n        curr\
    \ = next;\n        next = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpx89y0rr3.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev_prev && c == prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp6bixt542.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut a = chars.next().unwrap();\n\
    \    let mut b = chars.next().unwrap();\n    let mut c = chars.next().unwrap();\n\
    \    for c in chars {\n        if a == b && b == c {\n            return false;\n\
    \        }\n        a = b;\n        b = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpzexgbdyh.rs:8:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev && c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpijs0hhxh.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if c ==\
    \ last.unwrap() || c == last_last.unwrap() {\n            return false;\n    \
    \    }\n        last_last = last;\n        last = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpot04vo_v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut prev_prev_prev =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == prev_prev &&\
    \ prev == prev_prev_prev {\n            return false;\n        }\n        prev_prev_prev\
    \ = prev_prev;\n        prev_prev = prev;\n        prev = c;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_2ru5zqe.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    let mut curr = chars.next().unwrap();\n\
    \    while let Some(c) = chars.next() {\n        if prev == prev_prev && prev\
    \ == curr {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = curr;\n        curr = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpxi9a7fiy.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut last = chars.next().unwrap();\n    let mut last_last\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == last || c ==\
    \ last_last {\n            return false;\n        }\n        last_last = last;\n\
    \        last = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if let Some(a) = chars.next()\
    \ {\n        if let Some(b) = chars.next() {\n            if let Some(c) = chars.next()\
    \ {\n                if a != b && b != c && a != c {\n                    for\
    \ c in chars {\n                        if c == a || c == b {\n              \
    \              return false;\n                        }\n                    }\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpigh1n6ie.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n\
    \    while chars.next().is_some() {\n        if prev == curr || curr == next ||\
    \ prev == next {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphfyuflwt.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev2 =\
    \ chars.next().unwrap();\n    for c in chars {\n        if c == prev || c == prev2\
    \ {\n            return false;\n        }\n        prev2 = prev;\n        prev\
    \ = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n   \
    \ assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(c) = third {\n        if first == second || second == third || first\
    \ == third {\n            return false;\n        }\n        first = second;\n\
    \        second = third;\n        third = chars.next();\n    }\n    s.len() >=\
    \ 3\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpdfh3etxa.rs:8:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut last = chars.next().unwrap();\n    let mut last_last\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == last_last {\n\
    \            return false;\n        }\n        last_last = last;\n        last\
    \ = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n   \
    \ assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxqmpcz_3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n\
    \    let mut next = chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n\
    \    while next_next != '\\0' {\n        if prev == next || next == next_next\
    \ || prev == next_next {\n            return false;\n        }\n        prev =\
    \ next;\n        next = next_next;\n        next_next = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpf66hfi4u.rs:8:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749354
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut s = s.chars().collect::<Vec<_>>();\n    s.sort();\n \
    \   s.dedup();\n    s.len() >= 3\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1o453x3l.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749355
- exit_code: 101
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl5lyoogd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749354
- exit_code: 0
  program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<_>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749354
