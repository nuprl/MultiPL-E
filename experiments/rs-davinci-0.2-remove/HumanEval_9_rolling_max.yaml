name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
completions: ["    let mut result = Vec::new();\n    let mut max = numbers[0];\n \
    \   result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut max_so_far = std::isize::MIN;\n    let mut result = Vec::new();\n\
    \n    for number in numbers {\n        max_so_far = std::cmp::max(max_so_far,\
    \ number);\n        result.push(max_so_far);\n    }\n\n    result", "    let mut\
    \ max_numbers = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        if number > max {\n            max = number;\n       \
    \ }\n        max_numbers.push(max);\n    }\n    max_numbers", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for n in numbers {\n\
    \        max = max.max(n);\n        result.push(max);\n    }\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\
    \n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far {\n    \
    \        max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n \
    \   let mut result = Vec::new();\n    result.push(max);\n\n    for number in numbers.iter().skip(1)\
    \ {\n        if *number > max {\n            max = *number;\n        }\n     \
    \   result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = 0;\n    for number in numbers {\n        if number > max {\n\
    \            max = number;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        max = std::cmp::max(max, number);\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\n  \
    \  result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for number in numbers.iter().skip(1) {\n       \
    \ if *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for number in numbers.iter().skip(1) {\n       \
    \ if *number > max {\n            max = *number;\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut rolling_max = Vec::new();\n    let mut max\
    \ = numbers[0];\n    rolling_max.push(max);\n    for number in numbers.iter().skip(1)\
    \ {\n        if *number > max {\n            max = *number;\n        }\n     \
    \   rolling_max.push(max);\n    }\n    rolling_max", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = isize::min_value();\n\n    for number in numbers {\n      \
    \  max = max.max(number);\n        result.push(max);\n    }\n\n    result", " \
    \   let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for number in numbers.iter().skip(1) {\n        if number > &max {\n    \
    \        max = *number;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\
    \n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max_so_far.max(*number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max_so_far = 0;\n    for number in numbers {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n        }\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push(max_so_far);\n    }\n\n    result", "    let mut\
    \ max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for\
    \ number in numbers.iter().skip(1) {\n        max_so_far = max_so_far.max(*number);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut max_so_far = std::isize::MIN;\n\
    \    let mut result = Vec::new();\n\n    for number in numbers {\n        max_so_far\
    \ = std::cmp::max(max_so_far, number);\n        result.push(max_so_far);\n   \
    \ }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_so_far {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max_so_far.max(*number);\n        result.push(max_so_far);\n    }\n\n    result",
  "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        max = std::cmp::max(max, number);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for n in numbers.iter().skip(1)\
    \ {\n        if n > &max_so_far {\n            max_so_far = *n;\n        }\n \
    \       result.push(max_so_far);\n    }\n\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n    for i\
    \ in 1..numbers.len() {\n        max = max.max(numbers[i]);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::with_capacity(numbers.len());\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for number in\
    \ numbers.iter().skip(1) {\n        if *number > max {\n            max = *number;\n\
    \        }\n        result.push(max);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for number in numbers {\n        max\
    \ = std::cmp::max(max, number);\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        max = std::cmp::max(max, number);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for n in numbers {\n        if n > max\
    \ {\n            max = n;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n \
    \   let mut max = isize::min_value();\n\n    for number in numbers {\n       \
    \ max = max.max(number);\n        result.push(max);\n    }\n\n    result", " \
    \   let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n \
    \   let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for n in numbers {\n        if n > max\
    \ {\n            max = n;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n\
    \    for number in numbers.iter().skip(1) {\n        max_so_far = std::cmp::max(max_so_far,\
    \ *number);\n        result.push(max_so_far);\n    }\n\n    result", "    let\
    \ mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max = std::isize::MIN;\n    let mut result = Vec::new();\n    for\
    \ n in numbers {\n        if n > max {\n            max = n;\n        }\n    \
    \    result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for number in numbers {\n        if number\
    \ > max {\n            max = number;\n        }\n        result.push(max);\n \
    \   }\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n \
    \       }\n        result.push(max_so_far);\n    }\n\n    result", "    let mut\
    \ result = Vec::with_capacity(numbers.len());\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = 0;\n    for number in numbers {\n        if\
    \ number > max {\n            max = number;\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in numbers\
    \ {\n        max = std::cmp::max(max, number);\n        result.push(max);\n  \
    \  }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max_so_far.max(*number);\n        result.push(max_so_far);\n    }\n\n    result",
  "    let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n      \
    \  result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for number in numbers {\n        max\
    \ = std::cmp::max(max, number);\n        result.push(max);\n    }\n    result",
  "    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n\
    \    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut result =\
    \ Vec::with_capacity(numbers.len());\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n \
    \   let mut max = isize::min_value();\n\n    for n in numbers {\n        max =\
    \ max.max(n);\n        result.push(max);\n    }\n\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n    for\
    \ i in 1..numbers.len() {\n        max = std::cmp::max(max, numbers[i]);\n   \
    \     result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut current_max = isize::min_value();\n\n    for number\
    \ in numbers {\n        if number > current_max {\n            current_max = number;\n\
    \        }\n\n        result.push(current_max);\n    }\n\n    result", "    let\
    \ mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = vec![];\n    for number\
    \ in numbers {\n        max_so_far = max(max_so_far, number);\n        result.push(max_so_far);\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_so_far {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut rolling_max = Vec::new();\n    let mut max\
    \ = numbers[0];\n    rolling_max.push(max);\n    for i in 1..numbers.len() {\n\
    \        max = max.max(numbers[i]);\n        rolling_max.push(max);\n    }\n \
    \   rolling_max", "    let mut rolling_max = Vec::new();\n    let mut max = numbers[0];\n\
    \    rolling_max.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        rolling_max.push(max);\n\
    \    }\n    rolling_max", "    let mut max = numbers[0];\n    let mut result =\
    \ Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len() {\n    \
    \    if numbers[i] > max {\n            max = numbers[i];\n        }\n       \
    \ result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for number in numbers {\n        max\
    \ = std::cmp::max(max, number);\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n \
    \   let mut max = isize::min_value();\n\n    for number in numbers {\n       \
    \ max = max.max(number);\n        result.push(max);\n    }\n\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\
    \n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n    result", "    let mut rolling_max: Vec<isize>\
    \ = Vec::new();\n    let mut max = numbers[0];\n    rolling_max.push(max);\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        rolling_max.push(max);\n    }\n    rolling_max",
  "    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n\
    \    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max = isize::min_value();\n\n    for number in numbers\
    \ {\n        if number > max {\n            max = number;\n        }\n\n     \
    \   result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = isize::min_value();\n\n    for number in numbers {\n      \
    \  max = max.max(number);\n        result.push(max);\n    }\n\n    result", " \
    \   let mut rolling_max = Vec::new();\n    let mut max = numbers[0];\n    rolling_max.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ rolling_max.push(max);\n    }\n    rolling_max", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n\n\
    \    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n\n    result", "    let mut\
    \ max_so_far = numbers[0];\n    let mut rolling_max = vec![max_so_far];\n\n  \
    \  for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        rolling_max.push(max_so_far);\n    }\n\n    rolling_max", "    let mut\
    \ result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in\
    \ numbers {\n        max = std::cmp::max(max, number);\n        result.push(max);\n\
    \    }\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        max = std::cmp::max(max,\
    \ numbers[i]);\n        result.push(max);\n    }\n\n    result", "    let mut\
    \ result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n      \
    \  result.push(max);\n    }\n\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max_so_far.max(*number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = max_so_far.max(*number);\n        result.push(max_so_far);\n    }\n\n    result",
  "    let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\
    \n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for number in\
    \ numbers.iter().skip(1) {\n        if *number > max {\n            max = *number;\n\
    \        }\n        result.push(max);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max = std::isize::MIN;\n    let mut result\
    \ = Vec::new();\n    for n in numbers {\n        if n > max {\n            max\
    \ = n;\n        }\n        result.push(max);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    result", " \
    \   let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for\
    \ number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = isize::min_value();\n\n    for number in numbers\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n\n    result",
  "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        if number > max {\n            max = number;\n       \
    \ }\n        result.push(max);\n    }\n    result", "    let mut max_so_far =\
    \ numbers[0];\n    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        if number > &max_so_far {\n            max_so_far = *number;\n  \
    \      }\n        result.push(max_so_far);\n    }\n\n    result", "    let mut\
    \ max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for i in 1..numbers.len() {\n        if numbers[i] > max {\n           \
    \ max = numbers[i];\n        }\n        result.push(max);\n    }\n\n    result",
  "    let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for number in numbers.iter().skip(1) {\n        if *number > max {\n   \
    \         max = *number;\n        }\n        result.push(max);\n    }\n\n    result",
  "    let mut result = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n\
    \    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n       \
    \ result.push(max);\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n \
    \       max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = std::cmp::max(max, n);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max = 0;\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in numbers\
    \ {\n        max = std::cmp::max(max, number);\n        result.push(max);\n  \
    \  }\n    result", "    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far = max(max_so_far,\
    \ numbers[i]);\n        result.push(max_so_far);\n    }\n\n    result", "    let\
    \ mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n   \
    \ for i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max = isize::min_value();\n\n    for number in numbers\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n\n    result",
  "    let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for i in 1..numbers.len() {\n        max = std::cmp::max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for n in numbers {\n        max = std::cmp::max(max,\
    \ n);\n        result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n\
    \    let mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = 0;\n    for number in numbers {\n        if number > max {\n\
    \            max = number;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n    for number\
    \ in numbers {\n        if number > max {\n            max = number;\n       \
    \ }\n        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        max = max.max(numbers[i]);\n        result.push(max);\n    }\n  \
    \  result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n\n        result.push(max);\n    }\n\n    result", "    let mut max\
    \ = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n\n    result", " \
    \   let mut max = numbers[0];\n    let mut result = Vec::new();\n    result.push(max);\n\
    \n    for i in 1..numbers.len() {\n        if numbers[i] > max {\n           \
    \ max = numbers[i];\n        }\n        result.push(max);\n    }\n\n    result",
  "    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n\
    \    for number in numbers.iter().skip(1) {\n        max_so_far = max_so_far.max(*number);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n    for i\
    \ in 1..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = isize::min_value();\n\n    for number in numbers\
    \ {\n        max = max.max(number);\n        result.push(max);\n    }\n\n    result",
  "    let mut max = 0;\n    let mut result = Vec::new();\n    for number in numbers\
    \ {\n        if number > max {\n            max = number;\n        }\n       \
    \ result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n    let\
    \ mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        max = std::cmp::max(max, numbers[i]);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max_numbers = Vec::new();\n    let mut max\
    \ = numbers[0];\n    max_numbers.push(max);\n    for i in 1..numbers.len() {\n\
    \        max = max.max(numbers[i]);\n        max_numbers.push(max);\n    }\n \
    \   max_numbers", "    let mut max_so_far = numbers[0];\n    let mut result =\
    \ vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_so_far {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for number in numbers.iter().skip(1) {\n        max_so_far\
    \ = std::cmp::max(max_so_far, *number);\n        result.push(max_so_far);\n  \
    \  }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n    for\
    \ i in 1..numbers.len() {\n        max = std::cmp::max(max, numbers[i]);\n   \
    \     result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = std::isize::MIN;\n    for n in numbers {\n        if n > max\
    \ {\n            max = n;\n        }\n        result.push(max);\n    }\n    result",
  "    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n\
    \    for number in numbers.iter().skip(1) {\n        max_so_far = max_so_far.max(*number);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_so_far {\n            max_so_far = numbers[i];\n        }\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for &number in numbers.iter().skip(1) {\n      \
    \  if number > max {\n            max = number;\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max = 0;\n    let mut result = Vec::new();\n\
    \    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = numbers[0];\n    result.push(max);\n    for\
    \ i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n \
    \       max_so_far = std::cmp::max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n\n        result.push(max);\n    }\n\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in numbers\
    \ {\n        max = std::cmp::max(max, number);\n        result.push(max);\n  \
    \  }\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        if number > max {\n            max = number;\n\
    \        }\n\n        result.push(max);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut max_so_far = std::isize::MIN;\n    let mut rolling_max\
    \ = Vec::new();\n\n    for number in numbers {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n        }\n\n        rolling_max.push(max_so_far);\n\
    \    }\n\n    rolling_max", "    let mut result = Vec::new();\n    let mut max\
    \ = 0;\n    for n in numbers {\n        if n > max {\n            max = n;\n \
    \       }\n        result.push(max);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max = std::isize::MIN;\n    for number in numbers\
    \ {\n        max = std::cmp::max(max, number);\n        result.push(max);\n  \
    \  }\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        max = max.max(numbers[i]);\n\
    \        result.push(max);\n    }\n\n    result", "    let mut result = Vec::new();\n\
    \    let mut max = numbers[0];\n    result.push(max);\n    for &number in numbers.iter().skip(1)\
    \ {\n        if number > max {\n            max = number;\n        }\n       \
    \ result.push(max);\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for number in numbers.iter().skip(1)\
    \ {\n        max_so_far = max_so_far.max(*number);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for n in numbers {\n        max = std::cmp::max(max, n);\n        result.push(max);\n\
    \    }\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = std::isize::MIN;\n\
    \    for number in numbers {\n        max = std::cmp::max(max, number);\n    \
    \    result.push(max);\n    }\n    result", "    let mut max = numbers[0];\n \
    \   let mut result = Vec::new();\n    result.push(max);\n\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n\
    \        result.push(max);\n    }\n\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n \
    \       max_so_far = max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = isize::min_value();\n\
    \n    for number in numbers {\n        max = max.max(number);\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max = numbers[0];\n    let mut result = Vec::new();\n\
    \    result.push(max);\n\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n\n    result", "    let mut max_so_far = numbers[0];\n    let mut result\
    \ = vec![max_so_far];\n\n    for i in 1..numbers.len() {\n        max_so_far =\
    \ max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n\n  \
    \  result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max = numbers[0];\n\
    \    result.push(max);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut max_so_far\
    \ = numbers[0];\n    result.push(max_so_far);\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push(max_so_far);\n    }\n    result", "    let mut\
    \ max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for\
    \ i in 1..numbers.len() {\n        max_so_far = max(max_so_far, numbers[i]);\n\
    \        result.push(max_so_far);\n    }\n\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut result = vec![max_so_far];\n\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_so_far {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push(max_so_far);\n    }\n\n    result"]
stop_tokens:
- "\n}"
