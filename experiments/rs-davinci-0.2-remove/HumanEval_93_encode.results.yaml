language: rs
name: HumanEval_93_encode
results:
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let c = match c {\n            'a' => 'c',\n            'e' => 'g',\n\
    \            'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n \
    \           'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n  \
    \          'O' => 'Q',\n            'U' => 'Y',\n            _ => c,\n       \
    \ };\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n    let\
    \ candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TGST\"`,\n right: `\"tgst\"`', /tmp/tmp3i24m3yb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        let mut encoded_char = c;\n        if c.is_alphabetic() {\n     \
    \       if c.is_lowercase() {\n                encoded_char = c.to_uppercase().next().unwrap();\n\
    \            } else {\n                encoded_char = c.to_lowercase().next().unwrap();\n\
    \            }\n            if c == 'a' {\n                encoded_char = 'c';\n\
    \            } else if c == 'e' {\n                encoded_char = 'g';\n     \
    \       } else if c == 'i' {\n                encoded_char = 'k';\n          \
    \  } else if c == 'o' {\n                encoded_char = 'q';\n            } else\
    \ if c == 'u' {\n                encoded_char = 'y';\n            }\n        }\n\
    \        encoded_message.push(encoded_char);\n    }\n    encoded_message\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp2_zlaumz.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push(vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5]);\n        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqpjhf_e9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           encoded.push(vowels[(index + 2) % vowels.len()]);\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpdw75shee.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c.to_ascii_lowercase();\n        if c == 'a' {\n    \
    \        c = 'c';\n        } else if c == 'e' {\n            c = 'g';\n      \
    \  } else if c == 'i' {\n            c = 'k';\n        } else if c == 'o' {\n\
    \            c = 'q';\n        } else if c == 'u' {\n            c = 'y';\n  \
    \      } else if c == 'y' {\n            c = 'a';\n        } else if c == 'z'\
    \ {\n            c = 'b';\n        } else if c.is_ascii_alphabetic() {\n     \
    \       c = (c as u8 + 2) as char;\n        }\n        encoded.push(c);\n    }\n\
    \    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpkyal0r4u.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_lowercase() {\n            c = c.to_uppercase().next().unwrap();\n\
    \        } else if c.is_uppercase() {\n            c = c.to_lowercase().next().unwrap();\n\
    \        }\n        if c == 'a' {\n            c = 'c';\n        } else if c ==\
    \ 'e' {\n            c = 'g';\n        } else if c == 'i' {\n            c = 'k';\n\
    \        } else if c == 'o' {\n            c = 'q';\n        } else if c == 'u'\
    \ {\n            c = 'w';\n        }\n        encoded.push(c);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpsd8agrpx.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut iter = message.chars();\n\
    \    while let Some(c) = iter.next() {\n        if c.is_alphabetic() {\n     \
    \       if c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp_u6ou9h7.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        match c {\n       \
    \     'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n     \
    \       'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n   \
    \         'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n \
    \           _ => encoded.push(c),\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpc4d06elt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 0
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut iter = message.chars();\n\
    \    while let Some(c) = iter.next() {\n        let mut c = c;\n        if c.is_ascii_lowercase()\
    \ {\n            c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase()\
    \ {\n            c = c.to_ascii_lowercase();\n        }\n        if c == 'a' {\n\
    \            c = 'c';\n        } else if c == 'e' {\n            c = 'g';\n  \
    \      } else if c == 'i' {\n            c = 'k';\n        } else if c == 'o'\
    \ {\n            c = 'q';\n        } else if c == 'u' {\n            c = 'w';\n\
    \        } else if c == 'A' {\n            c = 'C';\n        } else if c == 'E'\
    \ {\n            c = 'G';\n        } else if c == 'I' {\n            c = 'K';\n\
    \        } else if c == 'O' {\n            c = 'Q';\n        } else if c == 'U'\
    \ {\n            c = 'W';\n        }\n        encoded.push(c);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_alphabetic() {\n          \
    \  c = c.to_ascii_lowercase();\n            if c == 'a' {\n                c =\
    \ 'c';\n            } else if c == 'e' {\n                c = 'g';\n         \
    \   } else if c == 'i' {\n                c = 'k';\n            } else if c ==\
    \ 'o' {\n                c = 'q';\n            } else if c == 'u' {\n        \
    \        c = 'y';\n            } else {\n                c = ((c as u8) + 2) as\
    \ char;\n            }\n        }\n        encoded.push(c);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpezjy4q5m.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_index =\
    \ 0;\n    let mut alphabet_index_next = 0;\n    let mut alphabet_index_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next = 0;\n    let mut alphabet_index_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next = 0;\n    let mut\
    \ alphabet_index_next_next_next_next_next_next = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next = 0;\n\
    \    let mut alphabet_index_next_next_next_next_next_next_next_next_next = 0;\n\
    \    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxatvtxtn.rs:27:88\n   |\n\
    27 |     let mut alphabet_index_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    \   |                                                                        \
    \                ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxatvtxtn.rs:7:31\n  |\n7 | fn encode(message:\
    \ String) -> String {\n  |    ------                     ^^^^^^ expected struct\
    \ `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpiyjsk74f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut index = 0;\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut is_vowel = false;\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \      if vowels.contains(&c) {\n            is_vowel = true;\n        }\n   \
    \     if is_vowel {\n            if index == 2 {\n                encoded.pop();\n\
    \                encoded.push(vowels[0]);\n                is_vowel = false;\n\
    \            } else if index == 4 {\n                encoded.pop();\n        \
    \        encoded.push(vowels[1]);\n                is_vowel = false;\n       \
    \     } else if index == 6 {\n                encoded.pop();\n               \
    \ encoded.push(vowels[2]);\n                is_vowel = false;\n            } else\
    \ if index == 8 {\n                encoded.pop();\n                encoded.push(vowels[3]);\n\
    \                is_vowel = false;\n            } else if index == 10 {\n    \
    \            encoded.pop();\n                encoded.push(vowels[4]);\n      \
    \          is_vowel = false;\n            }\n            index += 1;\n       \
    \ }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp8m4ss8ae.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut new_char = c;\n        if c.is_alphabetic() {\n         \
    \   new_char = match c {\n                'a' => 'c',\n                'e' =>\
    \ 'g',\n                'i' => 'k',\n                'o' => 'q',\n           \
    \     'u' => 'y',\n                _ => c,\n            };\n            if c.is_uppercase()\
    \ {\n                new_char = new_char.to_lowercase().next().unwrap();\n   \
    \         } else {\n                new_char = new_char.to_uppercase().next().unwrap();\n\
    \            }\n        }\n        encoded.push(new_char);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp84j9n0wb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpehgh5eko.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push(vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5]);\n        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqpjhf_e9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpdybvjw7v.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_lowercase().next().unwrap();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpowchnv1t.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut new_char = c;\n        if c.is_alphabetic() {\n         \
    \   new_char = match c {\n                'a' => 'c',\n                'e' =>\
    \ 'g',\n                'i' => 'k',\n                'o' => 'q',\n           \
    \     'u' => 'y',\n                _ => c.to_ascii_uppercase(),\n            };\n\
    \        }\n        encoded.push(new_char);\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp311wazug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           result.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                result.push(c.to_uppercase().next().unwrap());\n        \
    \    }\n        } else {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpwqd7q8df.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    for c in message.chars() {\n        if c.is_alphabetic() {\n  \
    \          if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(c) {\n      \
    \      let mut index = vowels.find(c).unwrap();\n            index += 2;\n   \
    \         if index > 4 {\n                index -= 5;\n            }\n       \
    \     encoded.replace(c, vowels.chars().nth(index).unwrap());\n        }\n   \
    \ }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp41jeg4qv.rs:28:32\n   |\n\
    28 |             encoded.replace(c, vowels.chars().nth(index).unwrap());\n   |\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(&c) {\n     \
    \       encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n  \
    \  let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `encoded` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpip4wuoiw.rs:23:13\n   |\n21 |     for c in encoded.chars()\
    \ {\n   |              ---------------\n   |              |\n   |            \
    \  immutable borrow occurs here\n   |              immutable borrow later used\
    \ here\n22 |         if vowels.contains(&c) {\n23 |             encoded.push(c);\n\
    \   |             ^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut i = 0;\n\
    \    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n\
    \    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n\
    \    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n\
    \    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut e = 0;\n    let mut i = 0;\n\
    \    let mut o = 0;\n    let mut u = 0;\n    let mut A = 0;\n    let mut E = 0;\n\
    \    let mut I = 0;\n    let mut O = 0;\n    let mut U = 0;\n    for c in message.chars()\
    \ {\n        if c == 'a' {\n            a += 1;\n            if a % 2 == 0 {\n\
    \                encoded_message.push('c');\n            } else {\n          \
    \      encoded_message.push('c');\n            }\n        } else if c == 'b' {\n\
    \            b += 1;\n            if b % 2 == 0 {\n                encoded_message.push('d');\n\
    \            } else {\n                encoded_message.push('D');\n          \
    \  }\n        } else if c == 'c' {\n            c += 1;\n            if c % 2\
    \ == 0 {\n                encoded_message.push('e');\n            } else {\n \
    \               encoded_message.push('E');\n            }\n        } else if c\
    \ == 'd' {\n            d += 1;\n            if d % 2 == 0 {\n               \
    \ encoded_message.push('f');\n            } else {\n                encoded_message.push('F');\n\
    \            }\n        } else if c == 'e' {\n            e += 1;\n          \
    \  if e % 2 == 0 {\n                encoded_message.push('g');\n            }\
    \ else {\n                encoded_message.push('G');\n}\n\nfn main() {\n    let\
    \ candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn83x83c7.rs:81:3\n\
    \   |\n7  | fn encode(message: String) -> String {\n   |                     \
    \                 - unclosed delimiter\n...\n37 |     for c in message.chars()\
    \ {\n   |                              - unclosed delimiter\n...\n66 |       \
    \  } else if c == 'e' {\n   |                            - unclosed delimiter\n\
    ...\n70 |             } else {\n   |                    - this delimiter might\
    \ not be properly closed...\n71 |                 encoded_message.push('G');\n\
    72 | }\n   | - ...as it matches this but it has different indentation\n...\n81\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpn83x83c7.rs:46:13\n\
    \   |\n46 |             b += 1;\n   |             ^ help: a local variable with\
    \ a similar name exists: `A`\n\nerror[E0425]: cannot find value `b` in this scope\n\
    \  --> /tmp/tmpn83x83c7.rs:47:16\n   |\n47 |             if b % 2 == 0 {\n   |\
    \                ^ help: a local variable with a similar name exists: `A`\n\n\
    error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpn83x83c7.rs:60:13\n\
    \   |\n60 |             d += 1;\n   |             ^ help: a local variable with\
    \ a similar name exists: `A`\n\nerror[E0425]: cannot find value `d` in this scope\n\
    \  --> /tmp/tmpn83x83c7.rs:61:16\n   |\n61 |             if d % 2 == 0 {\n   |\
    \                ^ help: a local variable with a similar name exists: `A`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `char`\n\
    \  --> /tmp/tmpn83x83c7.rs:53:13\n   |\n53 |             c += 1;\n   |       \
    \      -^^^^^\n   |             |\n   |             cannot use `+=` on type `char`\n\
    \nerror[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmpn83x83c7.rs:54:18\n\
    \   |\n54 |             if c % 2 == 0 {\n   |                - ^ - {integer}\n\
    \   |                |\n   |                char\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn83x83c7.rs:37:5\n   |\n7  |   fn encode(message: String) -> String\
    \ {\n   |                                 ------ expected `String` because of\
    \ return type\n...\n37 | /     for c in mes"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpshxza01n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        let mut encoded_char = c;\n        if c.is_alphabetic() {\n     \
    \       if c.is_lowercase() {\n                encoded_char = c.to_uppercase().next().unwrap();\n\
    \            } else {\n                encoded_char = c.to_lowercase().next().unwrap();\n\
    \            }\n            if c == 'a' {\n                encoded_char = 'c';\n\
    \            } else if c == 'e' {\n                encoded_char = 'g';\n     \
    \       } else if c == 'i' {\n                encoded_char = 'k';\n          \
    \  } else if c == 'o' {\n                encoded_char = 'q';\n            } else\
    \ if c == 'u' {\n                encoded_char = 'y';\n            }\n        }\n\
    \        encoded_message.push(encoded_char);\n    }\n    encoded_message\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp2_zlaumz.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".chars();\n    let mut vowels = \"aeiou\".chars();\n\
    \    for c in message.chars() {\n        if c.is_alphabetic() {\n            if\
    \ c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.find(c).is_some() {\n\
    \            let mut new_vowel = alphabet.clone();\n            for _ in 0..2\
    \ {\n                new_vowel.next();\n            }\n            encoded = encoded.replace(c,\
    \ new_vowel.next().unwrap());\n        }\n    }\n    encoded\n}\n\nfn main() {\n\
    \    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(&char,)>` closure, found `char`\n  -->\
    \ /tmp/tmpajny09i7.rs:23:24\n   |\n23 |         if vowels.find(c).is_some() {\n\
    \   |                        ^ expected an `FnMut<(&char,)>` closure, found `char`\n\
    \   |\n   = help: the trait `for<'r> FnMut<(&'r char,)>` is not implemented for\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpajny09i7.rs:28:42\n\
    \   |\n28 |             encoded = encoded.replace(c, new_vowel.next().unwrap());\n\
    \   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_lowercase() {\n            c = c.to_uppercase().next().unwrap();\n\
    \        } else if c.is_uppercase() {\n            c = c.to_lowercase().next().unwrap();\n\
    \        }\n        match c {\n            'a' => encoded.push('c'),\n       \
    \     'e' => encoded.push('g'),\n            'i' => encoded.push('k'),\n     \
    \       'o' => encoded.push('q'),\n            'u' => encoded.push('s'),\n   \
    \         'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n \
    \           'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            _ => encoded.push(c),\n  \
    \      }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mSDCSKR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmp8e0i1qv4.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&x| x == c).unwrap();\n\
    \            index += 2;\n            if index > 4 {\n                index -=\
    \ 5;\n            }\n            encoded_message.push(vowels[index]);\n      \
    \  } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp1yiwr7nx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        match c {\n       \
    \     'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n     \
    \       'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n   \
    \         'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n \
    \           _ => encoded.push(c),\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpc4d06elt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'a' {\n   \
    \         c = 'c';\n        } else if c == 'e' {\n            c = 'g';\n     \
    \   } else if c == 'i' {\n            c = 'k';\n        } else if c == 'o' {\n\
    \            c = 'q';\n        } else if c == 'u' {\n            c = 'w';\n  \
    \      }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n   \
    \ let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpyl4c5ayc.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'A' {\n   \
    \         c = 'C';\n        } else if c == 'E' {\n            c = 'G';\n     \
    \   } else if c == 'I' {\n            c = 'K';\n        } else if c == 'O' {\n\
    \            c = 'Q';\n        } else if c == 'U' {\n            c = 'W';\n  \
    \      } else if c == 'Y' {\n            c = 'A';\n        } else if c == 'C'\
    \ {\n            c = 'E';\n        } else if c == 'G' {\n            c = 'I';\n\
    \        } else if c == 'K' {\n            c = 'O';\n        } else if c == 'Q'\
    \ {\n            c = 'U';\n        } else if c == 'W' {\n            c = 'Y';\n\
    \        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpmlkvby9q.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_lowercase() {\n            c = c.to_uppercase().next().unwrap();\n\
    \        } else if c.is_uppercase() {\n            c = c.to_lowercase().next().unwrap();\n\
    \        }\n        match c {\n            'a' => encoded.push('c'),\n       \
    \     'e' => encoded.push('g'),\n            'i' => encoded.push('k'),\n     \
    \       'o' => encoded.push('q'),\n            'u' => encoded.push('s'),\n   \
    \         'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n \
    \           'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n\
    \            'U' => encoded.push('S'),\n            _ => encoded.push(c),\n  \
    \      }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mSDCSKR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmp8e0i1qv4.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let next_index = (index + 2) % vowels.len();\n            encoded.push(vowels[next_index]);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpj33zumcx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmphfk9kng0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut new_char = c as u8 + 2;\n            if new_char > 'u'\
    \ as u8 {\n                new_char -= 5;\n            }\n            encoded_message.push(new_char\
    \ as char);\n        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpkbxpp35t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_uppercase() {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmplg0sk6if.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    message.chars().map(|c| {\n        match c {\n            'a'\
    \ => 'c',\n            'e' => 'g',\n            'i' => 'k',\n            'o' =>\
    \ 'q',\n            'u' => 'y',\n            'A' => 'C',\n            'E' => 'G',\n\
    \            'I' => 'K',\n            'O' => 'Q',\n            'U' => 'Y',\n \
    \           _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TGST\"`,\n right: `\"tgst\"`', /tmp/tmpjk3gh8g2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpm1nkayg5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    for c in encoded.chars() {\n\
    \        if vowels.contains(&c) {\n            encoded.push(c);\n        }\n \
    \   }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `encoded` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp2e9pqkg4.rs:21:13\n   |\n19 |     for c in encoded.chars()\
    \ {\n   |              ---------------\n   |              |\n   |            \
    \  immutable borrow occurs here\n   |              immutable borrow later used\
    \ here\n20 |         if vowels.contains(&c) {\n21 |             encoded.push(c);\n\
    \   |             ^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    for c in message.chars() {\n        if c.is_ascii_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_uppercase()\
    \ {\n                c = c.to_ascii_lowercase();\n            } else {\n     \
    \           c = c.to_ascii_uppercase();\n            }\n            if vowels.contains(c)\
    \ {\n                let index = vowels.find(c).unwrap();\n                c =\
    \ vowels.chars().nth(index + 2).unwrap();\n            }\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpvv0v3x_f.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        let mut c = c;\n        if c.is_alphabetic()\
    \ {\n            c = c.to_ascii_lowercase();\n            if c == 'z' {\n    \
    \            c = 'b';\n            } else if c == 'y' {\n                c = 'a';\n\
    \            } else {\n                c = ((c as u8) + 2) as char;\n        \
    \    }\n        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpskahup8y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut encoded\
    \ = String::new();\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpuopf0p8v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n  \
    \      if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n        if vowels.contains(&c)\
    \ {\n            encoded.remove(i);\n            encoded.insert(i, vowels[(vowels.iter().position(|&x|\
    \ x == c).unwrap() + 2) % 5]);\n        }\n        i += 1;\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpff4x1vyk.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp91woid93.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut is_upper\
    \ = false;\n    for c in message.chars() {\n        if c.is_uppercase() {\n  \
    \          is_upper = true;\n        } else {\n            is_upper = false;\n\
    \        }\n        let mut encoded_char = c.to_lowercase().next().unwrap();\n\
    \        if encoded_char == 'a' {\n            encoded_char = 'c';\n        }\
    \ else if encoded_char == 'e' {\n            encoded_char = 'g';\n        } else\
    \ if encoded_char == 'i' {\n            encoded_char = 'k';\n        } else if\
    \ encoded_char == 'o' {\n            encoded_char = 'q';\n        } else if encoded_char\
    \ == 'u' {\n            encoded_char = 'y';\n        }\n        if is_upper {\n\
    \            encoded_message.push(encoded_char.to_uppercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(encoded_char);\n        }\n\
    \    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n \
    \   assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n \
    \   assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TGST\"`,\n right: `\"tgst\"`', /tmp/tmpb9m4q49q.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'A' {\n   \
    \         c = 'C';\n        } else if c == 'E' {\n            c = 'G';\n     \
    \   } else if c == 'I' {\n            c = 'K';\n        } else if c == 'O' {\n\
    \            c = 'Q';\n        } else if c == 'U' {\n            c = 'W';\n  \
    \      } else if c == 'Y' {\n            c = 'A';\n        } else if c == 'C'\
    \ {\n            c = 'E';\n        } else if c == 'G' {\n            c = 'I';\n\
    \        } else if c == 'K' {\n            c = 'O';\n        } else if c == 'Q'\
    \ {\n            c = 'U';\n        } else if c == 'W' {\n            c = 'Y';\n\
    \        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpmlkvby9q.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut new_char = c as u8 + 2;\n            if new_char > 'u'\
    \ as u8 {\n                new_char -= 5;\n            }\n            encoded_message.push(new_char\
    \ as char);\n        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpkbxpp35t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let c = if c.is_lowercase() {\n\
    \                c.to_uppercase().next().unwrap()\n            } else {\n    \
    \            c.to_lowercase().next().unwrap()\n            };\n            encoded.push(match\
    \ c {\n                'A' => 'C',\n                'E' => 'G',\n            \
    \    'I' => 'K',\n                'O' => 'Q',\n                'U' => 'W',\n \
    \               'Y' => 'A',\n                _ => c,\n            });\n      \
    \  } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp6w4sm797.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push(vowels[(vowels.iter().position(|&x| x == c).unwrap()\
    \ + 2) % 5]);\n        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmps_615ghb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut new_char = c;\n        if c.is_alphabetic() {\n         \
    \   if c.is_lowercase() {\n                new_char = c.to_uppercase().next().unwrap();\n\
    \            } else {\n                new_char = c.to_lowercase().next().unwrap();\n\
    \            }\n            if c == 'a' {\n                new_char = 'c';\n \
    \           } else if c == 'e' {\n                new_char = 'g';\n          \
    \  } else if c == 'i' {\n                new_char = 'k';\n            } else if\
    \ c == 'o' {\n                new_char = 'q';\n            } else if c == 'u'\
    \ {\n                new_char = 'y';\n            }\n        }\n        encoded.push(new_char);\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpo680dv7i.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            encoded_message.push(vowels[new_index]);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmppzahjtxj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        match c {\n       \
    \     'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n     \
    \       'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n   \
    \         'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n \
    \           _ => encoded.push(c),\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpc4d06elt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".chars();\n    let mut vowels = \"aeiou\".chars();\n\
    \    for c in message.chars() {\n        if c.is_ascii_alphabetic() {\n      \
    \      let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_uppercase()\
    \ {\n                encoded.push(c);\n            } else {\n                if\
    \ vowels.find(c).is_some() {\n                    let mut i = 0;\n           \
    \         while i < 2 {\n                        c = alphabet.next().unwrap();\n\
    \                        i += 1;\n                    }\n                }\n \
    \               encoded.push(c);\n            }\n        } else {\n          \
    \  encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n    let\
    \ candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(&char,)>` closure, found `char`\n  -->\
    \ /tmp/tmp08ktfdt0.rs:17:32\n   |\n17 |                 if vowels.find(c).is_some()\
    \ {\n   |                                ^ expected an `FnMut<(&char,)>` closure,\
    \ found `char`\n   |\n   = help: the trait `for<'r> FnMut<(&'r char,)>` is not\
    \ implemented for `char`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut new_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            new_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            new_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            new_message.push(c);\n        }\n    }\n    new_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpb6v4v1px.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    alphabet.push_str(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    for c in message.chars() {\n        if c.is_lowercase() {\n          \
    \  encoded_message.push(c.to_uppercase().next().unwrap());\n        } else if\
    \ c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for (i, c) in encoded_message.chars().enumerate() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            encoded_message.remove(i);\n\
    \            encoded_message.insert(i, alphabet.chars().nth(i + 2).unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `encoded_message` as mutable because it is\
    \ also borrowed as immutable\n  --> /tmp/tmp3eb6wehg.rs:22:13\n   |\n20 |    \
    \ for (i, c) in encoded_message.chars().enumerate() {\n   |                  \
    \ -----------------------------------\n   |                   |\n   |        \
    \           immutable borrow occurs here\n   |                   immutable borrow\
    \ later used here\n21 |         if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n22 |             encoded_message.remove(i);\n   |           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nerror[E0502]: cannot\
    \ borrow `encoded_message` as mutable because it is also borrowed as immutable\n\
    \  --> /tmp/tmp3eb6wehg.rs:23:13\n   |\n20 |     for (i, c) in encoded_message.chars().enumerate()\
    \ {\n   |                   -----------------------------------\n   |        \
    \           |\n   |                   immutable borrow occurs here\n   |     \
    \              immutable borrow later used here\n...\n23 |             encoded_message.insert(i,\
    \ alphabet.chars().nth(i + 2).unwrap());\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n        }\n        encoded.push(c);\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpln83mm0o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else if c.is_uppercase()\
    \ {\n            encoded.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            encoded.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpskb076u6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp2e56a012.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut iter = message.chars();\n\
    \    while let Some(c) = iter.next() {\n        if c.is_ascii_alphabetic() {\n\
    \            let mut c = c.to_ascii_lowercase();\n            if c == 'z' {\n\
    \                c = 'b';\n            } else if c == 'y' {\n                c\
    \ = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n \
    \           }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpddtycdza.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut is_upper\
    \ = false;\n    for c in message.chars() {\n        if c.is_alphabetic() {\n \
    \           is_upper = c.is_uppercase();\n            let mut encoded_char = c.to_lowercase().next().unwrap();\n\
    \            if encoded_char == 'z' {\n                encoded_char = 'b';\n \
    \           } else if encoded_char == 'u' {\n                encoded_char = 'a';\n\
    \            } else {\n                encoded_char = ((encoded_char as u8) +\
    \ 2) as char;\n            }\n            if is_upper {\n                encoded_message.push(encoded_char.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(encoded_char);\n \
    \           }\n        } else {\n            encoded_message.push(c);\n      \
    \  }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"VGUV\"`,\n right: `\"tgst\"`', /tmp/tmpx5n0w2r3.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(&c) {\n     \
    \       encoded = encoded.replace(c, &vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5].to_string());\n        }\n    }\n    encoded\n}\n\nfn\
    \ main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpyua1vipm.rs:9:9\n\
    \  |\n9 |     let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0506]: cannot assign to `encoded` because it is borrowed\n\
    \    --> /tmp/tmpyua1vipm.rs:23:13\n     |\n21   |     for c in encoded.chars()\
    \ {\n     |              ---------------\n     |              |\n     |      \
    \        borrow of `encoded` occurs here\n     |              borrow later used\
    \ here\n22   |         if vowels.contains(&c) {\n23   |             encoded =\
    \ encoded.replace(c, &vowels[(vowels.iter().position(|&x| x == c).unwrap() + 2)\
    \ % 5].to_string());\n     |             ^^^^^^^ assignment to borrowed `encoded`\
    \ occurs here\n     |\n     = note: borrow occurs due to deref coercion to `str`\n\
    note: deref defined here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0506`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".chars();\n    let mut vowels = \"aeiou\".chars();\n\
    \    let mut vowel_index = 0;\n    let mut alphabet_index = 0;\n    let mut vowel_found\
    \ = false;\n    let mut alphabet_found = false;\n    for c in message.chars()\
    \ {\n        if c.is_lowercase() {\n            for _ in 0..26 {\n           \
    \     if alphabet.next().unwrap() == c {\n                    alphabet_found =\
    \ true;\n                    break;\n                }\n                alphabet_index\
    \ += 1;\n            }\n            if alphabet_found {\n                alphabet_index\
    \ += 2;\n                if alphabet_index > 25 {\n                    alphabet_index\
    \ -= 26;\n                }\n                for _ in 0..alphabet_index {\n  \
    \                  alphabet.next();\n                }\n                encoded.push(alphabet.next().unwrap());\n\
    \                alphabet_index = 0;\n                alphabet_found = false;\n\
    \            }\n        } else if c.is_uppercase() {\n            for _ in 0..26\
    \ {\n                if alphabet.next().unwrap() == c.to_lowercase().next().unwrap()\
    \ {\n                    alphabet_found = true;\n                    break;\n\
    \                }\n                alphabet_index += 1;\n            }\n    \
    \        if alphabet_found {\n                alphabet_index += 2;\n         \
    \       if alphabet_index > 25 {\n                    alphabet_index -= 26;\n\
    \                }\n                for _ in 0..alphabet_index {\n           \
    \         alphabet.next();\n                }\n                encoded.push(alphabet.next().unwrap().to_uppercase().next().unwrap());\n\
    \                alphabet_index = 0;\n                alphabet_found = false;\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqyzm18j6.rs:52:46

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut i = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           i += 2;\n            if i > 4 {\n                i -= 5;\n       \
    \     }\n            encoded.push(vowels[i]);\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c.to_ascii_uppercase());\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp1p_8po1r.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n    \
    \        let mut c = c.to_ascii_lowercase();\n            if c.is_ascii_lowercase()\
    \ {\n                c = c.to_ascii_uppercase();\n            } else {\n     \
    \           c = c.to_ascii_lowercase();\n            }\n            match c {\n\
    \                'a' => encoded.push('c'),\n                'e' => encoded.push('g'),\n\
    \                'i' => encoded.push('k'),\n                'o' => encoded.push('q'),\n\
    \                'u' => encoded.push('s'),\n                _ => encoded.push(c),\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp6ncjtmyb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp_msty41y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(&c) {\n     \
    \       encoded = encoded.replace(c, &vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5].to_string());\n        }\n    }\n    encoded\n}\n\nfn\
    \ main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpyua1vipm.rs:9:9\n\
    \  |\n9 |     let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0506]: cannot assign to `encoded` because it is borrowed\n\
    \    --> /tmp/tmpyua1vipm.rs:23:13\n     |\n21   |     for c in encoded.chars()\
    \ {\n     |              ---------------\n     |              |\n     |      \
    \        borrow of `encoded` occurs here\n     |              borrow later used\
    \ here\n22   |         if vowels.contains(&c) {\n23   |             encoded =\
    \ encoded.replace(c, &vowels[(vowels.iter().position(|&x| x == c).unwrap() + 2)\
    \ % 5].to_string());\n     |             ^^^^^^^ assignment to borrowed `encoded`\
    \ occurs here\n     |\n     = note: borrow occurs due to deref coercion to `str`\n\
    note: deref defined here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0506`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    let mut alphabet = String::from(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    for c in message.chars() {\n        if c.is_alphabetic() {\n         \
    \   if c.is_uppercase() {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(c) {\n      \
    \      let index = vowels.find(c).unwrap();\n            let new_index = (index\
    \ + 2) % 5;\n            encoded.replace(c, vowels.chars().nth(new_index).unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy4gd24tr.rs:26:32\n   |\n\
    26 |             encoded.replace(c, vowels.chars().nth(new_index).unwrap());\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpshxza01n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".chars();\n    let mut vowels = \"aeiou\".chars();\n\
    \    for c in message.chars() {\n        if c.is_ascii_uppercase() {\n       \
    \     encoded.push(c.to_ascii_lowercase());\n        } else if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    for c in encoded.chars() {\n\
    \        if vowels.contains(&c) {\n            encoded.replace(c, &alphabet.nth(alphabet.position(|x|\
    \ x == c).unwrap() + 2).unwrap().to_string());\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `contains` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpuob98_ti.rs:21:19\n   |\n21 |         if vowels.contains(&c)\
    \ {\n   |                   ^^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_lowercase()\
    \ {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n   \
    \     } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if vowels.contains(&c) {\n    \
    \        encoded_message.push(c);\n        }\n    }\n    encoded_message\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `encoded_message` as mutable because it is\
    \ also borrowed as immutable\n  --> /tmp/tmphcsrsndz.rs:21:13\n   |\n19 |    \
    \ for c in encoded_message.chars() {\n   |              -----------------------\n\
    \   |              |\n   |              immutable borrow occurs here\n   |   \
    \           immutable borrow later used here\n20 |         if vowels.contains(&c)\
    \ {\n21 |             encoded_message.push(c);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            result.push(c);\n        } else {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp9e_1ale3.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpjhrem139.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n     \
    \           result.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                result.push(c.to_lowercase().next().unwrap());\n        \
    \    }\n        } else {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp15vt83d_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'A' {\n   \
    \         c = 'C';\n        } else if c == 'E' {\n            c = 'G';\n     \
    \   } else if c == 'I' {\n            c = 'K';\n        } else if c == 'O' {\n\
    \            c = 'Q';\n        } else if c == 'U' {\n            c = 'W';\n  \
    \      } else if c == 'Y' {\n            c = 'A';\n        } else if c == 'C'\
    \ {\n            c = 'E';\n        } else if c == 'G' {\n            c = 'I';\n\
    \        } else if c == 'K' {\n            c = 'O';\n        } else if c == 'Q'\
    \ {\n            c = 'U';\n        } else if c == 'W' {\n            c = 'Y';\n\
    \        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpmlkvby9q.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpehgh5eko.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpshxza01n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if\
    \ c.is_alphabetic() {\n            if c.is_lowercase() {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    for c in encoded_message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&r| r == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            vowels.remove(index);\n\
    \            vowels.insert(new_index, c);\n        }\n    }\n    for c in encoded_message.chars()\
    \ {\n        if vowels.contains(&c) {\n            let index = vowels.iter().position(|&r|\
    \ r == c).unwrap();\n            let new_index = (index + 2) % vowels.len();\n\
    \            vowels.remove(index);\n            vowels.insert(new_index, c);\n\
    \        }\n    }\n    let mut encoded_message = String::new();\n    for c in\
    \ message.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    for c in encoded_message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&r| r == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            vow\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn5i0j51e.rs:63:3\n\
    \   |\n7  | fn encode(message: String) -> String {\n   |                     \
    \                 - unclosed delimiter\n...\n49 |     for c in encoded_message.chars()\
    \ {\n   |                                      - unclosed delimiter\n50 |    \
    \     if vowels.contains(&c) {\n   |                                - this delimiter\
    \ might not be properly closed...\n...\n54 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n63 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `vow` in this scope\n  --> /tmp/tmpn5i0j51e.rs:53:13\n   |\n53 |\
    \             vow\n   |             ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn5i0j51e.rs:49:5\n   |\n7  |   fn encode(message:\
    \ String) -> String {\n   |                                 ------ expected `String`\
    \ because of return type\n...\n49 | /     for c in encoded_message.chars() {\n\
    50 | |         if vowels.contains(&c) {\n51 | |             let index = vowels.iter().position(|&r|\
    \ r == c).unwrap();\n52 | |             let new_index = (index + 2) % vowels.len();\n\
    ...  |\n62 | |     assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\"\
    )), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n63 | | }\n   | |__^ expected\
    \ struct `String`, found `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_lowercase()\
    \ {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n   \
    \     } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp8xbuppdk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut index\
    \ = 0;\n    for c in message.chars() {\n        if c.is_alphabetic() {\n     \
    \       if c.is_lowercase() {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n        index += 1;\n    }\n    encoded_message\n}\n\nfn main() {\n   \
    \ let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp8mymahbx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = (((c as u8) - 97 + 2) % 26 + 97) as char;\n         \
    \   }\n        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpcen6vfh4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        match c {\n       \
    \     'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n     \
    \       'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n   \
    \         'U' => encoded.push('S'),\n            'Y' => encoded.push('A'),\n \
    \           _ => encoded.push(c),\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpc4d06elt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut index\
    \ = 0;\n    let mut char_vec: Vec<char> = message.chars().collect();\n    for\
    \ c in char_vec.iter_mut() {\n        if c.is_alphabetic() {\n            if c.is_uppercase()\
    \ {\n                *c = c.to_lowercase().next().unwrap();\n            } else\
    \ {\n                *c = c.to_uppercase().next().unwrap();\n            }\n \
    \           if *c == 'a' {\n                *c = 'c';\n            } else if *c\
    \ == 'e' {\n                *c = 'g';\n            } else if *c == 'i' {\n   \
    \             *c = 'k';\n            } else if *c == 'o' {\n                *c\
    \ = 'q';\n            } else if *c == 'u' {\n                *c = 'y';\n     \
    \       }\n        }\n        encoded_message.push(*c);\n        index += 1;\n\
    \    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n \
    \   assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n \
    \   assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpg8bxx1il.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&x| x == c).unwrap();\n\
    \            index += 2;\n            if index >= vowels.len() {\n           \
    \     index -= vowels.len();\n            }\n            encoded.push(vowels[index]);\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpan3ybsqt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            encoded.push(vowels[new_index]);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpm2qpmbdt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        let mut encoded_char = c;\n        if c.is_alphabetic() {\n     \
    \       if c.is_uppercase() {\n                encoded_char = c.to_lowercase().next().unwrap();\n\
    \            } else {\n                encoded_char = c.to_uppercase().next().unwrap();\n\
    \            }\n            if encoded_char == 'a' {\n                encoded_char\
    \ = 'c';\n            } else if encoded_char == 'e' {\n                encoded_char\
    \ = 'g';\n            } else if encoded_char == 'i' {\n                encoded_char\
    \ = 'k';\n            } else if encoded_char == 'o' {\n                encoded_char\
    \ = 'q';\n            } else if encoded_char == 'u' {\n                encoded_char\
    \ = 'y';\n            }\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n \
    \   assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n \
    \   assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpbtk3beaz.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut chars\
    \ = message.chars();\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic()\
    \ {\n            let c = if c.is_uppercase() {\n                c.to_lowercase().next().unwrap()\n\
    \            } else {\n                c.to_uppercase().next().unwrap()\n    \
    \        };\n            let c = match c {\n                'a' => 'c',\n    \
    \            'e' => 'g',\n                'i' => 'k',\n                'o' =>\
    \ 'q',\n                'u' => 'y',\n                _ => c,\n            };\n\
    \            encoded_message.push(c);\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpx3nm5erg.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            encoded.push(vowels[new_index]);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmppz39qkqk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = HashMap::new();\n\
    \    vowels.insert('a', 'c');\n    vowels.insert('e', 'g');\n    vowels.insert('i',\
    \ 'k');\n    vowels.insert('o', 'q');\n    vowels.insert('u', 'y');\n    vowels.insert('A',\
    \ 'C');\n    vowels.insert('E', 'G');\n    vowels.insert('I', 'K');\n    vowels.insert('O',\
    \ 'Q');\n    vowels.insert('U', 'Y');\n    for c in message.chars() {\n      \
    \  if vowels.contains_key(&c) {\n            encoded.push(*vowels.get(&c).unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpqennovxg.rs:9:22\n  |\n9 |     let mut vowels = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else if c.is_uppercase()\
    \ {\n            encoded.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            encoded.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpskb076u6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_alphabetic()\
    \ {\n            let mut c = c.to_ascii_lowercase();\n            if c == 'z'\
    \ {\n                c = 'b';\n            } else if c == 'y' {\n            \
    \    c = 'a';\n            } else {\n                c = (c as u8 + 2) as char;\n\
    \            }\n            encoded_message.push(c);\n        } else {\n     \
    \       encoded_message.push(c);\n        }\n    }\n    encoded_message\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpofc7l6eo.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpm1nkayg5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpiyjsk74f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                result.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                result.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \ }\n    for i in 0..result.len() {\n        if vowels.contains(&result.chars().nth(i).unwrap())\
    \ {\n            let mut new_vowel = result.chars().nth(i).unwrap();\n       \
    \     new_vowel = new_vowel.to_lowercase().next().unwrap();\n            new_vowel\
    \ = match new_vowel {\n                'a' => 'c',\n                'e' => 'g',\n\
    \                'i' => 'k',\n                'o' => 'q',\n                'u'\
    \ => 'y',\n                _ => new_vowel,\n            };\n            result.remove(i);\n\
    \            result.insert(i, new_vowel);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpcft9rcix.rs:43:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&v| v == c).unwrap();\n\
    \            index += 2;\n            if index > 4 {\n                index -=\
    \ 5;\n            }\n            encoded_message.push(vowels[index]);\n      \
    \  } else {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpibur81qj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_uppercase() {\n           \
    \ c = c.to_ascii_lowercase();\n        } else if c.is_ascii_lowercase() {\n  \
    \          c = c.to_ascii_uppercase();\n        }\n        match c {\n       \
    \     'a' => result.push('c'),\n            'e' => result.push('g'),\n       \
    \     'i' => result.push('k'),\n            'o' => result.push('q'),\n       \
    \     'u' => result.push('y'),\n            _ => result.push(c),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpmmn78hs8.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n            encoded.push(c);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpshxza01n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n     \
    \           encoded.push(c.to_uppercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_lowercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpsyezofd4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut message_chars\
    \ = message.chars();\n    while let Some(c) = message_chars.next() {\n       \
    \ let mut encoded_char = c;\n        if c.is_alphabetic() {\n            if c.is_lowercase()\
    \ {\n                encoded_char = c.to_uppercase().next().unwrap();\n      \
    \      } else {\n                encoded_char = c.to_lowercase().next().unwrap();\n\
    \            }\n            match encoded_char {\n                'A' => encoded_char\
    \ = 'C',\n                'E' => encoded_char = 'G',\n                'I' => encoded_char\
    \ = 'K',\n                'O' => encoded_char = 'Q',\n                'U' => encoded_char\
    \ = 'S',\n                'Y' => encoded_char = 'A',\n                'a' => encoded_char\
    \ = 'c',\n                'e' => encoded_char = 'g',\n                'i' => encoded_char\
    \ = 'k',\n                'o' => encoded_char = 'q',\n                'u' => encoded_char\
    \ = 's',\n                'y' => encoded_char = 'a',\n                _ => {}\n\
    \            }\n        }\n        encoded_message.push(encoded_char);\n    }\n\
    \    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mSDCSKR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpy5d8lhcb.rs:42:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut index\
    \ = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut is_vowel = false;\n\
    \    for c in message.chars() {\n        if vowels.contains(&c) {\n          \
    \  is_vowel = true;\n        }\n        if is_vowel {\n            let mut new_char\
    \ = c as u8 + 2;\n            if new_char > 122 {\n                new_char =\
    \ new_char - 26;\n            }\n            encoded_message.push(new_char as\
    \ char);\n            is_vowel = false;\n        } else {\n            if c.is_uppercase()\
    \ {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        }\n        index += 1;\n    }\n    encoded_message\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp5fhlcz8d.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = (c as u8 + 2) as char;\n            }\n        }\n        encoded.push(c);\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpln83mm0o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    for v in vowels {\n        encoded\
    \ = encoded.replace(v, &((v as u8 + 2) as char).to_string());\n        encoded\
    \ = encoded.replace(&v.to_ascii_uppercase(), &((v as u8 + 2) as char).to_string());\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n  --> /tmp/tmpqi99sy2n.rs:21:27\n\
    \   |\n21 |         encoded = encoded.replace(&v.to_ascii_uppercase(), &((v as\
    \ u8 + 2) as char).to_string());\n   |                           ^^^^^^^ expected\
    \ an `Fn<(char,)>` closure, found `char`\n   |\n   = help: the trait `Fn<(char,)>`\
    \ is not implemented for `char`\n   = note: required because of the requirements\
    \ on the impl of `FnOnce<(char,)>` for `&char`\n   = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    for c in message.chars() {\n        if c.is_ascii_uppercase() {\n\
    \            encoded.push(c.to_ascii_lowercase());\n        } else if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n        if vowels.contains(c) {\n     \
    \       encoded.pop();\n            let mut index = vowels.find(c).unwrap();\n\
    \            index += 2;\n            if index > 4 {\n                index -=\
    \ 5;\n            }\n            encoded.push(vowels.chars().nth(index).unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppi4_5c34.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpjmvosau_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    let vowels = \"aeiou\".to_string();\n\
    \    let mut vowels_iter = vowels.chars();\n    let mut vowels_map = HashMap::new();\n\
    \    let mut alphabet_char = alphabet_iter.next();\n    let mut vowels_char =\
    \ vowels_iter.next();\n    while alphabet_char != None {\n        alphabet_map.insert(alphabet_char.unwrap(),\
    \ alphabet_iter.next());\n        alphabet_char = alphabet_iter.next();\n    }\n\
    \    while vowels_char != None {\n        vowels_map.insert(vowels_char.unwrap(),\
    \ vowels_iter.next());\n        vowels_char = vowels_iter.next();\n    }\n   \
    \ for c in message.chars() {\n        if c.is_lowercase() {\n            if vowels_map.contains_key(&c)\
    \ {\n                encoded_message.push(vowels_map.get(&c).unwrap().clone());\n\
    \            } else {\n                encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \            }\n        } else if c.is_uppercase() {\n            if vowels_map.contains_key(&c.to_lowercase().next().unwrap())\
    \ {\n                encoded_message.push(vowels_map.get(&c.to_lowercase().next().unwrap()).unwrap().clone().to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(alphabet_map.get(&c.to_lowercase().next().unwrap()).unwrap().clone().to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpc8f2209h.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n \
    \ --> /tmp/tmpc8f2209h.rs:14:26\n   |\n14 |     let mut vowels_map = HashMap::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n   \
    \ let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n\
    \    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n\
    \    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut e = 0;\n    let mut i = 0;\n\
    \    let mut o = 0;\n    let mut u = 0;\n    let mut message_chars = message.chars();\n\
    \    for c in message_chars {\n        if c == 'a' {\n            a += 1;\n  \
    \          if a % 2 == 0 {\n                encoded.push('c');\n            }\
    \ else {\n                encoded.push('C');\n            }\n        } else if\
    \ c == 'b' {\n            b += 1;\n            if b % 2 == 0 {\n             \
    \   encoded.push('d');\n            } else {\n                encoded.push('D');\n\
    \            }\n        } else if c == 'c' {\n            c += 1;\n          \
    \  if c % 2 == 0 {\n                encoded.push('e');\n            } else {\n\
    \                encoded.push('E');\n            }\n        } else if c == 'd'\
    \ {\n            d += 1;\n            if d % 2 == 0 {\n                encoded.push('f');\n\
    \            } else {\n                encoded.push('F');\n            }\n   \
    \     } else if c == 'e' {\n            e += 1;\n            if e % 2 == 0 {\n\
    \                encoded.push('g');\n            } else {\n                encoded.push('G');\n\
    \            }\n        } else if c == 'f' {\n            f += 1;\n          \
    \  if f % 2 == 0 {\n                encoded.push('h');\n            } else {\n\
    \                encoded.push('H\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpow13px5h.rs:84:3\n\
    \   |\n7  | fn encode(message: String) -> String {\n   |                     \
    \                 - unclosed delimiter\n...\n33 |     for c in message_chars {\n\
    \   |                            - unclosed delimiter\n...\n69 |         } else\
    \ if c == 'f' {\n   |                            - unclosed delimiter\n...\n73\
    \ |             } else {\n   |                    - this delimiter might not be\
    \ properly closed...\n74 |                 encoded.push('H\n75 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n84 | }\n   |   ^\n\n\
    error: expected `while`, `for`, `loop` or `{` after a label\n  --> /tmp/tmpow13px5h.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected `while`, `for`, `loop` or `{` after a label\n\n\
    error: expected expression, found `)`\n  --> /tmp/tmpow13px5h.rs:75:1\n   |\n\
    75 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n\
    \  --> /tmp/tmpow13px5h.rs:74:29\n   |\n7  | fn encode(message: String) -> String\
    \ {\n   |                                      - closing delimiter possibly meant\
    \ for this\n...\n74 |                 encoded.push('H\n   |                  \
    \           ^ unclosed delimiter\n75 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpow13px5h.rs:42:13\n\
    \   |\n42 |             b += 1;\n   |             ^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `b` in this scope\n\
    \  --> /tmp/tmpow13px5h.rs:43:16\n   |\n43 |             if b % 2 == 0 {\n   |\
    \                ^ help: a local variable with a similar name exists: `a`\n\n\
    error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpow13px5h.rs:56:13\n\
    \   |\n56 |             d += 1;\n   |             ^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this scope\n\
    \  --> /tmp/tmpow13px5h.rs:57:16\n   |\n57 |             if d % 2 == 0 {\n   |\
    \                ^ help: a local variable with a similar name exists: `a`\n\n\
    error[E0425]: cannot find value `f` in this scope\n  -->"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut new_char = c;\n        if c.is_alphabetic() {\n         \
    \   new_char = if c.is_lowercase() {\n                c.to_uppercase().next().unwrap()\n\
    \            } else {\n                c.to_lowercase().next().unwrap()\n    \
    \        };\n            if \"aeiou\".contains(c) {\n                new_char\
    \ = match c {\n                    'a' => 'c',\n                    'e' => 'g',\n\
    \                    'i' => 'k',\n                    'o' => 'q',\n          \
    \          'u' => 'y',\n                    _ => new_char,\n                }\n\
    \            }\n        }\n        encoded.push(new_char);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp37_xznyv.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push(vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5]);\n        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqpjhf_e9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpjmvosau_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         encoded.push(c.to_ascii_uppercase());\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpe_uwrxtn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = \"aeiou\"\
    ;\n    for c in message.chars() {\n        if vowels.contains(c) {\n         \
    \   let mut idx = vowels.find(c).unwrap();\n            idx += 2;\n          \
    \  if idx >= vowels.len() {\n                idx -= vowels.len();\n          \
    \  }\n            encoded.push(vowels.chars().nth(idx).unwrap());\n        } else\
    \ {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpxowa0qxm.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if alphabet_map.contains_key(&c)\
    \ {\n            encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpl8n_pj0e.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_hash = HashMap::new();\n    for _ in 0..26 {\n        alphabet_hash.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_lowercase() {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            encoded_message.push(alphabet_hash.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp6j117vqi.rs:11:29\n   |\n11 |     let mut alphabet_hash = HashMap::new();\n\
    \   |                             ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'A' {\n   \
    \         c = 'C';\n        } else if c == 'E' {\n            c = 'G';\n     \
    \   } else if c == 'I' {\n            c = 'K';\n        } else if c == 'O' {\n\
    \            c = 'Q';\n        } else if c == 'U' {\n            c = 'W';\n  \
    \      } else if c == 'Y' {\n            c = 'A';\n        } else if c == 'C'\
    \ {\n            c = 'E';\n        } else if c == 'G' {\n            c = 'I';\n\
    \        } else if c == 'K' {\n            c = 'O';\n        } else if c == 'Q'\
    \ {\n            c = 'U';\n        } else if c == 'W' {\n            c = 'Y';\n\
    \        }\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpmlkvby9q.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmphfk9kng0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut i = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           i += 2;\n            if i > vowels.len() - 1 {\n                i\
    \ -= vowels.len();\n            }\n            encoded.push(vowels[i]);\n    \
    \    } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpdymf2ktn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        if c == 'A' {\n   \
    \         c = 'C';\n        } else if c == 'E' {\n            c = 'G';\n     \
    \   } else if c == 'I' {\n            c = 'K';\n        } else if c == 'O' {\n\
    \            c = 'Q';\n        } else if c == 'U' {\n            c = 'W';\n  \
    \      } else if c == 'Y' {\n            c = 'A';\n        }\n        encoded.push(c);\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpa8yiul_b.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = String::from(\"\
    aeiou\");\n    for c in message.chars() {\n        if c.is_alphabetic() {\n  \
    \          if c.is_lowercase() {\n                encoded.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \  }\n    for c in encoded.chars() {\n        if vowels.contains(c) {\n      \
    \      let index = vowels.find(c).unwrap();\n            let new_index = (index\
    \ + 2) % 5;\n            encoded.replace(c, vowels.chars().nth(new_index).unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgj03l4ir.rs:25:32\n   |\n\
    25 |             encoded.replace(c, vowels.chars().nth(new_index).unwrap());\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push(((c as u8) + 2) as char);\n        } else {\n  \
    \          encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n\
    \    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp7z2bvi5b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_alphabetic() {\n          \
    \  c = c.to_ascii_lowercase();\n            if c == 'a' {\n                c =\
    \ 'c';\n            } else if c == 'e' {\n                c = 'g';\n         \
    \   } else if c == 'i' {\n                c = 'k';\n            } else if c ==\
    \ 'o' {\n                c = 'q';\n            } else if c == 'u' {\n        \
    \        c = 'y';\n            } else {\n                c = ((c as u8) + 2) as\
    \ char;\n            }\n        }\n        encoded.push(c);\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpezjy4q5m.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut index = 0;\n \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars()\
    \ {\n        if vowels.contains(&c) {\n            let mut new_index = index +\
    \ 2;\n            if new_index > vowels.len() - 1 {\n                new_index\
    \ = new_index - vowels.len();\n            }\n            result.push(vowels[new_index]);\n\
    \        } else {\n            result.push(c);\n        }\n        index += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpumwn_qd7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpm6f_ohs_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpnw7mnqsa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        let mut encoded_char = c;\n        if c.is_ascii_alphabetic() {\n\
    \            encoded_char = if c.is_ascii_uppercase() {\n                c.to_ascii_lowercase()\n\
    \            } else {\n                c.to_ascii_uppercase()\n            };\n\
    \            match encoded_char {\n                'a' => encoded_char = 'c',\n\
    \                'e' => encoded_char = 'g',\n                'i' => encoded_char\
    \ = 'k',\n                'o' => encoded_char = 'q',\n                'u' => encoded_char\
    \ = 'y',\n                _ => (),\n            }\n        }\n        encoded_message.push(encoded_char);\n\
    \    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n \
    \   assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n \
    \   assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpcffpcyfg.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let c = match c {\n            'a' => 'c',\n            'e' => 'g',\n\
    \            'i' => 'k',\n            'o' => 'q',\n            'u' => 'y',\n \
    \           'A' => 'C',\n            'E' => 'G',\n            'I' => 'K',\n  \
    \          'O' => 'Q',\n            'U' => 'Y',\n            _ => c,\n       \
    \ };\n        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n    let\
    \ candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TGST\"`,\n right: `\"tgst\"`', /tmp/tmp3i24m3yb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        let mut c = c;\n\
    \        if c.is_ascii_uppercase() {\n            c = c.to_ascii_lowercase();\n\
    \        } else if c.is_ascii_lowercase() {\n            c = c.to_ascii_uppercase();\n\
    \        }\n        if vowels.contains(&c) {\n            let index = vowels.iter().position(|&x|\
    \ x == c).unwrap();\n            let index = (index + 2) % vowels.len();\n   \
    \         c = vowels[index];\n        }\n        encoded.push(c);\n    }\n   \
    \ encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"tost\"`,\n right: `\"tgst\"`', /tmp/tmpq84t0ruf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut i = 0;\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n\
    \        if c.is_alphabetic() {\n            if c.is_lowercase() {\n         \
    \       encoded_message.push(c.to_uppercase().next().unwrap());\n            }\
    \ else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n        if vowels.contains(&c) {\n            if i == vowels.len() - 1\
    \ {\n                i = 0;\n            } else {\n                i += 1;\n \
    \           }\n            encoded_message.push(vowels[i]);\n        }\n    }\n\
    \    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpb3e41ei9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = ((c as u8) + 2) as char;\n            }\n            encoded.push(c);\n  \
    \      } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmp06lcmwr8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp_msty41y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        let mut encoded_char = c;\n        if c.is_ascii_lowercase() {\n\
    \            encoded_char = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase()\
    \ {\n            encoded_char = c.to_ascii_lowercase();\n        }\n        if\
    \ c == 'a' {\n            encoded_char = 'c';\n        } else if c == 'e' {\n\
    \            encoded_char = 'g';\n        } else if c == 'i' {\n            encoded_char\
    \ = 'k';\n        } else if c == 'o' {\n            encoded_char = 'q';\n    \
    \    } else if c == 'u' {\n            encoded_char = 'y';\n        }\n      \
    \  encoded_message.push(encoded_char);\n    }\n    encoded_message\n}\n\nfn main()\
    \ {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\"\
    )), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmptt5pc2u2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpiyjsk74f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let vowels = \"aeiou\";\n\
    \    let mut alphabet_index = 0;\n    for c in message.chars() {\n        if c.is_alphabetic()\
    \ {\n            if c.is_lowercase() {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n        if vowels.contains(c) {\n            alphabet_index = alphabet.find(c).unwrap();\n\
    \            encoded_message.pop();\n            encoded_message.push(alphabet.chars().nth(alphabet_index\
    \ + 2).unwrap());\n        }\n    }\n    encoded_message\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpxhblzwwn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = ((c as u8) + 2) as char;\n            }\n        }\n        encoded.push(c);\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmp0dj0rscn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n   \
    \ let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n\
    \    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n\
    \    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut e = 0;\n    let mut i = 0;\n\
    \    let mut o = 0;\n    let mut u = 0;\n    let mut space = 0;\n    let mut space_count\
    \ = 0;\n    let mut space_index = 0;\n    let mut space_index_vec = Vec::new();\n\
    \    let mut space_index_vec_count = 0;\n    let mut space_index_vec_count_2 =\
    \ 0;\n    let mut space_index_vec_count_3 = 0;\n    let mut space_index_vec_count_4\
    \ = 0;\n    let mut space_index_vec_count_5 = 0;\n    let mut space_index_vec_count_6\
    \ = 0;\n    let mut space_index_vec_count_7 = 0;\n    let mut space_index_vec_count_8\
    \ = 0;\n    let mut space_index_vec_count_9 = 0;\n    let mut space_index_vec_count_10\
    \ = 0;\n    let mut space_index_vec_count_11 = 0;\n    let mut space_index_vec_count_12\
    \ = 0;\n    let mut space_index_vec_count_13 = 0;\n    let mut space_index_vec_count_14\
    \ = 0;\n    let mut space_index_vec_count_15 = 0;\n    let mut space_index_vec_count_16\
    \ = 0;\n    let mut space_index_vec_count_17 = 0;\n    let mut space_\n}\n\nfn\
    \ main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxc4x5r0k.rs:53:19\n   |\n\
    53 |     let mut space_\n   |                   ^ help: add `;` here\n54 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxc4x5r0k.rs:7:31\n\
    \  |\n7 | fn encode(message: String) -> String {\n  |    ------              \
    \       ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push((c as u8 + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp610d608c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    for\
    \ c in message.chars() {\n        if c.is_ascii_alphabetic() {\n            if\
    \ c.is_ascii_uppercase() {\n                encoded.push(c.to_ascii_lowercase());\n\
    \            } else {\n                encoded.push(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            encoded.push(c);\n        }\n  \
    \      i += 1;\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpldb4to3b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            encoded_message.push(vowels[new_index]);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmppzahjtxj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&r| r == c).unwrap();\n\
    \            index += 2;\n            if index >= vowels.len() {\n           \
    \     index -= vowels.len();\n            }\n            encoded.push(vowels[index]);\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmplg3egmkr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if vowels.contains(&c) {\n    \
    \        let index = vowels.iter().position(|&r| r == c).unwrap();\n         \
    \   let new_index = (index + 2) % vowels.len();\n            encoded_message =\
    \ encoded_message.replace(c, vowels[new_index]);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjdhny440.rs:23:58\n   |\n\
    23 |             encoded_message = encoded_message.replace(c, vowels[new_index]);\n\
    \   |                                                          ^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_alphabetic()\
    \ {\n            let mut encoded_char = c.to_ascii_lowercase();\n            if\
    \ encoded_char.is_ascii_lowercase() {\n                encoded_char = encoded_char.to_ascii_uppercase();\n\
    \            } else {\n                encoded_char = encoded_char.to_ascii_lowercase();\n\
    \            }\n            if encoded_char == 'a' {\n                encoded_char\
    \ = 'c';\n            } else if encoded_char == 'e' {\n                encoded_char\
    \ = 'g';\n            } else if encoded_char == 'i' {\n                encoded_char\
    \ = 'k';\n            } else if encoded_char == 'o' {\n                encoded_char\
    \ = 'q';\n            } else if encoded_char == 'u' {\n                encoded_char\
    \ = 'y';\n            }\n            encoded_message.push(encoded_char);\n   \
    \     } else {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpeyr48n0r.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n           \
    \ c = c.to_ascii_uppercase();\n        } else if c.is_ascii_uppercase() {\n  \
    \          c = c.to_ascii_lowercase();\n        }\n        match c {\n       \
    \     'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n     \
    \       'I' => encoded.push('K'),\n            'O' => encoded.push('Q'),\n   \
    \         'U' => encoded.push('Y'),\n            _ => encoded.push(c),\n     \
    \   }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n   \
    \ assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n   \
    \ assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n\
    \    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n  \
    \  assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqhvc0dwx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_alphabetic() {\n            if c.is_uppercase() {\n            \
    \    encoded_message.push(alphabet_map.get(&c.to_lowercase().next().unwrap()).unwrap().to_uppercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(alphabet_map.get(&c).unwrap().to_lowercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpvp9j0uxk.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut message_chars\
    \ = message.chars();\n    while let Some(c) = message_chars.next() {\n       \
    \ if c.is_alphabetic() {\n            if c.is_uppercase() {\n                encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \            } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpfqee2no6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = ((c as u8) + 2) as char;\n            }\n            encoded.push(c);\n  \
    \      } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmp06lcmwr8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  for c in encoded_message.chars() {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            encoded_message.push(alphabet_map.get(&c).unwrap().clone());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp2e56a012.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpnw7mnqsa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n      \
    \  if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n        if vowels.contains(&c)\
    \ {\n            i += 1;\n            if i == 5 {\n                i = 0;\n  \
    \          }\n            encoded.pop();\n            encoded.push(vowels[i]);\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqmnolr6q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else {\n    \
    \        encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n \
    \   let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpiyjsk74f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        let mut c = c;\n        if c.is_alphabetic() {\n            c = c.to_ascii_lowercase();\n\
    \            if c == 'a' {\n                c = 'c';\n            } else if c\
    \ == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n     \
    \           c = 'k';\n            } else if c == 'o' {\n                c = 'q';\n\
    \            } else if c == 'u' {\n                c = 'y';\n            } else\
    \ {\n                c = ((c as u8) + 2) as char;\n            }\n        }\n\
    \        encoded.push(c);\n    }\n    encoded\n}\n\nfn main() {\n    let candidate\
    \ = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"\
    tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"\
    mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"\
    ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpdybvjw7v.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpdjg735xq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let c = if c.is_uppercase() {\n\
    \                c.to_lowercase().next().unwrap()\n            } else {\n    \
    \            c.to_uppercase().next().unwrap()\n            };\n            let\
    \ c = match c {\n                'a' => 'c',\n                'e' => 'g',\n  \
    \              'i' => 'k',\n                'o' => 'q',\n                'u' =>\
    \ 'y',\n                _ => c,\n            };\n            encoded.push(c);\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"mUDASIR\"`,\n right: `\"mWDCSKR\"`', /tmp/tmpirqz4p1a.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut char_iter\
    \ = message.chars();\n    while let Some(c) = char_iter.next() {\n        if c.is_alphabetic()\
    \ {\n            let mut encoded_char = c.to_ascii_lowercase();\n            if\
    \ encoded_char.is_ascii_lowercase() {\n                encoded_char = encoded_char.to_ascii_uppercase();\n\
    \            } else {\n                encoded_char = encoded_char.to_ascii_lowercase();\n\
    \            }\n            match encoded_char {\n                'a' => encoded_char\
    \ = 'c',\n                'e' => encoded_char = 'g',\n                'i' => encoded_char\
    \ = 'k',\n                'o' => encoded_char = 'q',\n                'u' => encoded_char\
    \ = 'y',\n                _ => (),\n            }\n            encoded_message.push(encoded_char);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp2hn7ugwx.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    let\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n  \
    \      if vowels.contains(&c) {\n            let mut new_char = c as u8 + 2;\n\
    \            if new_char > 'u' as u8 {\n                new_char -= 5;\n     \
    \       }\n            encoded.push(new_char as char);\n        } else {\n   \
    \         encoded.push(c);\n        }\n        i += 1;\n    }\n    encoded\n}\n\
    \nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmppcqn1vvd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n   \
    \ let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n\
    \    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n\
    \    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n\
    \    let mut z = 0;\n    let mut a = 0;\n    let mut e = 0;\n    let mut i = 0;\n\
    \    let mut o = 0;\n    let mut u = 0;\n    let mut A = 0;\n    let mut E = 0;\n\
    \    let mut I = 0;\n    let mut O = 0;\n    let mut U = 0;\n    let mut c = 0;\n\
    \    let mut d = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n\
    \    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n\
    \    let mut n = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut C = 0;\n\
    \    let mut D = 0;\n    let mut F = 0;\n    let mut G = 0;\n    let mut H = 0;\n\
    \    let mut J = 0;\n    let mut K = 0;\n    let mut L = 0;\n    let mut M = 0;\n\
    \    let mut N = 0;\n    let mut P = 0;\n    let mut Q = 0;\n    let mut R = 0;\n\
    \    let mut S = 0;\n    let mut T =\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpnnqmwomg.rs:72:1\n\
    \   |\n72 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded_message.push(c.to_lowercase().next().unwrap());\n        \
    \    } else {\n                encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \            }\n        } else {\n            encoded_message.push(c);\n     \
    \   }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp5k8gnwi6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push(vowels[(vowels.iter().position(|&x| x ==\
    \ c).unwrap() + 2) % 5]);\n        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpqpjhf_e9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     let mut encoded_char = c;\n        if c.is_lowercase() {\n            encoded_char\
    \ = c.to_uppercase().next().unwrap();\n        } else if c.is_uppercase() {\n\
    \            encoded_char = c.to_lowercase().next().unwrap();\n        }\n   \
    \     if c.is_alphabetic() {\n            encoded_char = alphabet_map.get(&encoded_char).unwrap().clone();\n\
    \        }\n        encoded_message.push(encoded_char);\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpqd4bnj9x.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           let new_index = (index + 2) % vowels.len();\n            encoded_message.push(vowels[new_index]);\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmppzahjtxj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp_msty41y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_lowercase().next().unwrap();\n\
    \            if c == 'z' {\n                c = 'b';\n            } else if c\
    \ == 'y' {\n                c = 'a';\n            } else {\n                c\
    \ = ((c as u8) + 2) as char;\n            }\n            encoded.push(c);\n  \
    \      } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"vguv\"`,\n right: `\"tgst\"`', /tmp/tmpbgtcyaqm.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&x| x == c).unwrap();\n\
    \            index += 2;\n            if index >= vowels.len() {\n           \
    \     index -= vowels.len();\n            }\n            encoded.push(vowels[index]);\n\
    \        } else if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else {\n            encoded.push(c.to_ascii_uppercase());\n       \
    \ }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpvh_vcmtq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut is_upper\
    \ = false;\n    for c in message.chars() {\n        if c.is_uppercase() {\n  \
    \          is_upper = true;\n        } else {\n            is_upper = false;\n\
    \        }\n        let c = c.to_lowercase().next().unwrap();\n        match c\
    \ {\n            'a' => encoded_message.push('c'),\n            'e' => encoded_message.push('g'),\n\
    \            'i' => encoded_message.push('k'),\n            'o' => encoded_message.push('q'),\n\
    \            'u' => encoded_message.push('y'),\n            _ => encoded_message.push(c),\n\
    \        }\n        if is_upper {\n            encoded_message.push_str(&encoded_message.pop().unwrap().to_uppercase().to_string());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `is_upper` is never read\n --> /tmp/tmpse6jw641.rs:9:13\n\
    \  |\n9 |     let mut is_upper = false;\n  |             ^^^^^^^^\n  |\n  = note:\
    \ `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0499]: cannot borrow `encoded_message` as mutable\
    \ more than once at a time\n  --> /tmp/tmpse6jw641.rs:26:39\n   |\n26 |      \
    \       encoded_message.push_str(&encoded_message.pop().unwrap().to_uppercase().to_string());\n\
    \   |             --------------- --------  ^^^^^^^^^^^^^^^ second mutable borrow\
    \ occurs here\n   |             |               |\n   |             |        \
    \       first borrow later used by call\n   |             first mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut chars = message.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_ascii_uppercase() {\n\
    \            encoded.push(c.to_ascii_lowercase());\n        } else if c.is_ascii_lowercase()\
    \ {\n            encoded.push(c.to_ascii_uppercase());\n        } else {\n   \
    \         encoded.push(c);\n        }\n    }\n    encoded\n}\n\nfn main() {\n\
    \    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")),\
    \ String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpm95q6c7i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n     \
    \           encoded.push(c.to_lowercase().next().unwrap());\n            } else\
    \ {\n                encoded.push(c.to_uppercase().next().unwrap());\n       \
    \     }\n        } else {\n            encoded.push(c);\n        }\n    }\n  \
    \  encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpm1nkayg5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut iter\
    \ = message.chars();\n    while let Some(c) = iter.next() {\n        if c.is_ascii_uppercase()\
    \ {\n            encoded_message.push(c.to_ascii_lowercase());\n        } else\
    \ if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpjhrem139.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded_message.push(((c as u8) + 2) as char);\n        } else\
    \ {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmp2bkzaukx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet_iter = alphabet.chars();\n\
    \    let mut alphabet_map = HashMap::new();\n    for _ in 0..26 {\n        alphabet_map.insert(alphabet_iter.next().unwrap(),\
    \ alphabet_iter.next().unwrap());\n    }\n    for c in message.chars() {\n   \
    \     if c.is_ascii_uppercase() {\n            encoded_message.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded_message.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded_message.push(c);\n        }\n    }\n  \
    \  encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpn7b4yec8.rs:11:28\n   |\n11 |     let mut alphabet_map = HashMap::new();\n\
    \   |                            ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'w';\n       \
    \     }\n            encoded_message.push(c);\n        } else {\n            encoded_message.push(c);\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpi3mu0za0.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    let mut numbers = Vec::new();\n   \
    \ let mut symbols = Vec::new();\n    let mut spaces = Vec::new();\n    let mut\
    \ capital_letters = Vec::new();\n    let mut lowercase_letters = Vec::new();\n\
    \    let mut encoded_vowels = Vec::new();\n    let mut encoded_consonants = Vec::new();\n\
    \    let mut encoded_numbers = Vec::new();\n    let mut encoded_symbols = Vec::new();\n\
    \    let mut encoded_spaces = Vec::new();\n    let mut encoded_capital_letters\
    \ = Vec::new();\n    let mut encoded_lowercase_letters = Vec::new();\n    let\
    \ mut encoded_message = String::new();\n    let mut encoded_message_vec = Vec::new();\n\
    \    let mut encoded_message_string = String::new();\n    let mut encoded_message_string_vec\
    \ = Vec::new();\n    let mut encoded_message_string_vec_string = String::new();\n\
    \    let mut encoded_message_string_vec_string_vec = Vec::new();\n    let mut\
    \ encoded_message_string_vec_string_vec_string = String::new();\n    let mut encoded_message_string_vec_string_vec_string_vec\
    \ = Vec::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string\
    \ = String::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string_vec\
    \ = Vec::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string_vec_string\
    \ = String::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string_vec_string_vec\
    \ = Vec::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string_vec_string_vec_string\
    \ = String::new();\n    let mut encoded_message_string_vec_string_vec_string_vec_string_vec_string_vec_string_vec\
    \ = Vec::new();\n   \n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaocdbr6z.rs:7:31\n  |\n7 |\
    \ fn encode(message: String) -> String {\n  |    ------                     ^^^^^^\
    \ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            encoded.push((c as u8 + 2) as char);\n        } else if c.is_uppercase()\
    \ {\n            encoded.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            encoded.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmpskb076u6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            encoded.push(c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_lowercase() {\n            encoded.push(c.to_ascii_uppercase());\n\
    \        } else {\n            encoded.push(c);\n        }\n    }\n    encoded\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmppufeaz76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747127
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    let mut vowels = Vec::new();\n\
    \    let mut consonants = Vec::new();\n    let mut message_chars = message.chars();\n\
    \    let mut message_chars_iter = message_chars.clone();\n    let mut message_chars_iter2\
    \ = message_chars.clone();\n    let mut message_chars_iter3 = message_chars.clone();\n\
    \    let mut message_chars_iter4 = message_chars.clone();\n    let mut message_chars_iter5\
    \ = message_chars.clone();\n    let mut message_chars_iter6 = message_chars.clone();\n\
    \    let mut message_chars_iter7 = message_chars.clone();\n    let mut message_chars_iter8\
    \ = message_chars.clone();\n    let mut message_chars_iter9 = message_chars.clone();\n\
    \    let mut message_chars_iter10 = message_chars.clone();\n    let mut message_chars_iter11\
    \ = message_chars.clone();\n    let mut message_chars_iter12 = message_chars.clone();\n\
    \    let mut message_chars_iter13 = message_chars.clone();\n    let mut message_chars_iter14\
    \ = message_chars.clone();\n    let mut message_chars_iter15 = message_chars.clone();\n\
    \    let mut message_chars_iter16 = message_chars.clone();\n    let mut message_chars_iter17\
    \ = message_chars.clone();\n    let mut message_chars_iter18 = message_chars.clone();\n\
    \    let mut message_chars_iter19 = message_chars.clone();\n    let mut message_chars_iter20\
    \ = message_chars.clone();\n    let mut message_chars_iter21 = message_chars.clone();\n\
    \    let mut message_chars_iter22 = message_chars.clone();\n    let mut message_chars_iter23\
    \ = message_chars.clone();\n    let mut message_chars_iter24 = message_chars.clone();\n\
    \    let mut message_chars_iter25\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk03micpb.rs:36:33\n   |\n\
    36 |     let mut message_chars_iter25\n   |                                 ^\
    \ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk03micpb.rs:7:31\n  |\n7 | fn encode(message: String) ->\
    \ String {\n  |    ------                     ^^^^^^ expected struct `String`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let index = vowels.iter().position(|&x| x == c).unwrap();\n \
    \           encoded_message.push(vowels[(index + 2) % vowels.len()]);\n      \
    \  } else {\n            encoded_message.push(c);\n        }\n    }\n    encoded_message\n\
    }\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"\
    TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\"\
    )), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\"\
    )), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a\
    \ message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"\
    I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpdf8rqvl4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
- exit_code: 1
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let mut is_upper\
    \ = false;\n    for c in message.chars() {\n        if c.is_uppercase() {\n  \
    \          is_upper = true;\n        }\n        if c.is_alphabetic() {\n     \
    \       encoded_message.push(c.to_lowercase().next().unwrap());\n        }\n \
    \   }\n    for c in encoded_message.chars() {\n        if c.is_alphabetic() {\n\
    \            encoded_message.push(c.to_lowercase().next().unwrap());\n       \
    \ }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `is_upper` is assigned to, but never used\n --> /tmp/tmpzedaykmo.rs:9:13\n\
    \  |\n9 |     let mut is_upper = false;\n  |             ^^^^^^^^\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n  = note: consider using `_is_upper`\
    \ instead\n\nwarning: value assigned to `is_upper` is never read\n  --> /tmp/tmpzedaykmo.rs:12:13\n\
    \   |\n12 |             is_upper = true;\n   |             ^^^^^^^^\n   |\n  \
    \ = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is\
    \ overwritten before being read?\n\nerror[E0502]: cannot borrow `encoded_message`\
    \ as mutable because it is also borrowed as immutable\n  --> /tmp/tmpzedaykmo.rs:20:13\n\
    \   |\n18 |     for c in encoded_message.chars() {\n   |              -----------------------\n\
    \   |              |\n   |              immutable borrow occurs here\n   |   \
    \           immutable borrow later used here\n19 |         if c.is_alphabetic()\
    \ {\n20 |             encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded = String::new();\n    for c in message.chars()\
    \ {\n        if c.is_alphabetic() {\n            let mut c = c.to_ascii_lowercase();\n\
    \            if c.is_ascii_lowercase() {\n                c = c.to_ascii_uppercase();\n\
    \            } else {\n                c = c.to_ascii_lowercase();\n         \
    \   }\n            if c == 'a' {\n                c = 'c';\n            } else\
    \ if c == 'e' {\n                c = 'g';\n            } else if c == 'i' {\n\
    \                c = 'k';\n            } else if c == 'o' {\n                c\
    \ = 'q';\n            } else if c == 'u' {\n                c = 'y';\n       \
    \     }\n            encoded.push(c);\n        } else {\n            encoded.push(c);\n\
    \        }\n    }\n    encoded\n}\n\nfn main() {\n    let candidate = encode;\n\
    \    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"TEST\"`,\n right: `\"tgst\"`', /tmp/tmpjmvosau_.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 101
  program: "/// Write a function that takes a message, and encodes in such a \n///\
    \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfn encode(message: String)\
    \ -> String {\n    let mut encoded_message = String::new();\n    let vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n    for c in message.chars() {\n        if vowels.contains(&c)\
    \ {\n            let mut index = vowels.iter().position(|&x| x == c).unwrap();\n\
    \            index += 2;\n            if index >= vowels.len() {\n           \
    \     index -= vowels.len();\n            }\n            encoded_message.push(vowels[index]);\n\
    \        } else if c.is_uppercase() {\n            encoded_message.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            encoded_message.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    encoded_message\n}\n\nfn main() {\n    let candidate =\
    \ encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"\
    ));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n\
    \    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"\
    tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt\
    \ tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"test\"`,\n right: `\"tgst\"`', /tmp/tmp0bk83tz5.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747130
