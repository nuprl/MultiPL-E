name: HumanEval_2_truncate_number
language: rs
prompt: "/// Given a positive floating point number, it can be decomposed into\n///\
  \ and integer part (largest integer smaller than given number) and decimals\n///\
  \ (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  fn truncate_number(number: f64) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5),\
  \ 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0),\
  \ 0.0);\n}\n"
completions: ['    number - number.floor()', '    number - number.floor()', '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let int_part = number.trunc();\n\
    \    number - int_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    if number < 0.0 {\n        return number.ceil();\n\
    \    }\n    number.floor()", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let int_part = number.trunc();\n    number - int_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let int_part = number.trunc();\n    number -\
    \ int_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let mut number = number;\n    while number >=\
    \ 1.0 {\n        number -= 1.0;\n    }\n    number", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let mut number = number;\n    while number >= 1.0 {\n        number -= 1.0;\n\
    \    }\n    number", '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  "    let truncated = number.trunc();\n    number - truncated", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let mut number = number;\n    let mut integer_part = 0;\n\
    \    while number >= 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n\
    \    }\n    number", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let truncated = number.trunc();\n    number\
    \ - truncated", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let int_part = number.trunc();\n    number -\
    \ int_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let mut number = number;\n    let mut integer_part = 0;\n    while number >=\
    \ 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n    }\n    number",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let mut number = number;\n\
    \    let mut integer_part = 0;\n    while number >= 1.0 {\n        number -= 1.0;\n\
    \        integer_part += 1;\n    }\n    number", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let int_part\
    \ = number.trunc();\n    number - int_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let truncated = number.trunc();\n    number - truncated", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let integer = number.trunc();\n    number -\
    \ integer", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let mut number = number;\n\
    \    let mut integer_part = 0;\n    while number >= 1.0 {\n        number -= 1.0;\n\
    \        integer_part += 1;\n    }\n    number", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let int_part\
    \ = number.trunc();\n    number - int_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let truncated = number.trunc();\n    number\
    \ - truncated", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let truncated = number.trunc();\n    number - truncated", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let truncated_number\
    \ = number.trunc();\n    number - truncated_number", "    let integer_part = number.trunc();\n\
    \    let decimal_part = number - integer_part;\n    decimal_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number.fract()', "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', "    let number_int = number.floor();\n    number\
    \ - number_int", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let truncated = number.trunc();\n    number\
    \ - truncated", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let (int_part, dec_part)\
    \ = number.modf();\n    dec_part", '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let truncated = number.trunc();\n    number\
    \ - truncated", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let mut number = number;\n    let mut integer_part = 0;\n    while number >=\
    \ 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n    }\n    number",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let mut number = number;\n    let mut integer_part = 0;\n\
    \    while number >= 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n\
    \    }\n    number", "    let integer_part = number.trunc();\n    number - integer_part",
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let int_part = number.trunc();\n    number -\
    \ int_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", '    number
    - number.floor()', "    let mut integer = number.floor();\n    let mut decimals\
    \ = number - integer;\n    if decimals < 0.0 {\n        integer -= 1.0;\n    \
    \    decimals += 1.0;\n    }\n    decimals", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.trunc();\n    let decimal_part = number - integer_part;\n\
    \    decimal_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    return number - integer_part;", '    number - number.floor()',
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let integer_part = number.trunc();\n    number\
    \ - integer_part", "    let integer_part = number.trunc();\n    number - integer_part",
  "    let integer_part = number.trunc();\n    number - integer_part", "    let integer_part\
    \ = number.trunc();\n    number - integer_part", "    let integer_part = number.trunc();\n\
    \    number - integer_part", '    number - number.floor()', "    let truncated\
    \ = number.trunc();\n    number - truncated", "    let integer_part = number.trunc();\n\
    \    number - integer_part", "    let int_part = number.trunc();\n    number -\
    \ int_part"]
stop_tokens:
- "\n}"
