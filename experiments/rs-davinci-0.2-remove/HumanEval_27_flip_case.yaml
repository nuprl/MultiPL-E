name: HumanEval_27_flip_case
language: rs
prompt: "/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\nfn flip_case(string: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
  \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
  \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n\
    \    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()", '    string.chars().map(|c|
    c.to_ascii_uppercase()).collect()', "    string.chars().map(|c| {\n        match\
    \ c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z'\
    \ => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
  "    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n\
    \            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   }\n    }).collect()", '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        match c {\n\
    \            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', "  \
    \  string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n\
    \    } else {\n        c.to_ascii_uppercase()\n    }).collect()", "    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", '    string.chars().map(|c| c.swap_case()).collect()',
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| if c.is_lowercase()\
    \ {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', '    string.chars().map(|c| c.swap_case()).collect()',
  "    let mut flipped = String::new();\n    for c in string.chars() {\n        if\
    \ c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped",
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        match c {\n        \
    \    'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', "  \
    \  string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n           \
    \ c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        match c\
    \ {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| if c.is_lowercase() {\n\
    \        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        'a'...'z' =>\
    \ c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n    \
    \    _ => c,\n    }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        match c {\n\
    \            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", '    string.chars().map(|c|
    if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()
    }).collect()', "    string.chars().map(|c| {\n        if c.is_lowercase() {\n\
    \            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| if c.is_lowercase()\
    \ {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped",
  '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| if c.is_uppercase() {\n\
    \        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| if c.is_lowercase() {\n      \
    \  c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    let\
    \ mut flipped = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        } else\
    \ if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped",
  "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n           \
    \ c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", '    string.chars().map(|c| c.to_ascii_uppercase()).collect()',
  "    string.chars().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| if c.is_ascii_lowercase() {\n \
    \       c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
  '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  '    string.chars().map(|c| if c.is_ascii_lowercase() { c.to_ascii_uppercase() }
    else { c.to_ascii_lowercase() }).collect()', "    string.chars().map(|c| {\n \
    \       if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n    \
    \    } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.to_ascii_uppercase()).collect()', "    string.chars().map(|c| {\n        if\
    \ c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else\
    \ {\n            c.to_ascii_uppercase()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        match c {\n        \
    \    'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.to_ascii_uppercase()).collect()', '    string.chars().map(|c| c.swap_case()).collect()',
  '    string.chars().map(|c| c.swap_case()).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped",
  "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n           \
    \ c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| match c {\n       \
    \ 'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| {\n        if\
    \ c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else\
    \ {\n            c.to_ascii_lowercase()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', "  \
    \  string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n           \
    \ c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.to_ascii_uppercase()).collect()', "    string.chars().map(|c| if c.is_lowercase()\
    \ {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', '    string.chars().map(|c| c.swap_case()).collect()',
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", '    string.chars().map(|c| if c.is_uppercase()
    { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()',
  "    string.chars().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n\
    \    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n\
    \        'A'...'Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| {\n        match c\
    \ {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
  '    string.chars().map(|c| c.swap_case()).collect()', "    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()", "    string.chars().map(|c| c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n\
    \    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| if c.is_uppercase() {\n\
    \        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', " \
    \   string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", '    string.chars().map(|c| c.swap_case()).collect()',
  "    let mut flipped = String::new();\n    for c in string.chars() {\n        if\
    \ c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped", "    string.chars().map(|c| match c {\n     \
    \   'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| {\n        if\
    \ c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        }\
    \ else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()",
  '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.to_ascii_uppercase()).collect()', "    string.chars().map(|c| if c.is_ascii_lowercase()\
    \ {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()", '    string.chars().map(|c| c.swap_case()).collect()',
  '    string.chars().map(|c| c.swap_case()).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    let mut flipped = String::new();\n    for c in\
    \ string.chars() {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped", '    string.chars().map(|c| c.swap_case()).collect()',
  '    string.chars().map(|c| c.swap_case()).collect()', "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  "    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n\
    \    } else {\n        c.to_ascii_lowercase()\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| match c {\n       \
    \ 'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| if c.is_lowercase()\
    \ {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| if c.is_lowercase() {\n      \
    \  c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        match c {\n        \
    \    'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| if c.is_lowercase() {\n\
    \        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', '    string.chars().map(|c|
    c.swap_case()).collect()', "    string.chars().map(|c| if c.is_lowercase() {\n\
    \        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| c.swap_case()).collect()', "  \
    \  string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        match c {\n        \
    \    'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()", "    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()", '    string.chars().map(|c|
    c.swap_case()).collect()', '    string.chars().map(|c| c.swap_case()).collect()',
  "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", "    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
  '    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()
    } else { c.to_lowercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()", '    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()
    } else { c.to_uppercase().next().unwrap() }).collect()', "    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()"]
stop_tokens:
- "\n}"
